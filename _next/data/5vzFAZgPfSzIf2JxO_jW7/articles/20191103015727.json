{"pageProps":{"articleData":{"id":"20191103015727","contentHtml":"\n## データベースの作成\n```sql\nCREATE DATABASE データベース名;\n```\n\n## データベースの削除\n```sql\nDROP DATABASE データベース名;\n```\n\n## データベースの確認\n```sql\nSHOW DATABASES;\n```\n\n## カレントデータベースの変更\n```sql\nUSE データベース名;\n```\n\n## テーブルの作成\n```sql\nCREATE TABLE テーブル名 ( 列名 型, ... ) [ テーブルオプション ] ;\n```\n\n### 列定義オプション\n|種類|定義オプション|詳細|\n|-|-|-|\n主キー|PRIMARY KEY|重複と NULL は NG\nユニークキー|UNIQUE|重複は NG 、NULL は OK\nノンユニークキー|KEY|重複は OK\n空間インデックス|SPATIAL|座標等の空間情報インデックス\n全件検索インデックス|FULLTEXT|全件検索インデックス\n\n## テーブルの削除\n```sql\nDROP TABLE テーブル名;\n```\n\n## データの挿入\n```sql\nINSERT INTO データベース名.テーブル名( 列名1, 列名2, ... ) VALUES( 値1, 値2, ... );\n```\n\n全てのカラムに値を追加する場合。\n```sql\nINSERT INTO テーブル名 VALUES( 値1, 値2, ... );\n```\n\n## データ出力\n```sql\nSELECT * FROM テーブル名;\n```\n\n## データの検索\n```sql\nSELECT 列名1, 列名2, ... FROM テーブル名 [ 条件 ];\n```\n\n### 条件\n#### 比較演算子\n|演算子|意味|\n|-|-|\n=|等しい\n<|小さい\n>|大きい\n<=|以下\n>=|以上\n<>|等しくない\n\n#### BETWEEN\n指定した範囲に値があるものを取得。\n```sql\nSELECT * FROM テーブル WHERE BETWEEN 値1 AND 値2;\n```\n\n#### IN\n指定した値のリストの中にあるものを取得。\n```sql\nSELECT * FROM テーブル名 WHERE 列名 IN ( '値1', '値2' );\n```\n\n#### LIKE\n`%` は任意の文字数の任意の文字、 `_` は 1 文字の任意の文字。\n```sql\nSELECT * FROM テーブル名 WHERE 列名 LIKE '_100%';\n```\n\n#### サブクエリ\n副問合せ。\n```sql\nSELECT * FROM テーブル名 WHERE 列名1 = ( SELECT * FROM テーブル名 WHERE 列名2 = 値 );\n```\n\n### 並べ替え\n#### ORDER BY\nASC は昇順。 DESC は降順。 ASC は省略可能。\n```sql\nSELECT * FROM テーブル名 ORDER BY 列名 ASC;\n```\n\n### 集約\n#### GROUP BY\n重複を取り除いたりできる。\n```sql\nSELECT 列名 FROM テーブル名 GROUP BY 列名;\n```\n\n`distinct` でも重複を取り除ける。\n```sql\nSELECT distinct 列名 FROM テーブル名;\n```\n\n### 集約関数\n```sql\nSELECT 列名, 集約関数( 集計を取る列名 ) FROM テーブル名 GROUP BY 列名;\n```\n\n#### 集約関数の種類\n|関数|意味|\n|-|-|\nMAX|最大値\nMIN|最小値\nSUM|合計\nAVG|平均\nCOUNT|カウント\n\n#### 集計関数の条件\n- HAVING\n`GROUP BY` されたグループに対して条件を指定できる\n```sql\nSELECT 列名1, AVG( 列名2 ) FROM テーブル名 GROUP BY 列名1 HAVING COUNT( 列名1 ) >= 値;\n```\n\n### テーブルの結合\n#### 内部結合\nテーブルの指定した列の値が一致するデータのみを取得。\n```sql\nSELECT テーブル名.列名, ... FROM テーブル名1\nINNER JOIN テーブル名2 ON テーブル名1.列名1 = テーブル名2.列名2;\n```\n\n- USING\n`USING` でも書ける。\n```sql\nSELECT * FROM テーブル名1 INNER JOIN テーブル名2 USING( 列名 );\n```\n\n#### 外部結合\nテーブルの指定した列が一致するデータとどちらかのテーブルにしか存在しないデータも取得。\n```sql\nSELECT テーブル名.列名, ... FROM テーブル名1\n( LEFT | RIGHT ) OUTER JOIN テーブル名2 ON テーブル名1.列名1 = テーブル名2.列名2;\n```\n\n|書式|内容|\n|-|-|\nLEFT OUTER JOIN|FROM のあとに書かれたテーブルのデータだけを取得\nRIGHT OUTER JOIN|JOIN の後に書かれたテーブルのデータだけを取得\n\n内部結合同様 `USING` が使える。\n\n#### 交差結合\n2 つのテーブルの組み合わせを作る。\n```sql\nSELECT * FROM テーブル名1 CROSS JOIN テーブル名2;\n```\n\n### ビュー\nデータを持たず実行分だけが入っている。\n```sql\nCREATE VIEW ビュー名 ( 列名1, 列名2, ... ) AS SELECT文;\n```\n\n### 数値として取り出す\n```sql\nSELECT 列名 FROM as unsigned FROM テーブル名;\n```\n\n### index の付け方\n```sql\nALTER TABLE テーブル名 AND INDEX インデックス名 ( 列名 );\n```\n","title":"データベース操作","date":20191103015727,"tags":["MySQL"]}},"__N_SSG":true}