{"pageProps":{"docBody":{"id":"20211022165454","title":"prisma-client-go を試した","content":"\nまずは project の作成から.\n```bash\n$ go mod init backend\n```\n\nclient のインストール.\n```bash\n$ go get github.com/prisma/prisma-client-go\n```\n\nスキーマの作成.\n```bash\n$ npx prisma init\n```\n\n`prisma/schema.prisma` と `.env` (と .gitignore ) が生成される.\n\n`.env` と `prisma/schema.prisma` を修正.\n\n```env\n# Environment variables declared in this file are automatically made available to Prisma.\n# See the documentation for more detail: https://pris.ly/d/prisma-schema#using-environment-variables\n\n# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server and MongoDB (Preview).\n# See the documentation for all the connection string options: https://pris.ly/d/connection-strings\n\nDATABASE_URL=\"mysql://app:password@localhost:3306/app\"\n```\n\n```schema.prisma\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"go run github.com/prisma/prisma-client-go\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n```\n\n`Task` モデルを定義する.\n```schema.prisma\n// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"go run github.com/prisma/prisma-client-go\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Task {\n  id String @default(cuid()) @id\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title String\n  status Boolean\n  desc String?\n}\n```\n\nprisma クライアントの作成.\n`prisma/db/` が生成される.\n```bash\n$ go run github.com/prisma/prisma-client-go generate\n```\n\nDB にスキーマを反映させる.\n```bash\n$ go run github.com/prisma/prisma-client-go migrate dev --name create_task\n\n~~\n~~\nmigrations/\n  └─ 20211022082219_create_task/\n    └─ migration.sql\n\nYour database is now in sync with your schema.\n```\n\n`prisma/migrations/20211022082219_create_task/migration.sql` を見てみる.\n```sql\n-- CreateTable\nCREATE TABLE `Task` (\n    `id` VARCHAR(191) NOT NULL,\n    `createdAt` DATETIME(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),\n    `updatedAt` DATETIME(3) NOT NULL,\n    `title` VARCHAR(191) NOT NULL,\n    `status` BOOLEAN NOT NULL,\n    `desc` VARCHAR(191) NULL,\n\n    PRIMARY KEY (`id`)\n) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n```\n\nテーブルも作成されている.\n```mysql\nmysql> show tables;\n+--------------------+\n| Tables_in_app      |\n+--------------------+\n| _prisma_migrations |\n| Task               |\n+--------------------+\n```\n\n`Comment` モデルを定義し, `Task` モデルと関連付けを行う.\n```schema.prisma\nmodel Task {\n  id String @default(cuid()) @id\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  title String\n  status Boolean\n  desc String?\n\n  comments Comment[]\n}\n\nmodel Comment {\n  id String @default(cuid()) @id\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  content String\n\n  task Task @relation(fields: [taskId], references: [id])\n  taskId String\n```\n\nmigration を行う.\n```bash\n$ go run github.com/prisma/prisma-client-go migrate dev --name add_comment_model\n\n~~\n~~\nmigrations/\n  └─ 20211022083117_add_comment_model/\n    └─ migration.sql\n\nYour database is now in sync with your schema.\n```\n\n`migrations/20211022083117_add_comment_model/migration.sql` を見る.\n```sql\n-- CreateTable\nCREATE TABLE `Comment` (\n    `id` VARCHAR(191) NOT NULL,\n    `createdAt` DATETIME(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),\n    `updatedAt` DATETIME(3) NOT NULL,\n    `content` VARCHAR(191) NOT NULL,\n    `taskId` VARCHAR(191) NOT NULL,\n\n    PRIMARY KEY (`id`)\n) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- AddForeignKey\nALTER TABLE `Comment` ADD CONSTRAINT `Comment_taskId_fkey` FOREIGN KEY (`taskId`) REFERENCES `Task`(`id`) ON DELETE RESTRICT ON UPDATE CASCADE;\n```\n\n## Prisma Studio を使う\n`localhost:5555` で起動する.\n```bash\n$ npx prisma studio\n```\n\n## prisma api syntax\n### 全件取得する\n```go\ntasks, err := client.Task.FindMany().Exec(context.Background())\n```\n\n### クエリで取得する\n```go\ntasks, err := client.Task.FindMany(\n  db.Task.Title.Equals(\"1st task\")\n  // <model>.<field>.<method>.(value) 基本的にこの形式で使う\n).Exec(context.Background())\n```\n\n### 一意なデータを取得する\n`schema.prisma` で `@id`,`@unique` でマークされたもののみに使用可能.\n```go\ntask, err := client.Task.FindUnique(\n  db.Task.ID.Equals(\"1234567890\")\n).Exec(context.Background())\n```\n\n### 最初に見つかった 1 件を取得する\n```go\ntask, err := client.Task.FindFirst(\n  db.Task.Title.Equals(\"1st task\")\n).Exec(context.Background())\n```\n\n### Query API\n### スキーマのデータ型によってよしなにできる\n\n- `String Filter`\n```go\ntasks, err := client.Task.FindMany(\n  // Title が \"1st task\" と一致する Task を取得\n  db.Task.Title.Equals(\"1st task\")\n\n  // Title に \"task\" を含む Task を取得\n  // db.Task.Title.Contains(\"task\")\n\n  // Title が \"1st\" から始まる Task を取得\n  // db.Task.Title.StartsWith(\"1st\")\n\n  // Title が \"task\" で終わる Task を取得\n  // db.Task.Title.EndsWith(\"task\")\n).Exec(context.Background())\n```\n\n- `Number Filter`\n```go\n// <Field> が 50 である <Model> を取得\ndb.<Model>.<Field>.Equals(50).Exec(context.Background())\n\n// <Field> が 50 以下の <Model> を取得\ndb.<Model>.<Field>.Lte(50).Exec(context.Background())\n\n// <Field> が 50 未満の <Model> を取得\ndb.<Model>.<Field>.Lt(50).Exec(context.Background())\n\n// <Field> が 50 以上の <Model> を取得\ndb.<Model>.<Field>.Gte(50).Exec(context.Background())\n\n// <Field> が 50 より大きいの <Model> を取得\ndb.<Model>.<Field>.Gte(50).Exec(context.Background())\n```\n\n- `Time Filter`\n```go\ntasks, err := client.Task.FindMany(\n  // 昨日作成された task を取得する\n  db.Task.CreatedAt.Equals(yesterday)\n\n  // 過去 6 時間で作られた task を取得する (createdAt > 6 hours ago)\n  // db.Task.Gt(time.Now().Add(-6 * time.Hour))\n\n  // 過去 6 時間で作られた task を取得する (createdAt >= 6 hours ago)\n  // db.Task.Gte(time.Now().Add(-6 * time.Hour))\n\n  // 昨日作成された task を取得する\n  // db.Task.Lt(time.Now().Truncate(24 * time.Hour))\n\n  // 昨日作成された task を取得する (本日 00:00:00 を含む)\n  // db.Task.Lte(time.Now().Truncate(24 * time.Hour))\n).Exec(context.Background())\n```\n\n### NULL 関連\nnull であるものを取得する.\n```go\ndb.Task.Content.EqualsOptional(nil).Exec(context.Background())\n\ncontent := \"string\"\ndb.Task.Content.EqualsOptional(&content).Exec(context.Background())\n```\n\n### 他にも\n- `Not`\n```go\ndb.Task.Not(\n  db.Task.Title.Equals(\"1st task\")\n).Exec(context.Background())\n```\n\n- `Or`\n```go\ndb.Task.Or(\n  db.Task.Title.Equals(\"1st task\"),\n  db.Task.Desc.Equals(\"new task\")\n).Exec(context.Background())\n```\n\n### 関連付けされたクエリ\ntask の title が \"1st task\" で comment が \"new content\" であるもの task を取得する.\n```go\ntasks, err := client.Task.FindMany(\n  db.Task.Title.Equals(\"1st task\")\n  db.Task.Comments.Some(\n    db.Comment.Content.Equals(\"new content\"),\n  ),\n).Exec(context.Background())\n```\n"}},"__N_SSG":true}