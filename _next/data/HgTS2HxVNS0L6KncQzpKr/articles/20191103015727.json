{"pageProps":{"data":{"id":"20191103015727","fileContents":"{\n  \"title\": \"データベース操作\",\n  \"date\": 20191103015727,\n  \"tags\": [\n    \"mysql\"\n  ],\n  \"bodyContent\": \"## データベースの作成\\n```sql\\nCREATE DATABASE データベース名;\\n```\\n\\n## データベースの削除\\n```sql\\nDROP DATABASE データベース名;\\n```\\n\\n## データベースの確認\\n```sql\\nSHOW DATABASES;\\n```\\n\\n## カレントデータベースの変更\\n```sql\\nUSE データベース名;\\n```\\n\\n## テーブルの作成\\n```sql\\nCREATE TABLE テーブル名 ( 列名 型, ... ) [ テーブルオプション ] ;\\n```\\n\\n### 列定義オプション\\n|種類|定義オプション|詳細|\\n|-|-|-|\\n主キー|PRIMARY KEY|重複と NULL は NG\\nユニークキー|UNIQUE|重複は NG 、NULL は OK\\nノンユニークキー|KEY|重複は OK\\n空間インデックス|SPATIAL|座標等の空間情報インデックス\\n全件検索インデックス|FULLTEXT|全件検索インデックス\\n\\n## テーブルの削除\\n```sql\\nDROP TABLE テーブル名;\\n```\\n\\n## データの挿入\\n```sql\\nINSERT INTO データベース名.テーブル名( 列名1, 列名2, ... ) VALUES( 値1, 値2, ... );\\n```\\n\\n全てのカラムに値を追加する場合。\\n```sql\\nINSERT INTO テーブル名 VALUES( 値1, 値2, ... );\\n```\\n\\n## データ出力\\n```sql\\nSELECT * FROM テーブル名;\\n```\\n\\n## データの検索\\n```sql\\nSELECT 列名1, 列名2, ... FROM テーブル名 [ 条件 ];\\n```\\n\\n## 条件\\n### 比較演算子\\n|演算子|意味|\\n|-|-|\\n\\\"=\\\"|等しい\\n\\\"<\\\"|小さい\\n\\\">\\\"|大きい\\n\\\"<=\\\"|以下\\n\\\">=\\\"|以上\\n\\\"<>\\\"|等しくない\\n\\n### BETWEEN\\n指定した範囲に値があるものを取得。\\n```sql\\nSELECT * FROM テーブル WHERE BETWEEN 値1 AND 値2;\\n```\\n\\n### IN\\n指定した値のリストの中にあるものを取得。\\n```sql\\nSELECT * FROM テーブル名 WHERE 列名 IN ( '値1', '値2' );\\n```\\n\\n### LIKE\\n***%*** は任意の文字数の任意の文字、 ***_*** は 1 文字の任意の文字。\\n```sql\\nSELECT * FROM テーブル名 WHERE 列名 LIKE '_100%';\\n```\\n\\n### サブクエリ\\n副問合せ。\\n```sql\\nSELECT * FROM テーブル名 WHERE 列名1 = ( SELECT * FROM テーブル名 WHERE 列名2 = 値 );\\n```\\n\\n## 並べ替え\\n### ORDER BY\\nASC は昇順。 DESC は降順。 ASC は省略可能。\\n```sql\\nSELECT * FROM テーブル名 ORDER BY 列名 ASC;\\n```\\n\\n## 集約\\n### GROUP BY\\n重複を取り除いたりできる。\\n```sql\\nSELECT 列名 FROM テーブル名 GROUP BY 列名;\\n```\\n\\n***distinct*** でも重複を取り除ける。\\n```sql\\nSELECT distinct 列名 FROM テーブル名;\\n```\\n\\n## 集約関数\\n```sql\\nSELECT 列名, 集約関数( 集計を取る列名 ) FROM テーブル名 GROUP BY 列名;\\n```\\n\\n### 集約関数の種類\\n|関数|意味|\\n|-|-|\\nMAX|最大値\\nMIN|最小値\\nSUM|合計\\nAVG|平均\\nCOUNT|カウント\\n\\n### 集計関数の条件\\n- HAVING\\n***GROUP BY*** されたグループに対して条件を指定できる。\\n```sql\\nSELECT 列名1, AVG( 列名2 ) FROM テーブル名 GROUP BY 列名1 HAVING COUNT( 列名1 ) >= 値;\\n```\\n\\n## テーブルの結合\\n### 内部結合\\nテーブルの指定した列の値が一致するデータのみを取得。\\n```sql\\nSELECT テーブル名.列名, ... FROM テーブル名1\\nINNER JOIN テーブル名2 ON テーブル名1.列名1 = テーブル名2.列名2;\\n```\\n\\n- USING\\n***USING*** でも書ける。\\n```sql\\nSELECT * FROM テーブル名1 INNER JOIN テーブル名2 USING( 列名 );\\n```\\n\\n### 外部結合\\nテーブルの指定した列が一致するデータとどちらかのテーブルにしか存在しないデータも取得。\\n```sql\\nSELECT テーブル名.列名, ... FROM テーブル名1\\n( LEFT | RIGHT ) OUTER JOIN テーブル名2 ON テーブル名1.列名1 = テーブル名2.列名2;\\n```\\n\\n|書式|内容|\\n|-|-|\\nLEFT OUTER JOIN|FROM のあとに書かれたテーブルのデータだけを取得\\nRIGHT OUTER JOIN|JOIN の後に書かれたテーブルのデータだけを取得\\n\\n内部結合同様 ***USING*** が使える。\\n\\n### 交差結合\\n2 つのテーブルの組み合わせを作る。\\n```sql\\nSELECT * FROM テーブル名1 CROSS JOIN テーブル名2;\\n```\\n\\n## ビュー\\nデータを持たず実行分だけが入っている。\\n```sql\\nCREATE VIEW ビュー名 ( 列名1, 列名2, ... ) AS SELECT文;\\n```\\n\\n## 数値として取り出す\\n```sql\\nSELECT 列名 FROM as unsigned FROM テーブル名;\\n```\\n\\n## index の付け方\\n```sql\\nALTER TABLE テーブル名 AND INDEX インデックス名 ( 列名 );\\n```\",\n  \"bodyHtml\": \"<h2>データベースの作成</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">CREATE</span> DATABASE データベース名;</code></pre><h2>データベースの削除</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">DROP</span> DATABASE データベース名;</code></pre><h2>データベースの確認</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SHOW</span> DATABASES;</code></pre><h2>カレントデータベースの変更</h2>\\n<pre><code class=\\\"hljs\\\">USE データベース名;</code></pre><h2>テーブルの作成</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">CREATE</span> <span class=\\\"hljs-keyword\\\">TABLE</span> テーブル名 ( 列名 型, ... ) [ テーブルオプション ] ;</code></pre><h3>列定義オプション</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>種類</th>\\n<th>定義オプション</th>\\n<th>詳細</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>主キー</td>\\n<td>PRIMARY KEY</td>\\n<td>重複と NULL は NG</td>\\n</tr>\\n<tr>\\n<td>ユニークキー</td>\\n<td>UNIQUE</td>\\n<td>重複は NG 、NULL は OK</td>\\n</tr>\\n<tr>\\n<td>ノンユニークキー</td>\\n<td>KEY</td>\\n<td>重複は OK</td>\\n</tr>\\n<tr>\\n<td>空間インデックス</td>\\n<td>SPATIAL</td>\\n<td>座標等の空間情報インデックス</td>\\n</tr>\\n<tr>\\n<td>全件検索インデックス</td>\\n<td>FULLTEXT</td>\\n<td>全件検索インデックス</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>テーブルの削除</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">DROP</span> <span class=\\\"hljs-keyword\\\">TABLE</span> テーブル名;</code></pre><h2>データの挿入</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">INSERT</span> <span class=\\\"hljs-keyword\\\">INTO</span> データベース名.テーブル名( 列名<span class=\\\"hljs-number\\\">1</span>, 列名<span class=\\\"hljs-number\\\">2</span>, ... ) <span class=\\\"hljs-keyword\\\">VALUES</span>( 値<span class=\\\"hljs-number\\\">1</span>, 値<span class=\\\"hljs-number\\\">2</span>, ... );</code></pre><p>全てのカラムに値を追加する場合。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">INSERT</span> <span class=\\\"hljs-keyword\\\">INTO</span> テーブル名 <span class=\\\"hljs-keyword\\\">VALUES</span>( 値<span class=\\\"hljs-number\\\">1</span>, 値<span class=\\\"hljs-number\\\">2</span>, ... );</code></pre><h2>データ出力</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">FROM</span> テーブル名;</code></pre><h2>データの検索</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> 列名<span class=\\\"hljs-number\\\">1</span>, 列名<span class=\\\"hljs-number\\\">2</span>, ... <span class=\\\"hljs-keyword\\\">FROM</span> テーブル名 [ 条件 ];</code></pre><h2>条件</h2>\\n<h3>比較演算子</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>演算子</th>\\n<th>意味</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>&quot;=&quot;</td>\\n<td>等しい</td>\\n</tr>\\n<tr>\\n<td>&quot;&lt;&quot;</td>\\n<td>小さい</td>\\n</tr>\\n<tr>\\n<td>&quot;&gt;&quot;</td>\\n<td>大きい</td>\\n</tr>\\n<tr>\\n<td>&quot;&lt;=&quot;</td>\\n<td>以下</td>\\n</tr>\\n<tr>\\n<td>&quot;&gt;=&quot;</td>\\n<td>以上</td>\\n</tr>\\n<tr>\\n<td>&quot;&lt;&gt;&quot;</td>\\n<td>等しくない</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3>BETWEEN</h3>\\n<p>指定した範囲に値があるものを取得。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">FROM</span> テーブル <span class=\\\"hljs-keyword\\\">WHERE</span> <span class=\\\"hljs-keyword\\\">BETWEEN</span> 値<span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-keyword\\\">AND</span> 値<span class=\\\"hljs-number\\\">2</span>;</code></pre><h3>IN</h3>\\n<p>指定した値のリストの中にあるものを取得。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">FROM</span> テーブル名 <span class=\\\"hljs-keyword\\\">WHERE</span> 列名 <span class=\\\"hljs-keyword\\\">IN</span> ( <span class=\\\"hljs-string\\\">&#x27;値1&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;値2&#x27;</span> );</code></pre><h3>LIKE</h3>\\n<p><em><strong>%</strong></em> は任意の文字数の任意の文字、 <em><strong>_</strong></em> は 1 文字の任意の文字。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">FROM</span> テーブル名 <span class=\\\"hljs-keyword\\\">WHERE</span> 列名 <span class=\\\"hljs-keyword\\\">LIKE</span> <span class=\\\"hljs-string\\\">&#x27;_100%&#x27;</span>;</code></pre><h3>サブクエリ</h3>\\n<p>副問合せ。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">FROM</span> テーブル名 <span class=\\\"hljs-keyword\\\">WHERE</span> 列名<span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">=</span> ( <span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">FROM</span> テーブル名 <span class=\\\"hljs-keyword\\\">WHERE</span> 列名<span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-operator\\\">=</span> 値 );</code></pre><h2>並べ替え</h2>\\n<h3>ORDER BY</h3>\\n<p>ASC は昇順。 DESC は降順。 ASC は省略可能。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">FROM</span> テーブル名 <span class=\\\"hljs-keyword\\\">ORDER</span> <span class=\\\"hljs-keyword\\\">BY</span> 列名 <span class=\\\"hljs-keyword\\\">ASC</span>;</code></pre><h2>集約</h2>\\n<h3>GROUP BY</h3>\\n<p>重複を取り除いたりできる。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> 列名 <span class=\\\"hljs-keyword\\\">FROM</span> テーブル名 <span class=\\\"hljs-keyword\\\">GROUP</span> <span class=\\\"hljs-keyword\\\">BY</span> 列名;</code></pre><p><em><strong>distinct</strong></em> でも重複を取り除ける。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-keyword\\\">distinct</span> 列名 <span class=\\\"hljs-keyword\\\">FROM</span> テーブル名;</code></pre><h2>集約関数</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> 列名, 集約関数( 集計を取る列名 ) <span class=\\\"hljs-keyword\\\">FROM</span> テーブル名 <span class=\\\"hljs-keyword\\\">GROUP</span> <span class=\\\"hljs-keyword\\\">BY</span> 列名;</code></pre><h3>集約関数の種類</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>関数</th>\\n<th>意味</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>MAX</td>\\n<td>最大値</td>\\n</tr>\\n<tr>\\n<td>MIN</td>\\n<td>最小値</td>\\n</tr>\\n<tr>\\n<td>SUM</td>\\n<td>合計</td>\\n</tr>\\n<tr>\\n<td>AVG</td>\\n<td>平均</td>\\n</tr>\\n<tr>\\n<td>COUNT</td>\\n<td>カウント</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3>集計関数の条件</h3>\\n<ul>\\n<li>HAVING\\n<em><strong>GROUP BY</strong></em> されたグループに対して条件を指定できる。</li>\\n</ul>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> 列名<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-built_in\\\">AVG</span>( 列名<span class=\\\"hljs-number\\\">2</span> ) <span class=\\\"hljs-keyword\\\">FROM</span> テーブル名 <span class=\\\"hljs-keyword\\\">GROUP</span> <span class=\\\"hljs-keyword\\\">BY</span> 列名<span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-keyword\\\">HAVING</span> <span class=\\\"hljs-built_in\\\">COUNT</span>( 列名<span class=\\\"hljs-number\\\">1</span> ) <span class=\\\"hljs-operator\\\">&gt;=</span> 値;</code></pre><h2>テーブルの結合</h2>\\n<h3>内部結合</h3>\\n<p>テーブルの指定した列の値が一致するデータのみを取得。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> テーブル名.列名, ... <span class=\\\"hljs-keyword\\\">FROM</span> テーブル名<span class=\\\"hljs-number\\\">1</span>\\n<span class=\\\"hljs-keyword\\\">INNER</span> <span class=\\\"hljs-keyword\\\">JOIN</span> テーブル名<span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-keyword\\\">ON</span> テーブル名<span class=\\\"hljs-number\\\">1.</span>列名<span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">=</span> テーブル名<span class=\\\"hljs-number\\\">2.</span>列名<span class=\\\"hljs-number\\\">2</span>;</code></pre><ul>\\n<li>USING\\n<em><strong>USING</strong></em> でも書ける。</li>\\n</ul>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">FROM</span> テーブル名<span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-keyword\\\">INNER</span> <span class=\\\"hljs-keyword\\\">JOIN</span> テーブル名<span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-keyword\\\">USING</span>( 列名 );</code></pre><h3>外部結合</h3>\\n<p>テーブルの指定した列が一致するデータとどちらかのテーブルにしか存在しないデータも取得。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> テーブル名.列名, ... <span class=\\\"hljs-keyword\\\">FROM</span> テーブル名<span class=\\\"hljs-number\\\">1</span>\\n( <span class=\\\"hljs-keyword\\\">LEFT</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">RIGHT</span> ) <span class=\\\"hljs-keyword\\\">OUTER</span> <span class=\\\"hljs-keyword\\\">JOIN</span> テーブル名<span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-keyword\\\">ON</span> テーブル名<span class=\\\"hljs-number\\\">1.</span>列名<span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">=</span> テーブル名<span class=\\\"hljs-number\\\">2.</span>列名<span class=\\\"hljs-number\\\">2</span>;</code></pre><table>\\n<thead>\\n<tr>\\n<th>書式</th>\\n<th>内容</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>LEFT OUTER JOIN</td>\\n<td>FROM のあとに書かれたテーブルのデータだけを取得</td>\\n</tr>\\n<tr>\\n<td>RIGHT OUTER JOIN</td>\\n<td>JOIN の後に書かれたテーブルのデータだけを取得</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>内部結合同様 <em><strong>USING</strong></em> が使える。</p>\\n<h3>交差結合</h3>\\n<p>2 つのテーブルの組み合わせを作る。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">FROM</span> テーブル名<span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-keyword\\\">CROSS</span> <span class=\\\"hljs-keyword\\\">JOIN</span> テーブル名<span class=\\\"hljs-number\\\">2</span>;</code></pre><h2>ビュー</h2>\\n<p>データを持たず実行分だけが入っている。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">CREATE</span> <span class=\\\"hljs-keyword\\\">VIEW</span> ビュー名 ( 列名<span class=\\\"hljs-number\\\">1</span>, 列名<span class=\\\"hljs-number\\\">2</span>, ... ) <span class=\\\"hljs-keyword\\\">AS</span> <span class=\\\"hljs-keyword\\\">SELECT</span>文;</code></pre><h2>数値として取り出す</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> 列名 <span class=\\\"hljs-keyword\\\">FROM</span> <span class=\\\"hljs-keyword\\\">as</span> unsigned <span class=\\\"hljs-keyword\\\">FROM</span> テーブル名;</code></pre><h2>index の付け方</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">ALTER</span> <span class=\\\"hljs-keyword\\\">TABLE</span> テーブル名 <span class=\\\"hljs-keyword\\\">AND</span> INDEX インデックス名 ( 列名 );</code></pre>\",\n  \"dir\": \"articles\",\n  \"base\": \"20191103015727.json\",\n  \"ext\": \".json\",\n  \"sourceBase\": \"20191103015727.md\",\n  \"sourceExt\": \".md\"\n}"}},"__N_SSG":true}