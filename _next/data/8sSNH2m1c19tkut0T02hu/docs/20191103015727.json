{"pageProps":{"docBody":{"id":"20191103015727","title":"データベース操作","content":"\n## データベースの作成\n```sql\nCREATE DATABASE database_name;\n```\n\n## データベースの削除\n```sql\nDROP DATABASE database_name;\n```\n\n## テーブルの作成\n```sql\nCREATE TABLE table_name (col_name type, ...);\n```\n\n### 主キー\n```sql\nCREATE TABLE table_name (col_name type, ..., PRIMARY KEY (col_name));\n```\n- PRIMARY KEY の重複と NULL は NG\n- 複数の列を指定できる (複合主キー)\n  - PRIMARY KEY (列名 1, 列名 2 )\n\n### 外部キー\n```sql\nCREATE TABLE table_name (\n  col_name type, ...,\n  FOREIGN KEY (col_name) REFERENCES parent_table_name(col_name)\n);\n```\n- 子テーブルの外部キーの値は親テーブルに存在しないといけない\n- 参照される値 (親テーブル) の UPDATE / DELETE は NG\n\n#### 親テーブルの UPDATE / DELETE 時の設定\n```sql\nCREATE TABLE table_name (\n  col_name type, ...,\n  FOREIGN KEY (col_name) REFERENCES parent_table_name(col_name)\n  ON DELETE [ アクション ]\n  ON UPDATE [ アクション ]\n);\n\n```\n設定できるアクション.\n|アクション|詳細|\n|-|-|\nRESTRICT|親テーブルに対して UPDATE / DELETE を行うとエラーになる (デフォルト)\nCASCADE|親テーブルに対して UPDATE / DELETE を行うと,子テーブルの一致する行に自動的に UPDATE / DELETE を行う\nSET NULL|親テーブルに対して UPDATE / DELETE を行うと,子テーブルの外部キーを NULL に設定する\n\n\n## データの検索\n```sql\nSELECT col_name1, col_name2, ... FROM table_name [ 条件 ];\n```\n\n### 条件\n- 比較演算子\n\n|演算子|意味|\n|-|-|\n\"=\"|等しい\n\"<\"|小さい\n\">\"|大きい\n\"<=\"|以下\n\">=\"|以上\n\"<>\"|等しくない\n\n- BETWEEN\n```sql\nSELECT * FROM table_name WHERE BETWEEN value1 AND value2;\n```\n指定した範囲に値があるものを取得.\n\n- IN\n```sql\nSELECT * FROM table_name WHERE col_name IN ('value1', 'value2');\n```\n指定した値のリストの中にあるものを取得.\n\n- LIKE\n```sql\nSELECT * FROM table_name WHERE col_name LIKE '_100%';\n```\n`%` は任意の文字数の任意の文字, `_` は 1 文字の任意の文字.\n\n- サブクエリ\n```sql\nSELECT * FROM table_name\nWHERE col_name1 = (\n  SELECT * FROM table_name WHERE col_name2 = value\n);\n```\n副問合せ.\n\n### DISTINCT\n```sql\nSELECT DISTINCT col_name1, col_name2, ... FROM table_name;\n```\nSELECT の結果から重複業を除外できる.\n\n`GROUP BY` でも重複削除できる.\n```sql\nSELECT col_name1, col_name2, ... FROM table_name GROUP BY col_name1;\n```\n\n### ORDER BY\n```sql\nSELECT * FROM table_name ORDER BY col_name1 ASC, col_name2 DESC;\n```\nASC は昇順. DESC は降順. ASC は省略可能.\n\n### LIMIT\n```sql\nSELECT * FROM table_name ORDER BY col_name LIMIT 5;\n```\n\n### 集約関数\n```sql\nSELECT col_name, MAX(col_name) FROM table_name;\n```\n基本的に NULL は無視される.\n集約関数の種類.\n|関数|意味|\n|-|-|\nMAX|最大値\nMIN|最小値\nSUM|合計\nAVG|平均\nCOUNT|カウント\n\nSUM / AVG / COUNT は DISTINCT をサポートしている.\n```sql\nSELECT col_name, COUNT( DISTINCT col_name ) FROM table_name;\n```\n\n### GROUP BY\n```sql\nSELECT col_name, COUNT(col_name) FROM table_name GROUP BY col_name;\n```\nテーブルを集約キーでグループ分けしてから集計する.\n\n### HAVING\n```sql\nSELECT COUNT(col_name1) FROM table_name GROUP BY col_name1 HAVING COUNT(col_name1) >= value;\n```\n`GROUP BY` されたグループに対して条件を指定できる.\n\nこの場合,列名 1 で集計した値をカウントしてから HAVING で指定した条件のもののみを取得する.\n\n## 結合 ( JOIN )\n結合の種類は 3 つ.\n- クロス結合 ( CROSS JOIN )\n- 内部結合 ( INNER JOIN )\n- 外部結合 ( OUTER JOIN )\n\n### クロス結合 ( CROSS JOIN )\n```sql\nSELECT *\nFROM table_name1 CROSS JOIN table_name2;\n```\nすべてのテーブルの組み合わせを作る.\n\n### 内部結合 ( INNER JOIN )\n```sql\nSELECT table_name1.*, table_name2.col_name, ...\nFROM table_name1 INNER JOIN table_name2\nON table_name1.col_name1 = table_name2.col_name1;\n```\nクロス結合の部分集合.条件一致したものだけを取得する.\n\n`USING` でも書ける.\n```sql\nSELECT table_name1.*, table_name2.col_name, ...\nFROM table_name1 INNER JOIN table_name2 USING(col_name);\n```\n\n### 外部結合\n```sql\nSELECT table_name1.*, table_name2.col_name, ...\nFROM table_name1 ( LEFT | RIGHT ) OUTER JOIN table_name2\nON table_name1.col_name1 = table_name2.col_name1;\n```\n内部結合と同様に条件一致したものを取得し,さらに, マッチしなかった ( LEFT | RIGHT ) のテーブルの行は残す.\n\n|書式|内容|\n|-|-|\nLEFT OUTER JOIN|FROM のあとに書かれたテーブルのデータだけを取得\nRIGHT OUTER JOIN|JOIN の後に書かれたテーブルのデータだけを取得\n\n## テーブルの削除\n```sql\nDROP TABLE table_name;\n```\n\n## データの挿入\n```sql\nINSERT INTO database_name.table_name(col_name1, col_name2, ...) VALUES (value1, value2, ...);\n```\n\n全てのカラムに値を追加する場合は以下のように書ける.\n```sql\nINSERT INTO table_name VALUES(value1, value2, ...);\n```\n\n## ビュー\nデータを持たず実行分だけが入っている.\n```sql\nCREATE VIEW view_name (col_name1, col_name2, ...) AS select_statement;\n```\n\n## 数値として取り出す\n```sql\nSELECT col_name FROM as unsigned FROM table_name;\n```\n\n## index の付け方\n```sql\nALTER TABLE table_name AND INDEX index_name (col_name);\n```\n\n## トランザクション\n`BEGIN` で開始して, `COMMIT` で反映, `ROLLBACK` で取り消しができる.\n```sql\nBEGIN;\n  SQL1;\n  SQL2;\nCOMMIT;\n```\n"}},"__N_SSG":true}