{"pageProps":{"docBody":{"id":"20211106130548","title":"echo を使ってみる","content":"\n最小構成.\n```bash\n$ go get github.com/labstack/echo/v4\n```\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"Hello World!\")\n\t})\n\te.Logger.Fatal(e.Start(\":8080\"))\n}\n```\n\n## path parameters\n`http://localhost:8080/users/1`\n\n`1` が返ってくる.\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.GET(\"/users/:id\", getUser)\n\te.Logger.Fatal(e.Start(\":8080\"))\n}\n\nfunc getUser(c echo.Context) error {\n\tid := c.Param(\"id\")\n\treturn c.String(http.StatusOK, id)\n}\n```\n\n## query parameters\n`http://localhost:8080/show?team=x-men&member=wolverine`\n\n`team: x-men, member: wolverine` が返ってくる.\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.GET(\"/show\", show)\n\te.Logger.Fatal(e.Start(\":8080\"))\n}\n\nfunc show(c echo.Context) error {\n\tteam := c.QueryParam(\"team\")\n\tmember := c.QueryParam(\"member\")\n\treturn c.String(http.StatusOK, \"team: \"+team+\", member: \"+member)\n}\n```\n\n## json を返す\n`http://localhost:8080/json`\n\njson を返す.\n```json\n{\n  \"name\": \"Jon\",\n  \"email\": \"json@sample.com\"\n}\n```\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.GET(\"/json\", json)\n\te.Logger.Fatal(e.Start(\":8080\"))\n}\n\ntype User struct {\n\tName  string `json:\"name\"`\n\tEmail string `json:\"email\"`\n}\n\nfunc json(c echo.Context) error {\n\tuser := &User{\n\t\tName:  \"Jon\",\n\t\tEmail: \"json@sample.com\",\n\t}\n\treturn c.JSON(http.StatusOK, user)\n}\n```\n\n`context.JSON` は内部では `json.Marshal` を使っている.\n大きな JSON では非効率なので,その場合は直接 JSON をストリームできる.\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.GET(\"/jsonStream\", jsonStream)\n\te.Logger.Fatal(e.Start(\":8080\"))\n}\n\ntype User struct {\n\tName  string `json:\"name\"`\n\tEmail string `json:\"email\"`\n}\n\nfunc jsonStream(c echo.Context) error {\n\tuser := &User{\n\t\tName:  \"Jon\",\n\t\tEmail: \"json@sample.com\",\n\t}\n\tc.Response().Header().Set(echo.HeaderContentType, echo.MIMEApplicationJSONCharsetUTF8)\n\tc.Response().WriteHeader(http.StatusOK)\n\treturn json.NewEncoder(c.Response()).Encode(user)\n}\n```\n\n## Bind\n`Context.Bind` を使って,ソースからデータ構造にバインドさせる.\n\n```bash\n$ curl -X POST http://localhost:8080/users \\\n       -H 'Content-Type: application/json' \\\n       -d '{\"name\":\"Jon\",\"email\":\"json@sample.com\"}'\n{\n  \"name\":\"Jon\",\n  \"email\":\"json@sample.com\"\n}\n```\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.POST(\"/users\", create)\n\te.Logger.Fatal(e.Start(\":8080\"))\n}\n\ntype User struct {\n\tName  string `json:\"name\"`\n\tEmail string `json:\"email\"`\n}\n\nfunc create(c echo.Context) error {\n\tuser := new(User)\n\tif err := c.Bind(user); err != nil {\n\t\treturn err\n\t}\n\tfmt.Println(user)\n\n\tbindUser := &User{\n\t\tName:  user.Name,\n\t\tEmail: user.Email,\n\t}\n\n\treturn c.JSON(http.StatusOK, bindUser)\n}\n```\n"}},"__N_SSG":true}