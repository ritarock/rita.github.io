{"pageProps":{"data":{"id":"20201104134500","fileContents":"{\n  \"title\": \"some / every / filter / map / flatMap / Object.entries とか\",\n  \"date\": 20201104134500,\n  \"tags\": [\n    \"javascript\"\n  ],\n  \"bodyContent\": \"## some()\\n`some()` は配列内の要素 1 つでも条件に合致するものがあれば true を返し, 1 つも合致しなければ false を返す.\\n\\n```javascript\\nconst dataList = [\\n  {id: 1, user: \\\"user1\\\"},\\n  {id: 2, user: \\\"user2\\\"},\\n  {id: 3, user: \\\"user3\\\"},\\n]\\n\\nconst includeId3 = dataList.some(data => data.id === 3)\\nconsole.log(includeId3) //true\\n```\\n\\n## ever()\\n`every()` は配列内の全ての要素が条件に合致するかを調べることができる.\\n```javascript\\nconst dataList = [\\n  {id: 1, user: \\\"user1\\\"},\\n  {id: 2, user: \\\"user2\\\"},\\n  {id: 3, user: \\\"user3\\\"},\\n]\\n\\nconst includeId3 = dataList.every(data => data.id === 3)\\nconsole.log(includeId3) //false\\n```\\n\\n## filter()\\n`filter()` は配列の要素から条件に合致する新しい配列を作成する.\\n\\n```javascript\\nconst dataList = [\\n  { id: 1, user: \\\"usr1\\\"},\\n  { id: 10, user: \\\"usr10\\\"},\\n  { id: 20, user: \\\"usr20\\\"},\\n]\\n\\nconst over10List = dataList.filter(data => data.id >= 10)\\n\\nconsole.log(over10List)\\n// [ { id: 10, user: 'usr10' }, { id: 20, user: 'usr20' } ]\\n```\\n\\n## map()\\n`map()` は処理して新しい配列を作成する.\\n\\n```javascript\\nconst dataList = [\\n  { id: 1, user: \\\"usr1\\\"},\\n  { id: 10, user: \\\"usr10\\\"},\\n  { id: 20, user: \\\"usr20\\\"},\\n]\\n\\nconst over10List = dataList\\n                    .filter(data => data.id >= 10)\\n                    .map(data => data.user)\\n\\nconsole.log(over10List)\\n// [ 'usr10', 'usr20' ]\\n```\\n\\n## flatMap()\\n`flatMap()` は配列の階層を解除し,別の配列に置き換える.\\n\\n`flatMap()` は `map()` の処理の後に `flat()` を実行する.\\n\\n`flat()` は配列を 1 次元にするメソッド.\\n\\n```javascript\\nconst dataList = [\\n  {\\n    user: \\\"user1\\\",\\n    tags: [\\\"aaa\\\", \\\"bbb\\\"]\\n  },\\n  {\\n    user: \\\"user2\\\",\\n    tags: [\\\"ccc\\\"]\\n  },\\n  {\\n    user: \\\"user3\\\",\\n    tags: [\\\"ddd\\\"]\\n  },\\n]\\n\\nconst tagList = dataList.flatMap(data => data.tags)\\n\\nconsole.log(tagList)\\n// [ 'aaa', 'bbb', 'ccc', 'ddd' ]\\n\\n\\nconst tagList2 = dataList.map(data => data.tags)\\n\\nconsole.log(tagList2.flat())\\n// [ 'aaa', 'bbb', 'ccc', 'ddd' ]\\n```\\n\\n## Object.entries()\\n`Object.entries( 対象のオブジェクト )` を実行すると `[[key1, value1], [key2, value2]]` が返る.\\n\\n```javascript\\nconst obj = {\\n  id: 1,\\n  user: \\\"user1\\\",\\n  name: \\\"name1\\\"\\n}\\n\\nconsole.log(Object.entries(obj))\\n// [ [ 'id', 1 ], [ 'user', 'user1' ], [ 'name', 'name1' ] ]\\n\\nObject.entries(obj)\\n        .forEach(([key, value]) => {\\n          console.log(`Key: ${key}`)\\n          console.log(`Value: ${value}`)\\n        })\\n// Key: id\\n// Value: 1\\n// Key: user\\n// Value: user1\\n// Key: name\\n// Value: name1\\n```\",\n  \"bodyHtml\": \"<h2>some()</h2>\\n<p><code>some()</code> は配列内の要素 1 つでも条件に合致するものがあれば true を返し, 1 つも合致しなければ false を返す.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">const</span> dataList = [\\n  {<span class=\\\"hljs-attr\\\">id</span>: <span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-attr\\\">user</span>: <span class=\\\"hljs-string\\\">&quot;user1&quot;</span>},\\n  {<span class=\\\"hljs-attr\\\">id</span>: <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-attr\\\">user</span>: <span class=\\\"hljs-string\\\">&quot;user2&quot;</span>},\\n  {<span class=\\\"hljs-attr\\\">id</span>: <span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-attr\\\">user</span>: <span class=\\\"hljs-string\\\">&quot;user3&quot;</span>},\\n]\\n\\n<span class=\\\"hljs-keyword\\\">const</span> includeId3 = dataList.some(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">data</span> =&gt;</span> data.id === <span class=\\\"hljs-number\\\">3</span>)\\n<span class=\\\"hljs-built_in\\\">console</span>.log(includeId3) <span class=\\\"hljs-comment\\\">//true</span></code></pre><h2>ever()</h2>\\n<p><code>every()</code> は配列内の全ての要素が条件に合致するかを調べることができる.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">const</span> dataList = [\\n  {<span class=\\\"hljs-attr\\\">id</span>: <span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-attr\\\">user</span>: <span class=\\\"hljs-string\\\">&quot;user1&quot;</span>},\\n  {<span class=\\\"hljs-attr\\\">id</span>: <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-attr\\\">user</span>: <span class=\\\"hljs-string\\\">&quot;user2&quot;</span>},\\n  {<span class=\\\"hljs-attr\\\">id</span>: <span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-attr\\\">user</span>: <span class=\\\"hljs-string\\\">&quot;user3&quot;</span>},\\n]\\n\\n<span class=\\\"hljs-keyword\\\">const</span> includeId3 = dataList.every(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">data</span> =&gt;</span> data.id === <span class=\\\"hljs-number\\\">3</span>)\\n<span class=\\\"hljs-built_in\\\">console</span>.log(includeId3) <span class=\\\"hljs-comment\\\">//false</span></code></pre><h2>filter()</h2>\\n<p><code>filter()</code> は配列の要素から条件に合致する新しい配列を作成する.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">const</span> dataList = [\\n  { <span class=\\\"hljs-attr\\\">id</span>: <span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-attr\\\">user</span>: <span class=\\\"hljs-string\\\">&quot;usr1&quot;</span>},\\n  { <span class=\\\"hljs-attr\\\">id</span>: <span class=\\\"hljs-number\\\">10</span>, <span class=\\\"hljs-attr\\\">user</span>: <span class=\\\"hljs-string\\\">&quot;usr10&quot;</span>},\\n  { <span class=\\\"hljs-attr\\\">id</span>: <span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-attr\\\">user</span>: <span class=\\\"hljs-string\\\">&quot;usr20&quot;</span>},\\n]\\n\\n<span class=\\\"hljs-keyword\\\">const</span> over10List = dataList.filter(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">data</span> =&gt;</span> data.id &gt;= <span class=\\\"hljs-number\\\">10</span>)\\n\\n<span class=\\\"hljs-built_in\\\">console</span>.log(over10List)\\n<span class=\\\"hljs-comment\\\">// [ { id: 10, user: &#x27;usr10&#x27; }, { id: 20, user: &#x27;usr20&#x27; } ]</span></code></pre><h2>map()</h2>\\n<p><code>map()</code> は処理して新しい配列を作成する.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">const</span> dataList = [\\n  { <span class=\\\"hljs-attr\\\">id</span>: <span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-attr\\\">user</span>: <span class=\\\"hljs-string\\\">&quot;usr1&quot;</span>},\\n  { <span class=\\\"hljs-attr\\\">id</span>: <span class=\\\"hljs-number\\\">10</span>, <span class=\\\"hljs-attr\\\">user</span>: <span class=\\\"hljs-string\\\">&quot;usr10&quot;</span>},\\n  { <span class=\\\"hljs-attr\\\">id</span>: <span class=\\\"hljs-number\\\">20</span>, <span class=\\\"hljs-attr\\\">user</span>: <span class=\\\"hljs-string\\\">&quot;usr20&quot;</span>},\\n]\\n\\n<span class=\\\"hljs-keyword\\\">const</span> over10List = dataList\\n                    .filter(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">data</span> =&gt;</span> data.id &gt;= <span class=\\\"hljs-number\\\">10</span>)\\n                    .map(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">data</span> =&gt;</span> data.user)\\n\\n<span class=\\\"hljs-built_in\\\">console</span>.log(over10List)\\n<span class=\\\"hljs-comment\\\">// [ &#x27;usr10&#x27;, &#x27;usr20&#x27; ]</span></code></pre><h2>flatMap()</h2>\\n<p><code>flatMap()</code> は配列の階層を解除し,別の配列に置き換える.</p>\\n<p><code>flatMap()</code> は <code>map()</code> の処理の後に <code>flat()</code> を実行する.</p>\\n<p><code>flat()</code> は配列を 1 次元にするメソッド.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">const</span> dataList = [\\n  {\\n    <span class=\\\"hljs-attr\\\">user</span>: <span class=\\\"hljs-string\\\">&quot;user1&quot;</span>,\\n    <span class=\\\"hljs-attr\\\">tags</span>: [<span class=\\\"hljs-string\\\">&quot;aaa&quot;</span>, <span class=\\\"hljs-string\\\">&quot;bbb&quot;</span>]\\n  },\\n  {\\n    <span class=\\\"hljs-attr\\\">user</span>: <span class=\\\"hljs-string\\\">&quot;user2&quot;</span>,\\n    <span class=\\\"hljs-attr\\\">tags</span>: [<span class=\\\"hljs-string\\\">&quot;ccc&quot;</span>]\\n  },\\n  {\\n    <span class=\\\"hljs-attr\\\">user</span>: <span class=\\\"hljs-string\\\">&quot;user3&quot;</span>,\\n    <span class=\\\"hljs-attr\\\">tags</span>: [<span class=\\\"hljs-string\\\">&quot;ddd&quot;</span>]\\n  },\\n]\\n\\n<span class=\\\"hljs-keyword\\\">const</span> tagList = dataList.flatMap(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">data</span> =&gt;</span> data.tags)\\n\\n<span class=\\\"hljs-built_in\\\">console</span>.log(tagList)\\n<span class=\\\"hljs-comment\\\">// [ &#x27;aaa&#x27;, &#x27;bbb&#x27;, &#x27;ccc&#x27;, &#x27;ddd&#x27; ]</span>\\n\\n\\n<span class=\\\"hljs-keyword\\\">const</span> tagList2 = dataList.map(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">data</span> =&gt;</span> data.tags)\\n\\n<span class=\\\"hljs-built_in\\\">console</span>.log(tagList2.flat())\\n<span class=\\\"hljs-comment\\\">// [ &#x27;aaa&#x27;, &#x27;bbb&#x27;, &#x27;ccc&#x27;, &#x27;ddd&#x27; ]</span></code></pre><h2>Object.entries()</h2>\\n<p><code>Object.entries( 対象のオブジェクト )</code> を実行すると <code>[[key1, value1], [key2, value2]]</code> が返る.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">const</span> obj = {\\n  <span class=\\\"hljs-attr\\\">id</span>: <span class=\\\"hljs-number\\\">1</span>,\\n  <span class=\\\"hljs-attr\\\">user</span>: <span class=\\\"hljs-string\\\">&quot;user1&quot;</span>,\\n  <span class=\\\"hljs-attr\\\">name</span>: <span class=\\\"hljs-string\\\">&quot;name1&quot;</span>\\n}\\n\\n<span class=\\\"hljs-built_in\\\">console</span>.log(<span class=\\\"hljs-built_in\\\">Object</span>.entries(obj))\\n<span class=\\\"hljs-comment\\\">// [ [ &#x27;id&#x27;, 1 ], [ &#x27;user&#x27;, &#x27;user1&#x27; ], [ &#x27;name&#x27;, &#x27;name1&#x27; ] ]</span>\\n\\n<span class=\\\"hljs-built_in\\\">Object</span>.entries(obj)\\n        .forEach(<span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">[key, value]</span>) =&gt;</span> {\\n          <span class=\\\"hljs-built_in\\\">console</span>.log(<span class=\\\"hljs-string\\\">`Key: <span class=\\\"hljs-subst\\\">${key}</span>`</span>)\\n          <span class=\\\"hljs-built_in\\\">console</span>.log(<span class=\\\"hljs-string\\\">`Value: <span class=\\\"hljs-subst\\\">${value}</span>`</span>)\\n        })\\n<span class=\\\"hljs-comment\\\">// Key: id</span>\\n<span class=\\\"hljs-comment\\\">// Value: 1</span>\\n<span class=\\\"hljs-comment\\\">// Key: user</span>\\n<span class=\\\"hljs-comment\\\">// Value: user1</span>\\n<span class=\\\"hljs-comment\\\">// Key: name</span>\\n<span class=\\\"hljs-comment\\\">// Value: name1</span></code></pre>\",\n  \"dir\": \"articles\",\n  \"base\": \"20201104134500.json\",\n  \"ext\": \".json\",\n  \"sourceBase\": \"20201104134500.md\",\n  \"sourceExt\": \".md\"\n}"}},"__N_SSG":true}