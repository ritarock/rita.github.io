{"pageProps":{"data":{"id":"20210306225218","fileContents":"{\n  \"title\": \"Docker と docker-compose のまとめ\",\n  \"date\": 20210306225218,\n  \"tags\": [\n    \"docker\"\n  ],\n  \"bodyContent\": \"## Docker\\n## build\\nDockerfile が存在するディレクトリで実行.\\n```bash\\n$ docker build .\\n```\\n\\n`-f` オプションを付けることでパスを指定できる.\\n```bash\\n$ docker build -f /path/to/Dockerfile .\\n```\\n\\n`-t` オプションを付けることでリポジトリとタグを指定できる.\\n```bash\\n$ docker build -t shukes/myapp .\\n```\\n\\n## FROM\\nベースイメージを指定.\\n```Dockerfile\\nFROM <image>[:<tag>][AS <name>]\\n```\\n\\n## RUN\\nシェルとして実行される.\\n```Dockerfile\\nRUN /bin/bash -c 'source $HOME/.bashrc;' \\\\\\necho $HOME\\n```\\n\\n1 行で書く場合.\\n```Dockerfile\\nRUN /bin/bash -c 'source $HOME/.bashrc; echo $HOME'\\n```\\n\\n`/bash/sh` 以外の別のシェルを使う場合は exec 形式でシェルに引数を渡す.\\n```Dockerfile\\nRUN [\\\"/bin/bash\\\", \\\"-c\\\", \\\"echo hello\\\"]\\n```\\n\\nexec 形式で書く場合は json 配列として扱われるので `\\\"\\\"` で囲む必要がある.\\n\\n## CMD\\nDockerfile 内で CMD 命令は 1 つのみ.\\n複数あっても最後の CMD 命令のみが実行される.\\n\\n**CMD の主目的はコンテナ実行時のデフォルト処理を指定する**\\n```Dockerfile\\nFROM ubuntu\\nCMD [\\\"/usr/bin/wc\\\", \\\"--help\\\"]\\n```\\n\\n## ADD / COPY\\n`<src>` で指定したファイル,ディレクトリをコンテナ内の `<dest>` にコピーする.\\n\\nADD はリモートファイルをコピー可能で圧縮ファイルの解凍する.\\n```bash\\nADD <src> <dest>\\nCOPY <src> <dest>\\n```\\n\\n## docker-compose\\n## build\\n構築時のオプションを指定.\\n```yml\\nversion: \\\"3.8\\\"\\nservices:\\n  webapp:\\n  build: ./dir\\n```\\n\\n`context` で `Dockerfile` や `args` を指定できる.\\n```yml\\nversion: \\\"3.8\\\"\\nservices:\\n  webapp:\\n    build:\\n      context: ./dir\\n      dockerfile: Dockerfile-alternate\\n      args:\\n        buildno: 1\\n```\\n\\n`image` を指定してイメージ名とタグをアタッチできる.\\n\\nイメージ名は webapp で, タグが tag の場合.\\n```yml\\nbuild: ./dir\\nimage: webapp:tag\\n```\\n\\n### context\\nDockerfile を含むディレクトリかリポジトリ URL を指定する.\\n```yml\\nbuild:\\n  context: ./dir\\n```\\n\\n### dockerfile\\n別の Dockerfile を指定する.ビルドパスと同時に指定する必要がある.\\n```yml\\nbuild:\\n  context: .\\n  dockerfile: Dockerfile-alternate\\n```\\n\\n### args\\nビルド引数を追加する.環境変数となりビルド処理の間のみ使用される.\\nDockerfile 内ではじめにビルド引数を指定する.\\n```yml\\nARG buildno\\nARG gitcommithash\\n\\nRUN echo \\\"Build number: $buildno\\\"\\nRUN echo \\\"Based on commit: $gitcommithash\\\"\\n```\\n\\n`build` キーをもとにその引数を指定する.\\n\\n個々をマッピングするか,リスト形式で書く.\\nブール値の場合はクォートで囲む必要がある.\\n```yml\\nbuild:\\n  context: .\\n  args:\\n    build: 1\\n    gitcommithash: cdc3b19\\n```\\n\\n```yml\\nbuild:\\n  context: .\\n  args:\\n    - buildno=1\\n    - gitcommithash=cdc3b19\\n```\\n\\n## command\\nデフォルトコマンドを上書きする.\\n```yml\\ncommand: build exec thin -p 3000\\n```\\n\\nDockerfile と同じリスト形式でも書ける.\\n```yml\\ncommand: [\\\"build\\\", \\\"exec\\\", \\\"thin\\\", \\\"-p\\\", \\\"3000\\\"]\\n```\\n\\n## depends_on\\nサービス間の依存関係を表す.\\n`docker-compose up` は依存関係順にサービスを起動する.\\n\\n以下の場合では, db と Redis を起動したあとに web を起動する.\\n```yml\\nversion: \\\"3.8\\\"\\nservices:\\n  web:\\n    build: .\\n    depends_on:\\n      - db\\n      - redis\\n  redis:\\n    image: redis\\n  db:\\n    image: postgres\\n```\\n\\n## environment\\n環境変数を追加する.\\n```yml\\nenvironment:\\n  RACK_ENV: development\\n  SHOW: 'true'\\n```\\n\\n```yml\\nenvironment:\\n  - RACK_ENV=development\\n  - SHOW='true'\\n```\\n\\n## expose\\nホストマシンにはポートを公開せずにポートを expose する.\\nリンクされたサービスのみアクセス可能になる.内部のポートのみ指定可能.\\n```yml\\nexpose:\\n  - \\\"3000\\\"\\n  - \\\"8000\\\"\\n```\\n\\n## ports\\n公開用のポートを指定する.\\n\\nホスト側とコンテナ側のポートを指定する( `HOST:CONTAINER` ).\\nもしくは,コンテナ側のポートを指定する.\\n```yml\\nports:\\n  - \\\"3000\\\"\\n  - \\\"3000-3005\\\"\\n  - \\\"8000:8000\\\"\\n  - \\\"9090-9091:8080-8081\\\"\\n  - \\\"49100:22\\\"\\n  - \\\"127.0.0.1:8001:8001\\\"\\n  - \\\"127.0.0.1:5000-5010:5000-5010\\\"\\n  - \\\"6060:6060/udp\\\"\\n  - \\\"12400-12500:1240\\\"\\n```\\n\\n追加項目がある場合.\\n```yml\\nports:\\n  - target: 80\\n    published: 8080\\n    protocol: tcp\\n    mode: host\\n```\\n\\n## links\\n他のサービスのコンテナをリンクさせる.\\nリンクされたコンテナは,ホスト名より到達可能になる.\\n```yml\\nweb:\\n  links:\\n    - \\\"db\\\"\\n    - \\\"db:database\\\"\\n    - \\\"redis\\\"\\n```\\n\\n## volumes\\n```yml\\nversion: \\\"3.8\\\"\\nservices:\\n  web:\\n    image: nginx:alpine\\n    volumes:\\n      - type: volume\\n        source: mydata\\n        target: /data\\n        volume:\\n          nocopy: true\\n      - type: bind\\n        source: ./static\\n        target: /opt/app/static\\n  db:\\n    image: postgres:latest\\n    volumes:\\n      - \\\"/var/run/postgres.sock:/var/run/postgres/postgres.sock\\\"\\n      - \\\"dbdata:/var/lib/postgresql/data\\\"\\nvolumes:\\n  mydata:\\n  database:\\n```\\n\\n短い書き方では `[SOURCE:]TARGET[:MODE]` と書ける.\\n\\nro は readonly .\\n```yml\\n- ./cache:/tmp/cache:ro\\n```\\n\\n## 変数の置換\\nシェル環境に `POSTGRES_VERSION=9.3` が定義されていると postgres のバージョンは 9.3 になる.\\n```yml\\ndb:\\n  image: \\\"postgres:${POSTGRES_VERSION}\\\"\\n```\\n\\n環境変数が何も設定されていない場合は空文字になる.\\n環境変数のデフォルト値は `.env` ファイルに設定しておくことができる.\\n- ${VARIABLE:-default} は VARIABLE がセットされていないか空文字のときに `default` として評価される\\n- ${VARIABLE-default} は VARIABLE がセットされていないときのみ `default` として評価される\",\n  \"bodyHtml\": \"<h2>Docker</h2>\\n<h2>build</h2>\\n<p>Dockerfile が存在するディレクトリで実行.</p>\\n<pre><code class=\\\"hljs\\\">$ docker build .</code></pre><p><code>-f</code> オプションを付けることでパスを指定できる.</p>\\n<pre><code class=\\\"hljs\\\">$ docker build -f /path/to/Dockerfile .</code></pre><p><code>-t</code> オプションを付けることでリポジトリとタグを指定できる.</p>\\n<pre><code class=\\\"hljs\\\">$ docker build -t shukes/myapp .</code></pre><h2>FROM</h2>\\n<p>ベースイメージを指定.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">FROM</span> &lt;image&gt;[:&lt;tag&gt;][AS &lt;name&gt;]</code></pre><h2>RUN</h2>\\n<p>シェルとして実行される.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">RUN</span><span class=\\\"bash\\\"> /bin/bash -c <span class=\\\"hljs-string\\\">&#x27;source $HOME/.bashrc;&#x27;</span> \\\\\\n<span class=\\\"hljs-built_in\\\">echo</span> <span class=\\\"hljs-variable\\\">$HOME</span></span></code></pre><p>1 行で書く場合.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">RUN</span><span class=\\\"bash\\\"> /bin/bash -c <span class=\\\"hljs-string\\\">&#x27;source $HOME/.bashrc; echo $HOME&#x27;</span></span></code></pre><p><code>/bash/sh</code> 以外の別のシェルを使う場合は exec 形式でシェルに引数を渡す.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">RUN</span><span class=\\\"bash\\\"> [<span class=\\\"hljs-string\\\">&quot;/bin/bash&quot;</span>, <span class=\\\"hljs-string\\\">&quot;-c&quot;</span>, <span class=\\\"hljs-string\\\">&quot;echo hello&quot;</span>]</span></code></pre><p>exec 形式で書く場合は json 配列として扱われるので <code>&quot;&quot;</code> で囲む必要がある.</p>\\n<h2>CMD</h2>\\n<p>Dockerfile 内で CMD 命令は 1 つのみ.\\n複数あっても最後の CMD 命令のみが実行される.</p>\\n<p><strong>CMD の主目的はコンテナ実行時のデフォルト処理を指定する</strong></p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">FROM</span> ubuntu\\n<span class=\\\"hljs-keyword\\\">CMD</span><span class=\\\"bash\\\"> [<span class=\\\"hljs-string\\\">&quot;/usr/bin/wc&quot;</span>, <span class=\\\"hljs-string\\\">&quot;--help&quot;</span>]</span></code></pre><h2>ADD / COPY</h2>\\n<p><code>&lt;src&gt;</code> で指定したファイル,ディレクトリをコンテナ内の <code>&lt;dest&gt;</code> にコピーする.</p>\\n<p>ADD はリモートファイルをコピー可能で圧縮ファイルの解凍する.</p>\\n<pre><code class=\\\"hljs\\\">ADD &lt;src&gt; &lt;dest&gt;\\nCOPY &lt;src&gt; &lt;dest&gt;</code></pre><h2>docker-compose</h2>\\n<h2>build</h2>\\n<p>構築時のオプションを指定.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">version:</span> <span class=\\\"hljs-string\\\">&quot;3.8&quot;</span>\\n<span class=\\\"hljs-attr\\\">services:</span>\\n  <span class=\\\"hljs-attr\\\">webapp:</span>\\n  <span class=\\\"hljs-attr\\\">build:</span> <span class=\\\"hljs-string\\\">./dir</span></code></pre><p><code>context</code> で <code>Dockerfile</code> や <code>args</code> を指定できる.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">version:</span> <span class=\\\"hljs-string\\\">&quot;3.8&quot;</span>\\n<span class=\\\"hljs-attr\\\">services:</span>\\n  <span class=\\\"hljs-attr\\\">webapp:</span>\\n    <span class=\\\"hljs-attr\\\">build:</span>\\n      <span class=\\\"hljs-attr\\\">context:</span> <span class=\\\"hljs-string\\\">./dir</span>\\n      <span class=\\\"hljs-attr\\\">dockerfile:</span> <span class=\\\"hljs-string\\\">Dockerfile-alternate</span>\\n      <span class=\\\"hljs-attr\\\">args:</span>\\n        <span class=\\\"hljs-attr\\\">buildno:</span> <span class=\\\"hljs-number\\\">1</span></code></pre><p><code>image</code> を指定してイメージ名とタグをアタッチできる.</p>\\n<p>イメージ名は webapp で, タグが tag の場合.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">build:</span> <span class=\\\"hljs-string\\\">./dir</span>\\n<span class=\\\"hljs-attr\\\">image:</span> <span class=\\\"hljs-string\\\">webapp:tag</span></code></pre><h3>context</h3>\\n<p>Dockerfile を含むディレクトリかリポジトリ URL を指定する.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">build:</span>\\n  <span class=\\\"hljs-attr\\\">context:</span> <span class=\\\"hljs-string\\\">./dir</span></code></pre><h3>dockerfile</h3>\\n<p>別の Dockerfile を指定する.ビルドパスと同時に指定する必要がある.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">build:</span>\\n  <span class=\\\"hljs-attr\\\">context:</span> <span class=\\\"hljs-string\\\">.</span>\\n  <span class=\\\"hljs-attr\\\">dockerfile:</span> <span class=\\\"hljs-string\\\">Dockerfile-alternate</span></code></pre><h3>args</h3>\\n<p>ビルド引数を追加する.環境変数となりビルド処理の間のみ使用される.\\nDockerfile 内ではじめにビルド引数を指定する.</p>\\n<pre><code class=\\\"hljs\\\">ARG buildno\\nARG gitcommithash\\n\\nRUN echo &quot;Build number: $buildno&quot;\\nRUN echo &quot;Based on commit: $gitcommithash&quot;</code></pre><p><code>build</code> キーをもとにその引数を指定する.</p>\\n<p>個々をマッピングするか,リスト形式で書く.\\nブール値の場合はクォートで囲む必要がある.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">build:</span>\\n  <span class=\\\"hljs-attr\\\">context:</span> <span class=\\\"hljs-string\\\">.</span>\\n  <span class=\\\"hljs-attr\\\">args:</span>\\n    <span class=\\\"hljs-attr\\\">build:</span> <span class=\\\"hljs-number\\\">1</span>\\n    <span class=\\\"hljs-attr\\\">gitcommithash:</span> <span class=\\\"hljs-string\\\">cdc3b19</span></code></pre><pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">build:</span>\\n  <span class=\\\"hljs-attr\\\">context:</span> <span class=\\\"hljs-string\\\">.</span>\\n  <span class=\\\"hljs-attr\\\">args:</span>\\n    <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">buildno=1</span>\\n    <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">gitcommithash=cdc3b19</span></code></pre><h2>command</h2>\\n<p>デフォルトコマンドを上書きする.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">command:</span> <span class=\\\"hljs-string\\\">build</span> <span class=\\\"hljs-string\\\">exec</span> <span class=\\\"hljs-string\\\">thin</span> <span class=\\\"hljs-string\\\">-p</span> <span class=\\\"hljs-number\\\">3000</span></code></pre><p>Dockerfile と同じリスト形式でも書ける.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">command:</span> [<span class=\\\"hljs-string\\\">&quot;build&quot;</span>, <span class=\\\"hljs-string\\\">&quot;exec&quot;</span>, <span class=\\\"hljs-string\\\">&quot;thin&quot;</span>, <span class=\\\"hljs-string\\\">&quot;-p&quot;</span>, <span class=\\\"hljs-string\\\">&quot;3000&quot;</span>]</code></pre><h2>depends_on</h2>\\n<p>サービス間の依存関係を表す.\\n<code>docker-compose up</code> は依存関係順にサービスを起動する.</p>\\n<p>以下の場合では, db と Redis を起動したあとに web を起動する.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">version:</span> <span class=\\\"hljs-string\\\">&quot;3.8&quot;</span>\\n<span class=\\\"hljs-attr\\\">services:</span>\\n  <span class=\\\"hljs-attr\\\">web:</span>\\n    <span class=\\\"hljs-attr\\\">build:</span> <span class=\\\"hljs-string\\\">.</span>\\n    <span class=\\\"hljs-attr\\\">depends_on:</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">db</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">redis</span>\\n  <span class=\\\"hljs-attr\\\">redis:</span>\\n    <span class=\\\"hljs-attr\\\">image:</span> <span class=\\\"hljs-string\\\">redis</span>\\n  <span class=\\\"hljs-attr\\\">db:</span>\\n    <span class=\\\"hljs-attr\\\">image:</span> <span class=\\\"hljs-string\\\">postgres</span></code></pre><h2>environment</h2>\\n<p>環境変数を追加する.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">environment:</span>\\n  <span class=\\\"hljs-attr\\\">RACK_ENV:</span> <span class=\\\"hljs-string\\\">development</span>\\n  <span class=\\\"hljs-attr\\\">SHOW:</span> <span class=\\\"hljs-string\\\">&#x27;true&#x27;</span></code></pre><pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">environment:</span>\\n  <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">RACK_ENV=development</span>\\n  <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">SHOW=&#x27;true&#x27;</span></code></pre><h2>expose</h2>\\n<p>ホストマシンにはポートを公開せずにポートを expose する.\\nリンクされたサービスのみアクセス可能になる.内部のポートのみ指定可能.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">expose:</span>\\n  <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;3000&quot;</span>\\n  <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;8000&quot;</span></code></pre><h2>ports</h2>\\n<p>公開用のポートを指定する.</p>\\n<p>ホスト側とコンテナ側のポートを指定する( <code>HOST:CONTAINER</code> ).\\nもしくは,コンテナ側のポートを指定する.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">ports:</span>\\n  <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;3000&quot;</span>\\n  <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;3000-3005&quot;</span>\\n  <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;8000:8000&quot;</span>\\n  <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;9090-9091:8080-8081&quot;</span>\\n  <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;49100:22&quot;</span>\\n  <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;127.0.0.1:8001:8001&quot;</span>\\n  <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;127.0.0.1:5000-5010:5000-5010&quot;</span>\\n  <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;6060:6060/udp&quot;</span>\\n  <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;12400-12500:1240&quot;</span></code></pre><p>追加項目がある場合.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">ports:</span>\\n  <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-attr\\\">target:</span> <span class=\\\"hljs-number\\\">80</span>\\n    <span class=\\\"hljs-attr\\\">published:</span> <span class=\\\"hljs-number\\\">8080</span>\\n    <span class=\\\"hljs-attr\\\">protocol:</span> <span class=\\\"hljs-string\\\">tcp</span>\\n    <span class=\\\"hljs-attr\\\">mode:</span> <span class=\\\"hljs-string\\\">host</span></code></pre><h2>links</h2>\\n<p>他のサービスのコンテナをリンクさせる.\\nリンクされたコンテナは,ホスト名より到達可能になる.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">web:</span>\\n  <span class=\\\"hljs-attr\\\">links:</span>\\n    <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;db&quot;</span>\\n    <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;db:database&quot;</span>\\n    <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;redis&quot;</span></code></pre><h2>volumes</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">version:</span> <span class=\\\"hljs-string\\\">&quot;3.8&quot;</span>\\n<span class=\\\"hljs-attr\\\">services:</span>\\n  <span class=\\\"hljs-attr\\\">web:</span>\\n    <span class=\\\"hljs-attr\\\">image:</span> <span class=\\\"hljs-string\\\">nginx:alpine</span>\\n    <span class=\\\"hljs-attr\\\">volumes:</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-attr\\\">type:</span> <span class=\\\"hljs-string\\\">volume</span>\\n        <span class=\\\"hljs-attr\\\">source:</span> <span class=\\\"hljs-string\\\">mydata</span>\\n        <span class=\\\"hljs-attr\\\">target:</span> <span class=\\\"hljs-string\\\">/data</span>\\n        <span class=\\\"hljs-attr\\\">volume:</span>\\n          <span class=\\\"hljs-attr\\\">nocopy:</span> <span class=\\\"hljs-literal\\\">true</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-attr\\\">type:</span> <span class=\\\"hljs-string\\\">bind</span>\\n        <span class=\\\"hljs-attr\\\">source:</span> <span class=\\\"hljs-string\\\">./static</span>\\n        <span class=\\\"hljs-attr\\\">target:</span> <span class=\\\"hljs-string\\\">/opt/app/static</span>\\n  <span class=\\\"hljs-attr\\\">db:</span>\\n    <span class=\\\"hljs-attr\\\">image:</span> <span class=\\\"hljs-string\\\">postgres:latest</span>\\n    <span class=\\\"hljs-attr\\\">volumes:</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;/var/run/postgres.sock:/var/run/postgres/postgres.sock&quot;</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;dbdata:/var/lib/postgresql/data&quot;</span>\\n<span class=\\\"hljs-attr\\\">volumes:</span>\\n  <span class=\\\"hljs-attr\\\">mydata:</span>\\n  <span class=\\\"hljs-attr\\\">database:</span></code></pre><p>短い書き方では <code>[SOURCE:]TARGET[:MODE]</code> と書ける.</p>\\n<p>ro は readonly .</p>\\n<pre><code class=\\\"hljs\\\">- ./cache:/tmp/cache:ro</code></pre><h2>変数の置換</h2>\\n<p>シェル環境に <code>POSTGRES_VERSION=9.3</code> が定義されていると postgres のバージョンは 9.3 になる.</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">db:</span>\\n  <span class=\\\"hljs-attr\\\">image:</span> <span class=\\\"hljs-string\\\">&quot;postgres:${POSTGRES_VERSION}&quot;</span></code></pre><p>環境変数が何も設定されていない場合は空文字になる.\\n環境変数のデフォルト値は <code>.env</code> ファイルに設定しておくことができる.</p>\\n<ul>\\n<li>${VARIABLE:-default} は VARIABLE がセットされていないか空文字のときに <code>default</code> として評価される</li>\\n<li>${VARIABLE-default} は VARIABLE がセットされていないときのみ <code>default</code> として評価される</li>\\n</ul>\\n\",\n  \"dir\": \"articles\",\n  \"base\": \"20210306225218.json\",\n  \"ext\": \".json\",\n  \"sourceBase\": \"20210306225218.md\",\n  \"sourceExt\": \".md\"\n}"}},"__N_SSG":true}