{"pageProps":{"articleData":{"id":"20210109001701","contentHtml":"\n[Developer Roadmaps](https://roadmap.sh/roadmaps)にあった DevOps コマンドをまとめておく。\n\n## 文字列操作\n### awk\n列を抽出する。\n```bash\n$ echo 1 2 3 4|awk '{print $1}'\n1\n$ echo 1 2 3 4|awk '{print $2}'\n2\n```\n\n`$0` だとすべて。\n```bash\n$ echo 1 2 3 4|awk '{print $0}'\n1 2 3 4\n```\n\n区切り文字の指定もできる。\n```bash\n$ echo 1:2:3:4|awk -F'[:]' '{print $1}'\n1\n```\n\n### sed\n文字列置換。\n```bash\n$ cat test.txt\n1 2 3 4 5\n$ sed 's/3/333/g' test.txt\n1 2 333 4 5\n```\n\n### grep\n文字列検索。\n```bash\n$ cat test.txt\n1\n2\n3\n4\n5\n\n$ cat test.txt | grep 3\n3\n```\n\n`-v` は一致しないものを検索する。\n\n### sort\nソートする。\n```bash\n$ cat test.txt\n1\n12\n3\n23\n55\n22\n\n$ sort test.txt\n1\n12\n22\n23\n3\n55\n```\n\n` -n ` は数値として並べる。\n```bash\n$ sort -n test.txt\n1\n3\n12\n22\n23\n55\n```\n\n` -r ` は逆順として並べる。\n```bash\n$ sort -n -r test.txt\n55\n23\n22\n12\n3\n1\n```\n\n### uniq\n重複した行を削除。\n```bash\n$ cat test.txt\n0123456789\nabcdefghij\nabcdefghij\nABCDEFGHIJ\n9876543210\n\n$ uniq test.txt\n0123456789\nabcdefghij\nABCDEFGHIJ\n9876543210\n```\n\n` -i ` は大文字小文字を無視する。\n```bash\n$ uniq -i test.txt\n0123456789\nabcdefghij\n9876543210\n```\n\n### cat\nファイル出力。\n```bash\n$ cat test.txt\n0123456789\nabcdefghij\nabcdefghij\nABCDEFGHIJ\n9876543210\n```\n\n### cut\nawk で良さそう。\n```bash\n$ cat test.txt\n1:2:3\n4:5:6\n7:8:9\n\n$ cut -f 2 -d \":\" test.txt\n2\n5\n8\n```\n\n`awk` でやる場合。\n```bash\n$ cat test.txt |awk -F ':' '{print $2}'\n2\n5\n8\n```\n\n### echo\n文字列を表示する。\n```bash\n$ echo 'aaa'\naaa\n```\n\n### fmt\n整形。\n```bash\n$ cat test.txt\n1 2 3\n4 5 6\n7 8 9\n\n$ fmt test.txt\n1 2 3 4 5 6 7 8 9\n```\n\n### tr\n文字の変換、削除する。\n```bash\n$ cat test.txt\n12345\nabcde\nABCDE\n\n$ cat test.txt | tr abc XYZ\n12345\nXYZde\nABCDE\n\n$ cat test.txt | tr -d 123\n45\nabcde\nABCDE\n```\n\n### nl\n行数表示できる。\n```bash\n$ nl test.txt\n     1 12345\n     2 abcde\n     3 ABCDE\n```\n\ncat でやるなら ` -b ` を使う。\n```bash\n$ cat -b test.txt\n     1 12345\n     2 abcde\n     3 ABCDE\n```\n\n### egrep\n`grep -E` と同じ意味。\n\n拡張正規表現ってのが使える。普通の正規表現と何が違うかはよくわからない。\n```bash\n$ cat test.txt\n12345\nbar\nfoo\n\n$ grep -E '^(bar|foo)' test.txt\nbar\nfoo\n```\n\n### fgrep\n`grep -F` と同じ意味。\n\n正規表現文字をそのまま検索できる。\n```bash\n$ cat test.txt\n12345\nbar.foo\n\n$ grep -F 'bar.foo' test.txt\nbar.foo\n```\n\n### wc\n行数、単語数を数える。\n```bash\n$ cat test.txt\nHello World!\n```\n\n`-m` は文字数を数える。\n```bash\n$ wc -m test.txt\n      13 test.txt\n```\n\n`-w` は単語数を数える。\n```bash\n$ wc -w test.txt\n       2 test.txt\n```\n\n## プロセス管理\n### ps\n全プロセスを表示する。\n```bash\n$ ps aux\n```\n\n### top\nプロセス、CPU、メモリを表示。\n\nデフォルトだと CPU 使用率順にソート。\n\n`-a` でメモリ使用順にソート。\n\n### htop\ntop より見やすい。\n\nShift + P で CPU 使用率、Shift + M でメモリ使用率順。\n\n### atop\ntop コマンドの代替。\n\nhtop のほうが良さそう。\n\n### lsof\n特定のポート番号を待ち受けているか、もしくはファイルを読み込んでいるかを調べるとき。\n\n80 番ポートで実行中のプロセスを調べる。\n```bash\n$ lsof -i:80 -P\n```\n\n特定のファイルを開いているプロセスを調べる。\n```bash\n$ lsof <FILE>\n```\n\nコマンドを指定する。\n```bash\n$ lsof -c <COMMAND>\n```\n\n## ネットワーク\n### nmap\nサーバの開いているポートを調べる。\n```bash\n$ nmap <SERVER>\n```\n\n### tcpdump\nパケットをキャプチャする。\n\nホストを指定してキャプチャする。\n```bash\n$ tcpdump host <HOST>\n```\n\nport を指定する。\n```bash\n$ tcpdump host <HOST> and port 22\n$ tcpdump host <HOST> or port 22\n```\n\n### ping\nパケットを送信して通信を確認。\n\n### traceroute\n経路と応答を調べる。\n\n`<TARGET>` までの経路と応答を調べる。\n```bash\n$ traceroute <TARGET>\n```\n\n### mtr\n経路と応答を調べる。\ntraceroute とだいたい同じ。\n\n### dig\nドメイン名に対する IP を調べる。\n```bash\n$ dig www.google.co.jp\n```\n\n### netstat\nネットワーク関連の情報を表示。\n\n`-r` でルーティングテーブルを表示する。\n\n## システムパフォーマンス\n### nmon\nOS のベンチマークをとったりできる。\n\n### iostat\nCPU 使用率と I/O デバイスの使用状況を調べる。\n\n### sar\nメモリ、プロセス、スワップ、ディスク I/O、ネットワーク、ロードアベレージ、CPU 等の統計情報を調べる。\n\n### vmstat\n仮想メモリや CPU、ディスク I/O の統計情報を調べる。\n\n## その他\n### strace\n実行コマンドをトレースする。\n```bash\n$ strace ls\n```\n\n### uname\nカーネル名を表示。\n\n`-a` で全ての情報を表示する。\n```bash\n$ uname -a\n```\n\n### df\nディスクの空き容量を調べる。\n\n`-h` で読みやすく表示。\n```bash\n$ df -h\n```\n\n### history\nコマンドの履歴を表示。\n\n`-d` で指定した番号の履歴を削除する。\n```bash\n$ history -d 10\n```\n","title":"コマンドいろいろ","date":20210109001701,"tags":["Linux"]}},"__N_SSG":true}