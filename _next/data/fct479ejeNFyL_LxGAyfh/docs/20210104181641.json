{"pageProps":{"body":{"id":"20210104181641","title":"Golang で時間操作とソート","body":"\n[インスタンスのCPUをCLIで確認する](https://github.com/ritarock/moniterinstance)\n\nこの CLI を作るにあたってハマったところとその解決法。\n\n## 時間でソートする\n### 配列のソート\nGolang の場合、お決まりのやり方があるみたいでググると大体同じやり方でやっている。\n\nstruct を定義して、`Len, Less, Swap` メソッドを用意する。\n```go\ntype Bytime []*cloudwatch.Datapoint\n\nfunc (arr Bytime) Len() int {\n\treturn len(arr)\n}\n\nfunc (arr Bytime) Less(i, j int) bool {\n\treturn arr[i].Timestamp.Before(*arr[j].Timestamp)\n}\n\nfunc (arr Bytime) Swap(i, j int) {\n\tarr[i], arr[j] = arr[j], arr[i]\n}\n```\n\n実際にソートするときは、別の配列を用意した。\n```go\nvar sortedResp Bytime = resp.Datapoints\nsort.Sort(sortedResp)\n```\n\n### 時間の比較\ntimeA(2020-01-01 00:00:00 +0000 UTC) と timeB(2021-01-01 00:00:00 +0000 UTC) があるとする。\n```go\ntimeA, timeB := time.Date(2020, 1, 1, 0, 0, 0 , 0, time.UTC), time.Date(2021, 1, 1, 0, 0, 0 , 0, time.UTC)\n```\n\n時間の流れは `timeA => timeB`。\n\nこのときの時間の比較は以下のようにできる。\n```go\ntimeA.Equal(timeB) // false\n\ntimeA.Before(timeB) // true\n\ntimeA.After(timeB) // false\n```\n\n## UTCをJSTに変更\n```go\ntimeA := time.Date(2020, 1, 1, 0, 0, 0 , 0, time.UTC)\nloc, _ := time.LoadLocation(\"Asia/Tokyo\")\n\nfmt.Println(\"UTC \" + timeA.String()) // UTC 2020-01-01 00:00:00 +0000 UTC\nfmt.Println(\"JST \" + timeA.In(loc).String()) // JST 2020-01-01 09:00:00 +0900 JST\n```\n"}},"__N_SSG":true}