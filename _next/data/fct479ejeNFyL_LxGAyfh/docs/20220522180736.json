{"pageProps":{"body":{"id":"20220522180736","title":"cobra-cli を使う","body":"\n## cobra-cli を使う\n### docker でやる\n`Dockerfile` と `docker-composer.yml` を用意。\n```bash\n$ cat Dockerfile\nFROM golang:1.18.1-buster\nWORKDIR /app\nRUN go install github.com/spf13/cobra-cli@latest\nENTRYPOINT [ \"/go/bin/cobra-cli\" ]\n\n$ cat docker-compose.yml\nversion: '3'\nservices:\n  cobra-cli:\n    build: .\n    volumes:\n      - .:/app\n```\n\n### go.mod を作成\n```bash\n$ go mod init sample\ngo: creating new go.mod: module sample\n```\n\n### project の開始\n```bash\n$ tree\n.\n├── Dockerfile\n├── docker-compose.yml\n└── go.mod\n```\n\n`init` コマンドを実行。\n```bash\n$ docker-compose run cobra-cli init\n\n$ tree\ntree\n.\n├── Dockerfile\n├── LICENSE\n├── cmd\n│   └── root.go\n├── docker-compose.yml\n├── go.mod\n├── go.sum\n└── main.go\n```\n\n`main.go` は `cmd.Execute()` を呼び出しているだけ。\n```go\n/*\nCopyright © 2022 NAME HERE <EMAIL ADDRESS>\n\n*/\npackage main\n\nimport \"sample/cmd\"\n\nfunc main() {\n\tcmd.Execute()\n}\n```\n\n`cmd/root.go` を編集。実行したら `Hello` を出力する。\n```go\n/*\nCopyright © 2022 NAME HERE <EMAIL ADDRESS>\n\n*/\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/spf13/cobra\"\n)\n\n// rootCmd represents the base command when called without any subcommands\nvar rootCmd = &cobra.Command{\n\tUse:   \"sample\",\n\tShort: \"挨拶をします\",\n\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\tfmt.Println(\"Hello\")\n\t\treturn nil\n\t},\n}\n\n// Execute adds all child commands to the root command and sets flags appropriately.\n// This is called by main.main(). It only needs to happen once to the rootCmd.\nfunc Execute() {\n\terr := rootCmd.Execute()\n\tif err != nil {\n\t\tos.Exit(1)\n\t}\n}\n\nfunc init() {\n}\n```\n\n実行。\n```bash\n$ go run main.go\nHello\n```\n\nhelp を見る。\n```bash\n$ go run main.go -h\n挨拶をします\n\nUsage:\n  sample [flags]\n\nFlags:\n  -h, --help   help for sample\n```\n\n## フラグを設定\n### グローバルフラグを設定\n`--night` をつければ `Good night` を出力する。\n```go\n/*\nCopyright © 2022 NAME HERE <EMAIL ADDRESS>\n\n*/\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar night bool\n\n// rootCmd represents the base command when called without any subcommands\nvar rootCmd = &cobra.Command{\n\tUse:   \"sample\",\n\tShort: \"挨拶をします\",\n\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\tif night {\n\t\t\tfmt.Println(\"Good night\")\n\t\t\treturn nil\n\t\t}\n\t\tfmt.Println(\"Hello\")\n\t\treturn nil\n\t},\n}\n\n// Execute adds all child commands to the root command and sets flags appropriately.\n// This is called by main.main(). It only needs to happen once to the rootCmd.\nfunc Execute() {\n\terr := rootCmd.Execute()\n\tif err != nil {\n\t\tos.Exit(1)\n\t}\n}\n\nfunc init() {\n\trootCmd.PersistentFlags().BoolVar(&night, \"night\", false, \"night フラグの説明文です\")\n}\n```\n\n実行。\n```bash\n$ go run main.go -h\n挨拶をします\n\nUsage:\n  sample [flags]\n\nFlags:\n  -h, --help    help for sample\n      --night   night フラグの説明文です\n\n$ go run main.go\nHello\n\n$ go run main.go --night\nGood night\n```\n\n#### shorthand で設定する\n```go\nfunc init() {\n\t// rootCmd.PersistentFlags().BoolVar(&night, \"night\", false, \"night フラグの説明文です\")\n\trootCmd.PersistentFlags().BoolVarP(&night, \"night\", \"n\", false, \"night フラグの説明文です\")\n}\n```\n\n実行。\n```bash\n$ go run main.go -h\n挨拶をします\n\nUsage:\n  sample [flags]\n\nFlags:\n  -h, --help    help for sample\n  -n, --night   night フラグの説明文です\n\n$ go run main.go -n\nGood night\n```\n\n### ローカルフラグを設定する\n`--name` をつければ挨拶の後に名前を出力する。\n今度は変数を設定しないでフラグの値を取得してみる。\n\n```go\n/*\nCopyright © 2022 NAME HERE <EMAIL ADDRESS>\n\n*/\npackage cmd\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/spf13/cobra\"\n)\n\nvar night bool\n\n// rootCmd represents the base command when called without any subcommands\nvar rootCmd = &cobra.Command{\n\tUse:   \"sample\",\n\tShort: \"挨拶をします\",\n\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\tname, _ := cmd.Flags().GetString(\"name\")\n\t\tif night {\n\t\t\tfmt.Println(\"Good night \" + name)\n\t\t\treturn nil\n\t\t}\n\t\tfmt.Println(\"Hello \" + name)\n\t\treturn nil\n\t},\n}\n\n// Execute adds all child commands to the root command and sets flags appropriately.\n// This is called by main.main(). It only needs to happen once to the rootCmd.\nfunc Execute() {\n\terr := rootCmd.Execute()\n\tif err != nil {\n\t\tos.Exit(1)\n\t}\n}\n\nfunc init() {\n\trootCmd.PersistentFlags().BoolVarP(&night, \"night\", \"n\", false, \"night フラグの説明文です\")\n\trootCmd.Flags().StringP(\"name\", \"a\", \"\", \"name フラグの説明文です\")\n}\n```\n\n実行。\n```bash\n$ go run main.go -h\n挨拶をします\n\nUsage:\n  sample [flags]\n\nFlags:\n  -h, --help          help for sample\n  -a, --name string   name フラグの説明文です\n  -n, --night         night フラグの説明文です\n\n$ go run main.go\nHello \n$ go run main.go -a aaa\nHello aaa\n\n$ go run main.go -a aaa --night\nGood night aaa\n```\n\n#### フラグの値の取得方法\n`~P` がついている方は `shorthand` を設定できる。\n`~Var` がついている方は直接値を設定できる。\n\n```go\nrootCmd.Flags().String(\"name\", \"\", \"name フラグの説明文です\")\nrootCmd.Flags().StringP(\"name\", \"a\", \"\", \"name フラグの説明文です\")\nrootCmd.Flags().StringVar(&name, \"name\", \"\", \"name フラグの説明文です\")\nrootCmd.Flags().StringVarP(&name, \"name\", \"a\", \"\", \"name フラグの説明文です\")\n```\n\n### 必須フラグ\n```go\nfunc init() {\n\trootCmd.PersistentFlags().BoolVarP(&night, \"night\", \"n\", false, \"night フラグの説明文です\")\n\trootCmd.Flags().StringP(\"name\", \"a\", \"\", \"name フラグの説明文です (required)\")\n\trootCmd.MarkFlagRequired(\"name\")\n}\n```\n\n実行。\n```bash\n$ go run main.go\nError: required flag(s) \"name\" not set\nUsage:\n  sample [flags]\n\nFlags:\n  -h, --help          help for sample\n  -a, --name string   name フラグの説明文です (required)\n  -n, --night         night フラグの説明文です\n\n$ go run main.go -a aaa\nHello aaa\n```\n\n### 引数の設定\n引数に数字を 2 つ与えるとその合計を出力する。\n```go\n// rootCmd represents the base command when called without any subcommands\nvar rootCmd = &cobra.Command{\n\tUse:   \"sample\",\n\tShort: \"挨拶をします\",\n\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\tname, _ := cmd.Flags().GetString(\"name\")\n\n\t\tif night {\n\t\t\tfmt.Println(\"Good night \" + name)\n\t\t\tif len(args) > 0 {\n\t\t\t\tfirstNum, _ := strconv.Atoi(args[0])\n\t\t\t\tsecondNum, _ := strconv.Atoi(args[1])\n\t\t\t\tfmt.Printf(\"SUM: %v\\n\", firstNum+secondNum)\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\t\tfmt.Println(\"Hello \" + name)\n\t\tif len(args) > 0 {\n\t\t\tfirstNum, _ := strconv.Atoi(args[0])\n\t\t\tsecondNum, _ := strconv.Atoi(args[1])\n\t\t\tfmt.Printf(\"SUM: %v\\n\", firstNum+secondNum)\n\t\t}\n\t\treturn nil\n\t},\n}\n```\n\n実行。\n```bash\n$ go run main.go -a aaa\nHello aaa\n\n$ go run main.go -a aaa 1 99\nHello aaa\nSUM: 100\n```\n\n#### バリデーションチェック\nこれらのメソッドが用意されている。\n|メソッド|機能|\n|-|-|\nNoArgs|引数が存在したらエラーを返す\nOnlyValidArgs|ValidArgs に含まれていないとエラーを返す\nArbitraryArgs|エラーを返さない\nMinimumNArgs(n)|少なくとも n 個の引数がないとエラーを返す\nMaximumNArgs(n)|n 個以上の引数があるとエラーを返す\nExactArgs(n)|n 個の引数以外だとエラーを返す\nExactValidArgs(int)|n 個の引数以外 or ValidArgs フィールドにない位置引数がある場合はエラーを返す\nRangeArgs(min, max)|範囲内の値でないとエラーを返す\n\nこんな感じで設定できる。\n```go\nArgs:  cobra.ExactArgs(1),\n```\n\n複数のバリデーションをチェックする場合は `MatchAll` を使えば良さそう。\n```go\n// MatchAll allows combining several PositionalArgs to work in concert.\nfunc MatchAll(pargs ...PositionalArgs) PositionalArgs {\n\treturn func(cmd *Command, args []string) error {\n\t\tfor _, parg := range pargs {\n\t\t\tif err := parg(cmd, args); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t}\n}\n```\n\n今回は 2 個の引数のみ受け付ける。かつ、値が数値であることのみ許可する。\n```go\nvar rootCmd = &cobra.Command{\n\tUse:   \"sample\",\n\tShort: \"挨拶をします。2 つの int を渡すと計算もします\",\n\tArgs: func(cmd *cobra.Command, args []string) error {\n\t\tif len(args) == 0 {\n\t\t\treturn nil\n\t\t} else {\n\t\t\tif len(args) != 2 {\n\t\t\t\treturn errors.New(\"引数の数が不正です\")\n\t\t\t}\n\t\t\t_, err1 := strconv.Atoi(args[0])\n\t\t\t_, err2 := strconv.Atoi(args[1])\n\t\t\tif err1 != nil || err2 != nil {\n\t\t\t\treturn errors.New(\"引数の型が不正です\")\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t},\n\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\tname, _ := cmd.Flags().GetString(\"name\")\n\n\t\tif night {\n\t\t\tfmt.Println(\"Good night \" + name)\n\t\t\tif len(args) > 0 {\n\t\t\t\tfirstNum, _ := strconv.Atoi(args[0])\n\t\t\t\tsecondNum, _ := strconv.Atoi(args[1])\n\t\t\t\tfmt.Printf(\"SUM: %v\\n\", firstNum+secondNum)\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\t\tfmt.Println(\"Hello \" + name)\n\t\tif len(args) > 0 {\n\t\t\tfirstNum, _ := strconv.Atoi(args[0])\n\t\t\tsecondNum, _ := strconv.Atoi(args[1])\n\t\t\tfmt.Printf(\"SUM: %v\\n\", firstNum+secondNum)\n\t\t}\n\t\treturn nil\n\t},\n}\n```\n\n実行。\n```bash\n$ go run main.go -a aaa\nHello aaa\n\n$ go run main.go -a aaa 1 99\nHello aaa\nSUM: 100\n\n$ go run main.go -a aaa 1 abc\nError: 引数の型が不正です\nUsage:\n  sample [flags]\n\nFlags:\n  -h, --help          help for sample\n  -a, --name string   name フラグの説明文です (required)\n  -n, --night         night フラグの説明文です\n```\n\n### PreRun / PostRun Hooks\n実行前と実行後の処理を設定できる。\n\n```go\nvar rootCmd = &cobra.Command{\n\tUse:   \"sample\",\n\tShort: \"挨拶をします。2 つの int を渡すと計算もします\",\n\tArgs: func(cmd *cobra.Command, args []string) error {\n\t\tif len(args) == 0 {\n\t\t\treturn nil\n\t\t} else {\n\t\t\tif len(args) != 2 {\n\t\t\t\treturn errors.New(\"引数の数が不正です\")\n\t\t\t}\n\t\t\t_, err1 := strconv.Atoi(args[0])\n\t\t\t_, err2 := strconv.Atoi(args[1])\n\t\t\tif err1 != nil || err2 != nil {\n\t\t\t\treturn errors.New(\"引数の型が不正です\")\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t},\n\tPreRun: func(cmd *cobra.Command, args []string) {\n\t\tfmt.Println(\"=== PreRun ===\")\n\t},\n\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\tname, _ := cmd.Flags().GetString(\"name\")\n\n\t\tif night {\n\t\t\tfmt.Println(\"Good night \" + name)\n\t\t\tif len(args) > 0 {\n\t\t\t\tfirstNum, _ := strconv.Atoi(args[0])\n\t\t\t\tsecondNum, _ := strconv.Atoi(args[1])\n\t\t\t\tfmt.Printf(\"SUM: %v\\n\", firstNum+secondNum)\n\t\t\t}\n\t\t\treturn nil\n\t\t}\n\n\t\tfmt.Println(\"Hello \" + name)\n\t\tif len(args) > 0 {\n\t\t\tfirstNum, _ := strconv.Atoi(args[0])\n\t\t\tsecondNum, _ := strconv.Atoi(args[1])\n\t\t\tfmt.Printf(\"SUM: %v\\n\", firstNum+secondNum)\n\t\t}\n\t\treturn nil\n\t},\n\tPostRun: func(cmd *cobra.Command, args []string) {\n\t\tfmt.Println(\"=== PostRun ===\")\n\t},\n}\n```\n\n実行。\n```bash\n$ go run main.go -a aaa\n=== PreRun ===\nHello aaa\n=== PostRun ===\n```\n\n### subcommand\n```bash\n$ docker-compose run cobra-cli add server\n\n$ tree\n.\n├── Dockerfile\n├── LICENSE\n├── cmd\n│   ├── root.go\n│   └── server.go\n├── docker-compose.yml\n├── go.mod\n├── go.sum\n└── main.go\n```\n\n`cmd` 配下にファイルが生成されている。\n```go\n/*\nCopyright © 2022 NAME HERE <EMAIL ADDRESS>\n\n*/\npackage cmd\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/spf13/cobra\"\n)\n\n// serverCmd represents the server command\nvar serverCmd = &cobra.Command{\n\tUse:   \"server\",\n\tShort: \"server を起動します\",\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tfmt.Println(\"server called\")\n\t},\n}\n\nfunc init() {\n\trootCmd.AddCommand(serverCmd)\n}\n```\n\n実行。\n```bash\n$ go run main.go -h\n挨拶をします。2 つの int を渡すと計算もします\n\nUsage:\n  sample [flags]\n  sample [command]\n\nAvailable Commands:\n  completion  Generate the autocompletion script for the specified shell\n  help        Help about any command\n  server      A brief description of your command\n\nFlags:\n  -h, --help          help for sample\n  -a, --name string   name フラグの説明文です (required)\n  -n, --night         night フラグの説明文です\n\nUse \"sample [command] --help\" for more information about a command.\n```\n\n`server` のヘルプをみる。\n```bash\n$ go run main.go server -h\nserver を起動します\n\nUsage:\n  sample server [flags]\n\nFlags:\n  -h, --help   help for server\n\nGlobal Flags:\n  -n, --night   night フラグの説明文です\n$ go run main.go server\nserver called\n```\n\nsubcommand も簡単に実装できそう。\n"}},"__N_SSG":true}