{"pageProps":{"body":{"id":"20210306225218","title":"Docker と docker-compose のまとめ","body":"\n## Docker\n`Dockerfile` を元にイメージを構築する。\n\n### build\n`Dockerfile` が存在するディレクトリで実行する。\n```bash\n$ docker build .\n```\n\n`-f` オプションを使うことで Dockerfile のパスを指定できる。\n```bash\n$ docker build -f /path/to/Dockerfile .\n```\n\n### FROM\nベースイメージを指定する。\n```Dockerfile\nFROM <image>[:<tag>][AS <name>]\n```\n`AS <name>` でステージに名前を付けて、以降の `FROM` と `COPY --from=<name>` 命令で構築イメージを参照できる。\n\n### RUN\nシェルとして実行される。\n```Dockerfile\nRUN /bin/sh -c 'source $HOME/.bashrc;' \\\necho $HOME\n```\n\n1 行で書く場合。\n```Dockerfile\nRUN /bin/sh -c 'source $HOME/.bashrc; echo $HOME'\n```\n\n`bash/sh` 以外のシェルを使う場合は `exec` 形式でシェルに引数を渡す。\n```Dockerfile\nRUN [\"/bin/bash\", \"-c\", \"echo hello\"]\n```\n`exec` 形式で書く場合は json 配列として扱わるため `\"\"` で囲む必要がある。\n\n### CMD\n`Dockerfile` 内の `CMD` 命令は 1 つのみ。複数あっても最後の `CMD` 命令のみが実行される。\n**CMD の目的はコンテナの実行時のデフォルトの処理を指定する**\n```Dockerfile\nFROM ubuntu\nCMD [\"/usr/bin/wc\", \"--help\"]\n```\n\n### ADD / COPY\n`<src>` で指定したファイル、ディレクトリをコンテナ内の `<dest>` にコピーする。\nローカルのファイルをコンテナにコピーしたい場合は `COPY` を使う。\n`ADD` はローカルでの圧縮ファイルの展開やリモートファイルの展開したい場面で使う。\n```Dockerfile\nADD [--chown=<ユーザ>:<グループ>] <src> <dest>\nCOPY [--chown=<ユーザ>:<グループ>] <src> <dest>\n```\n\n### EXPOSE\nコンテナが接続するためのリッスンするポートを指定する。\n```Dockerfile\nEXPOSE 80\n```\n実際にはポートの公開は行われない。ドキュメント的な用途として使われる。\n実際に公開して使うには、 `docker run` の際にフラグをつける。\n```bash\n$ docker run --rm -it -p 80:80 <image> bash\n```\n\n### ENV\n環境変数の設定をする。\n```Dockerfile\nENV <key>=<value>\n```\n環境変数は、 `Dockerfile` 内の変数として使える。\n使い方は、 `$variable_name` もしくは、 `${variable_name}`\n```Dockerfile\nFROM <image>\nENV FOO=/bar\nWORKDIR ${FOO} # WORKDIR /bar\n```\n\n### ENTRYPOINT\n最適な使い方はイメージに対してメインのコマンドを設定しておき、 `CMD` を使ってデフォルトフラグを指定する。\n```Dockerfile\nENTRYPOINT [\"go\"]\nCMD [\"--help\"]\n```\nパラメータを指定して起動することでコマンドの実行ができる。\n```bash\n$ docker run <image> run main.go\n```\n\n### VOLUME\nコンテナによって作成されるファイルやフォルダの公開に使う。イメージの可変的な部分、ユーザが設定可能な部分について使う。\n\n### USER\n非 root ユーザで実行可能な場合は `USER` を使ってユーザの変更する。\n```Dockerfile\nUSER <ユーザ>[:<グループ>]\n```\n\n### WORKDIR\nDockerfile で続く `RUN`、 `CMD`、 `ENTRYPOINT`、 `COPY / ADD` の命令の処理時で使う作業ディレクトリを指定する。\n\n### ARG\n`build` 時にユーザが渡せる変数を定義する。\n構築時には `docker build --build-arg <変数名>=<値>` を指定する。\n```Dockerfile\nARG <name>[=<デフォルト値>]\n```\n\n## docker-compose\nサービスを定義する。\n\n### build\nビルド時に適用される。\n```yml\nservices:\n  webapp:\n    build: ./dir\n```\n\n`context` でパスを指定し, `Dockerfile` や `args` も指定できる。\n```yml\nservices:\n  webapp:\n    build:\n      context: ./dir\n      dockerfile: Dockerfile-alternate\n      args:\n        buildno: 1\n```\n\n`image` 名と `tag` を指定できる。\n```yml\nbuild: ./dir\nimage: webapp:tag\n```\n\n### context\n`Dockerfile` を含むディレクトリへのパスか、 git リポジトリの URL を指定する。\n```yml\nbuild:\n  context: ./dir\n```\n\n### dockerfile\n別の `Dockerfile` を指定する。この場合、ビルドパスを同時に指定する必要がある。\n```yml\nbuild:\n  context: .\n  dockerfile: Dockerfile-alternate\n```\n\n### args\nビルド時にのみ有効な環境変数を設定する。\n個々をマッピングするか、リストで書く.ブール値はクォートで囲む。\n```yml\nbuild:\n  context: .\n  args:\n    buildno: 1\n    gitcommithash: abc123\n```\n```yml\nbuild:\n  context: .\n  args:\n    - buildno=1\n    - gitcommithash=abc123\n```\n\n### command\nデフォルトのコマンドを上書きする。\n```yml\ncommand: bundle exec thin -p 3000\n```\nリスト形式も可能。\n```yml\ncommand: [\"bundle\", \"exec\", \"thin\", \"-p\", \"3000\"]\n```\n\n### depends_on\nサービス起動の依存関係を表す。\n以下の場合、 db と redis の起動後に web が起動する。\n```yml\nversion: \"3.9\"\nservices:\n  web:\n    build: .\n    depends_on:\n      - db\n      - redis\n  redis:\n    image: redis\n  db:\n    image: postgres\n```\n\n### entrypoint\nデフォルトのエントリーポイントを上書きする。\n```yml\nentrypoint: /code/entrypoint.sh\n```\nリスト形式も可能。\n```yml\nentrypoint: [\"php\", \"-d\", \"memry_limit=1\", \"vendor/bin/phpunit\"]\n```\n\n### environment\n環境変数を追加する。\n個々をマッピングするか,リストで書く.ブール値はクォートで囲む。\n```yml\nenvironment:\n  RACK_ENV: development\n  SHOW: 'true'\n  SESSION_SECRET:\n```\n```yml\nenvironment:\n  - RACK_ENV=development\n  - SHOW=true\n  - SESSION_SECRET\n```\n\n### expose\nホストマシンにはポートを公開せずに,ポートを expose する.\nリンクされたサービスのみアクセス可能。\n```yml\nexpose:\n  - \"3000\"\n  - \"8000\"\n```\n\n### external_links\n実行する `docker-compose.yml` 以外から起動されたコンテナをリンクする。\nコンテナ名とエイリアス名 (CONTAINER:ALIAS) を指定する。\n```yml\nexternal_links:\n  - redis_1\n  - project_db_1:mysql\n```\n\n### extra_hosts\nホスト名をマッピングに追加する。\n`/etc/hosts` に追加される。\n```yml\nextra_hosts:\n  - \"somehost:162.242.195.82\"\n```\n\n### ports\n公開用のポートを設定する。\nホスト側とコンテナ側のポートを指定する( `HOST:CONTAINER` )。\nもしくは、コンテナ側のポートを指定する。\n```yml\nports:\n  - \"3000\"\n  - \"3000-3005\"\n  - \"8000:8000\"\n  - \"9090-9091:8080-8081\"\n  - \"49100:22\"\n  - \"127.0.0.1:8001:8001\"\n  - \"127.0.0.1:5000-5010:5000-5010\"\n  - \"6060:6060/udp\"\n  - \"12400-12500:1240\"\n```\n\n### volumes\n複数のサービスにわたってボリュームを再利用したい場合、最上位の `volumes` キーで名前付きボリュームを定義する。\n以下の場合、 db サービスのデータディレクトリは、 backup サービスのボリュームにも共有させている。\n```yml\nversion: \"3.9\"\nservices:\n  db:\n    image: db\n    volumes:\n      - data-volume:/var/lib/db\n  backup:\n    image: backup-service\n    volumes:\n      - data-volume:/var/lib/backup/data\nvolumes:\n  data-volume:\n```\n短い書き方では、 `[SOURCE:]TARGET[:MODE]` と書ける。 `ro` は `readonly` 。\n```yml\n- ./cache:/tmp/cache:ro\n```\n\n### 変数の置換\nシェル環境に `POSTGRES_VERSION=9.3` が定義されていると、 postgres のバージョンは 9.3 になる。\n```yml\ndb:\n  image: \"postgres:${POSTGRES_VERSION}\"\n```\n\n環境変数が設定されていない場合は空文字になる。\n環境変数のデフォルト値は `.env` ファイルに設定しておくことができる。\n- ${VARIABLE:-default} は VARIABLE がセットされていないか, 空文字のときに `default` として評価される\n- ${VARIABLE-default} は VARIABLE がセットされているときのみ `default` として評価される\n"}},"__N_SSG":true}