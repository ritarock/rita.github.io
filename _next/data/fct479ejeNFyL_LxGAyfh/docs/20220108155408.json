{"pageProps":{"body":{"id":"20220108155408","title":"ent と echo で API 作る","body":"\n## ent\n### インストール\nent と DB の client をインストールする。\n```bash\n$ go get -d entgo.io/ent/cmd/ent\n$ go get github.com/mattn/go-sqlite3\n```\n\n### スキーマの作成\n```bash\n$ go run entgo.io/ent/cmd/ent init Todo\n```\n\n`ent/schema/todo.go` を編集する。\n```go\n// Fields of the Todo.\nfunc (Todo) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tDefault(\"\"),\n\t\tfield.Bool(\"status\").\n\t\t\tDefault(false),\n\t\tfield.Time(\"created_at\").\n\t\t\tDefault(func() time.Time {\n\t\t\t\treturn time.Now()\n\t\t\t}),\n\t}\n}\n```\n\n### コード生成\nshema ファイルを元にコードを生成するので編集後は実行する必要がある。\n```bash\n$ go generate ./ent\n```\n\n### マイグレーション部分を実装\n```go\nfunc main() {\n\n\tclient, err := ent.Open(\"sqlite3\", \"file:todo.sqlite?cache=shared&_fk=1\")\n\tif err != nil {\n\t\tlog.Fatalf(\"faild opening connection to sqlit\")\n\t}\n\tdefer client.Close()\n\n\tif err := client.Schema.Create(context.Background()); err != nil {\n\t\tlog.Fatalf(\"faild creating schema\")\n\t}\n}\n```\n\n## echo\n`Todo` の struct を定義。\n```go\ntype Todo struct {\n\tName   string `json:\"name\"`\n\tStatus bool   `json:\"status\"`\n}\n```\n\n今回は CRUD 可能な Todo アプリを作りたいので以下のハンドラを作成する。\n```go\ne := echo.New()\n\ne.POST(\"/todo\", func(c echo.Context) error {\n\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"ok\"})\n})\ne.GET(\"/todo/:id\", func(c echo.Context) error {\n\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"ok\"})\n})\ne.PUT(\"/todo/:id\", func(c echo.Context) error {\n\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"ok\"})\n})\ne.DELETE(\"/todo/:id\", func(c echo.Context) error {\n\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"ok\"})\n})\n\ne.Logger.Fatal(e.Start(\":8080\"))\n```\n\n## create を実装\n```go\ne.POST(\"/todo\", func(c echo.Context) error {\n\tt := &Todo{}\n\tif err := c.Bind(t); err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\n\t\t\t\"message\": http.StatusText(http.StatusInternalServerError),\n\t\t})\n\t}\n\ttodo, err := client.Todo.\n\t\tCreate().\n\t\tSetName(t.Name).\n\t\tSetStatus(t.Status).\n\t\tSetCreatedAt(time.Now()).\n\t\tSave(context.Background())\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\n\t\t\t\"message\": http.StatusText(http.StatusInternalServerError),\n\t\t})\n\t}\n\n\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t\"name\":   todo.Name,\n\t\t\"status\": strconv.FormatBool(todo.Status),\n\t})\n})\n```\n\n実行。\n```bash\n$ curl --location --request POST 'http://localhost:8080/todo' \\\n       --header 'Content-Type: application/json' \\\n       --data-raw '{\"name\": \"todo1\"}'\n{\"name\":\"todo1\",\"status\":\"false\"}\n```\n\n## READ を実装\n```go\ne.GET(\"/todo/:id\", func(c echo.Context) error {\n\tid, _ := strconv.Atoi(c.Param(\"id\"))\n\n\ttodo, err := client.Todo.\n\t\tQuery().\n\t\tWhere(todo.ID(id)).\n\t\tOnly(context.Background())\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\n\t\t\t\"message\": http.StatusText(http.StatusInternalServerError),\n\t\t})\n\t}\n\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t\"name\":       todo.Name,\n\t\t\"status\":     strconv.FormatBool(todo.Status),\n\t\t\"created_at\": todo.CreatedAt.String(),\n\t})\n})\n```\n\n実行。\n```bash\n$ curl http://localhost:8080/todo/1\n{\"created_at\":\"2022-01-09 15:30:02.059031 +0900 +0900\",\"name\":\"todo1\",\"status\":\"false\"}\n```\n\n## UPDATE を実装\n```go\ne.PUT(\"/todo/:id\", func(c echo.Context) error {\n\tid, _ := strconv.Atoi(c.Param(\"id\"))\n\tt := &Todo{}\n\tif err := c.Bind(t); err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\n\t\t\t\"message\": http.StatusText(http.StatusInternalServerError),\n\t\t})\n\t}\n\n\ttodo, err := client.Todo.\n\t\tUpdateOneID(id).\n\t\tSetName(t.Name).\n\t\tSetStatus(t.Status).\n\t\tSave(context.Background())\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\n\t\t\t\"message\": http.StatusText(http.StatusInternalServerError),\n\t\t})\n\t}\n\n\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t\"name\":       todo.Name,\n\t\t\"status\":     strconv.FormatBool(todo.Status),\n\t\t\"created_at\": todo.CreatedAt.String(),\n\t})\n})\n```\n\n```bash\n$ curl --location --request PUT 'http://localhost:8080/todo/1' \\\n       --header 'Content-Type: application/json' \\\n       --data-raw '{\"name\": \"todo1\", \"status\": true}'\n{\"created_at\":\"2022-01-09 15:30:02.059031 +0900 +0900\",\"name\":\"todo1\",\"status\":\"true\"}\n```\n\n## DELETE を実装\n```go\ne.DELETE(\"/todo/:id\", func(c echo.Context) error {\n\tid, _ := strconv.Atoi(c.Param(\"id\"))\n\terr := client.Todo.\n\t\tDeleteOneID(id).\n\t\tExec(context.Background())\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\n\t\t\t\"message\": http.StatusText(http.StatusInternalServerError),\n\t\t})\n\t}\n\n\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t\"message\": fmt.Sprintf(\"DELETE: %v\", id),\n\t})\n})\n```\n\n実行。\n```bash\ncurl --location --request DELETE 'http://localhost:8080/todo/1'\n{\"message\":\"DELETE: 1\"}\n```\n\n### コード全体\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"echo-ent-crud/ent\"\n\t\"echo-ent-crud/ent/todo\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\ntype Todo struct {\n\tName   string `json:\"name\"`\n\tStatus bool   `json:\"status\"`\n}\n\nfunc main() {\n\tclient, err := ent.Open(\"sqlite3\", \"file:todo.sqlite?cache=shared&_fk=1\")\n\tif err != nil {\n\t\tlog.Fatalf(\"faild opening connection to sqlit\")\n\t}\n\tdefer client.Close()\n\n\tif err := client.Schema.Create(context.Background()); err != nil {\n\t\tlog.Fatalf(\"faild creating schema\")\n\t}\n\n\te := echo.New()\n\n\te.POST(\"/todo\", func(c echo.Context) error {\n\t\tt := &Todo{}\n\t\tif err := c.Bind(t); err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\n\t\t\t\t\"message\": http.StatusText(http.StatusInternalServerError),\n\t\t\t})\n\t\t}\n\t\ttodo, err := client.Todo.\n\t\t\tCreate().\n\t\t\tSetName(t.Name).\n\t\t\tSetStatus(t.Status).\n\t\t\tSetCreatedAt(time.Now()).\n\t\t\tSave(context.Background())\n\t\tif err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\n\t\t\t\t\"message\": http.StatusText(http.StatusInternalServerError),\n\t\t\t})\n\t\t}\n\n\t\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t\t\"name\":   todo.Name,\n\t\t\t\"status\": strconv.FormatBool(todo.Status),\n\t\t})\n\t})\n\n\te.GET(\"/todo/:id\", func(c echo.Context) error {\n\t\tid, _ := strconv.Atoi(c.Param(\"id\"))\n\n\t\ttodo, err := client.Todo.\n\t\t\tQuery().\n\t\t\tWhere(todo.ID(id)).\n\t\t\tOnly(context.Background())\n\t\tif err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\n\t\t\t\t\"message\": http.StatusText(http.StatusInternalServerError),\n\t\t\t})\n\t\t}\n\t\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t\t\"name\":       todo.Name,\n\t\t\t\"status\":     strconv.FormatBool(todo.Status),\n\t\t\t\"created_at\": todo.CreatedAt.String(),\n\t\t})\n\t})\n\n\te.PUT(\"/todo/:id\", func(c echo.Context) error {\n\t\tid, _ := strconv.Atoi(c.Param(\"id\"))\n\t\tt := &Todo{}\n\t\tif err := c.Bind(t); err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\n\t\t\t\t\"message\": http.StatusText(http.StatusInternalServerError),\n\t\t\t})\n\t\t}\n\n\t\ttodo, err := client.Todo.\n\t\t\tUpdateOneID(id).\n\t\t\tSetName(t.Name).\n\t\t\tSetStatus(t.Status).\n\t\t\tSave(context.Background())\n\t\tif err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\n\t\t\t\t\"message\": http.StatusText(http.StatusInternalServerError),\n\t\t\t})\n\t\t}\n\n\t\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t\t\"name\":       todo.Name,\n\t\t\t\"status\":     strconv.FormatBool(todo.Status),\n\t\t\t\"created_at\": todo.CreatedAt.String(),\n\t\t})\n\t})\n\n\te.DELETE(\"/todo/:id\", func(c echo.Context) error {\n\t\tid, _ := strconv.Atoi(c.Param(\"id\"))\n\t\terr := client.Todo.\n\t\t\tDeleteOneID(id).\n\t\t\tExec(context.Background())\n\t\tif err != nil {\n\t\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\n\t\t\t\t\"message\": http.StatusText(http.StatusInternalServerError),\n\t\t\t})\n\t\t}\n\n\t\treturn c.JSON(http.StatusOK, map[string]string{\n\t\t\t\"message\": fmt.Sprintf(\"DELETE: %v\", id),\n\t\t})\n\t})\n\n\te.Logger.Fatal(e.Start(\":8080\"))\n}\n```\n"}},"__N_SSG":true}