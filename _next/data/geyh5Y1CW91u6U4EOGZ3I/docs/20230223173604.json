{"pageProps":{"contents":{"id":"20230223173604","title":"gqlgen を触る","body":"\n## database の準備\n```bash\n$ go run -mod=mod entgo.io/ent/cmd/ent new Todo\n```\nschema の設定。\n```go\n// Fields of the Todo.\nfunc (Todo) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"title\"),\n\t\tfield.String(\"note\"),\n\t\tfield.Bool(\"completed\").Default(false),\n\t\tfield.Time(\"created_at\").Default(time.Now()),\n\t\tfield.Time(\"updated_at\").Default(time.Now()),\n\t}\n}\n```\n\n```bash\n$ go generate ./ent\n```\n\n## gqlgen\n```bash\n$ printf '// +build tools\\npackage tools\\nimport (_ \"github.com/99designs/gqlgen\"\\n _ \"github.com/99designs/gqlgen/graphql/introspection\")' | gofmt > tools.go\n$ go mod tidy\n$ go run github.com/99designs/gqlgen init\n\n```\n\n`graph/` に生成されたファイル。\n```bash\ntree graph/\ngraph/\n├── generated.go # 自動生成\n├── model\n│   └── models_gen.go # 自動生成\n├── resolver.go\n├── schema.graphqls\n└── schema.resolvers.go\n```\n\nファイルは `resolver.go`、`schema.graphqls`、`schema.resolvers.go` で良さそう。\nプロジェクト直下に生成された `gqlgen.yml` は一旦放置。\n\n### スキーマ定義\n`schema.graphqls / schema.resolvers.go` を削除し、新規にスキーマ定義ファイルを作る。\n\n共有インターフェイス Node を定義する。プライマリーキーを持つ場合は Node インターフェイスを作るのがお作法らしい。また、独自の型として Datetime を定義する。\n```common.graphqls\ninterface Node {\n    id: ID!\n}\n\nscalar Datetime\n```\n\n次に Todo スキーマを定義する。\n```todo.graphqls\ntype Todo implements Node {\n    id: ID!\n    title: String!\n    note: String!\n    completed: Boolean!\n    created_at: Datetime!\n    updated_at: Datetime!\n}\n```\n\n最後に query と mutation を定義する。\n```query.graphqls\ntype Query {\n    todos: [Todo!]!\n}\n```\n\n```mutation.graphqls\ntype Mutation {\n    createTodo(input: NewTodo!): Todo!\n}\n\ninput NewTodo {\n    id: ID\n    title: String!\n    note: String!\n    completed: Boolean\n    created_at: Datetime\n    updated_at: Datetime\n}\n```\n\n### コードの生成\n```bash\n$ go run github.com/99designs/gqlgen\n```\n\n### 実装\nresolver から参照できるようにフィールドを追加する。\n```go\ntype Resolver struct {\n\tEntClient *ent.Client\n}\n```\n\n`query.resolvers.go` を実装する。\n```go\n// Todos is the resolver for the todos field.\nfunc (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {\n\ttodos := []*model.Todo{}\n\tsearched, _ := r.EntClient.Todo.Query().All(ctx)\n\tfor _, todo := range searched {\n\t\ttodos = append(todos, &model.Todo{\n\t\t\tID:        strconv.Itoa(todo.ID),\n\t\t\tTitle:     todo.Title,\n\t\t\tNote:      todo.Note,\n\t\t\tCompleted: todo.Completed,\n\t\t\tCreatedAt: todo.CreatedAt.String(),\n\t\t\tUpdatedAt: todo.UpdatedAt.String(),\n\t\t})\n\t}\n\treturn todos, nil\n}\n```\n\n`mutation.resolvers.go` を実装する。\n\n```go\n// CreateTodo is the resolver for the createTodo field.\nfunc (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {\n\tcreated, _ := r.EntClient.Todo.Create().\n\t\tSetTitle(input.Title).\n\t\tSetNote(input.Note).\n\t\tSave(ctx)\n\n\treturn &model.Todo{\n\t\tID:        strconv.Itoa(created.ID),\n\t\tTitle:     created.Title,\n\t\tNote:      created.Note,\n\t\tCompleted: created.Completed,\n\t\tCreatedAt: created.CreatedAt.String(),\n\t\tUpdatedAt: created.UpdatedAt.String(),\n\t}, nil\n}\n```\n\n## server の実装\n最後は echo で実行できるようにする。`server.go` は不要なので削除。\n```main.go\npackage main\n\nimport (\n\t\"context\"\n\t\"gqlgen-todo/ent\"\n\t\"gqlgen-todo/graph\"\n\t\"net/http\"\n\n\t\"github.com/99designs/gqlgen/graphql/handler\"\n\t\"github.com/99designs/gqlgen/graphql/playground\"\n\t\"github.com/labstack/echo/v4\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nconst (\n\tDRIVER      = \"sqlite3\"\n\tDATA_SOURCE = \"file:ent?mode=memory&cache=shared&_fk=1\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tclient, _ := ent.Open(DRIVER, DATA_SOURCE)\n\tclient.Schema.Create(ctx)\n\n\te := echo.New()\n\te.GET(\"/health\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, \"ok\")\n\t})\n\n\tgraphqlHandler := handler.NewDefaultServer(\n\t\tgraph.NewExecutableSchema(\n\t\t\tgraph.Config{\n\t\t\t\tResolvers: &graph.Resolver{\n\t\t\t\t\tEntClient: client,\n\t\t\t\t},\n\t\t\t},\n\t\t),\n\t)\n\tplaygroudHandler := playground.Handler(\"GraphQL\", \"/query\")\n\n\te.POST(\"/query\", func(c echo.Context) error {\n\t\tgraphqlHandler.ServeHTTP(c.Response(), c.Request())\n\t\treturn nil\n\t})\n\n\te.GET(\"playground\", func(c echo.Context) error {\n\t\tplaygroudHandler.ServeHTTP(c.Response(), c.Request())\n\t\treturn nil\n\t})\n\n\te.Logger.Fatal(e.Start(\":8080\"))\n}\n```\n\n### 試す\n```query\nmutation {\n  createTodo(input: {\n    title: \"title1\",\n    note: \"note1\"\n  }) {\n    id\n    title\n    note\n    completed\n    created_at\n    updated_at\n  }\n}\n\n{\n  \"data\": {\n    \"createTodo\": {\n      \"id\": \"1\",\n      \"title\": \"title1\",\n      \"note\": \"note1\",\n      \"completed\": false,\n      \"created_at\": \"2023-02-23 17:33:13\",\n      \"updated_at\": \"2023-02-23 17:33:13\"\n    }\n  }\n}\n```\n\n```query\n{\n  todos {\n    id\n    title\n    note\n    completed\n    created_at\n    updated_at\n  }\n}\n\n{\n  \"data\": {\n    \"todos\": [\n      {\n        \"id\": \"1\",\n        \"title\": \"title1\",\n        \"note\": \"note1\",\n        \"completed\": false,\n        \"created_at\": \"2023-02-23 17:33:13\",\n        \"updated_at\": \"2023-02-23 17:33:13\"\n      },\n      {\n        \"id\": \"2\",\n        \"title\": \"title2\",\n        \"note\": \"note2\",\n        \"completed\": false,\n        \"created_at\": \"2023-02-23 17:33:13\",\n        \"updated_at\": \"2023-02-23 17:33:13\"\n      },\n      {\n        \"id\": \"3\",\n        \"title\": \"title3\",\n        \"note\": \"note3\",\n        \"completed\": false,\n        \"created_at\": \"2023-02-23 17:33:13\",\n        \"updated_at\": \"2023-02-23 17:33:13\"\n      }\n    ]\n  }\n}\n```\n"}},"__N_SSG":true}