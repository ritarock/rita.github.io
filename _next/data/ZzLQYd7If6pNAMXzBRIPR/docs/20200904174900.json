{"pageProps":{"docData":{"id":"20200904174900","title":"配列をユニークにする","content":"\n## JavaScript\n### set を使う\n配列を Set に変換.\n```javascript\nconst arr = [0, 0, 1, 1, 1, 2, 3, 4, 5, 5, 5, 6, 6, 7, 8, 9, 9, 9]\nconst set = new Set(arr)\n\nconsole.log(set)\n// Set(10) { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }\n```\n\nSet を配列に変換.\n```javascript\nconst arr = [0, 0, 1, 1, 1, 2, 3, 4, 5, 5, 5, 6, 6, 7, 8, 9, 9, 9]\nconst set = new Set(arr)\n\nconst setToAArr = Array.from(set)\n\nconsole.log(setToAArr)\n// [\n//   0, 1, 2, 3, 4,\n//   5, 6, 7, 8, 9\n// ]\n```\n\nスプレッド構文を使う.\n```javascript\nconst arr = [0, 0, 1, 1, 1, 2, 3, 4, 5, 5, 5, 6, 6, 7, 8, 9, 9, 9]\nconst set = new Set(arr)\n\nconst setToAArr = [...set]\n\nconsole.log(setToAArr)\n// [\n//   0, 1, 2, 3, 4,\n//   5, 6, 7, 8, 9\n// ]\n```\n\n### map を使う\n配列を Map に変換.\n```javascript\nconst arr = [{id: 1}, {id: 2}, {id: 2}, {id: 3}]\n\nconst m = new Map(arr.map(e => [e.id, e]))\n\nconsole.log(m)\n// Map(3) { 1 => { id: 1 }, 2 => { id: 2 }, 3 => { id: 3 } }\n```\n\n## Golang\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tarr := []int{0, 0, 1, 1, 1, 2, 3, 4, 5, 5, 5, 6, 6, 7, 8, 9, 9, 9}\n\tm := make(map[int]struct{})\n\tuniqArr := make([]int, 0)\n\n\tfor _, v := range arr {\n\t\tif _, ok := m[v]; !ok {\n\t\t\tm[v] = struct{}{}\n\t\t\tuniqArr = append(uniqArr, v)\n\t\t}\n\t}\n\t\n\tfmt.Println(uniqArr) // [0 1 2 3 4 5 6 7 8 9]\n}\n```\n"}},"__N_SSG":true}