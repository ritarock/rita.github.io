{"pageProps":{"docBody":{"id":"20210718124235","title":"Golang で json を操作する","body":"\n## JSON の解析\n今回使う JSON ファイル。\n```json\n{\n  \"id\": 1,\n  \"content\": \"Hello\",\n  \"author\": {\n    \"id\": 1,\n    \"name\": \"author1\"\n  },\n  \"comments\": [\n    {\n      \"id\": 1,\n      \"content\": \"comment1\",\n      \"author\": \"author2\"\n    },\n    {\n      \"id\": 2,\n      \"content\": \"comment2\",\n      \"author\": \"author3\"\n    }\n  ]\n}\n\n```\n\n### Unmarshal を使う\n文字列データの場合は Unmarshal を使う。\n\n- 構造体を定義\n- JSON を構造体に格納\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"os\"\n)\n\ntype Post struct {\n\tId      int    `json:\"id\"`\n\tContent string `json:\"content\"`\n\tAuthor  struct {\n\t\tId   int    `json:\"id\"`\n\t\tName string `json:\"name\"`\n\t} `json:\"author\"`\n\tComments []struct {\n\t\tId      int    `json:\"id\"`\n\t\tContent string `json:\"content\"`\n\t\tAuthor  string `json:\"author\"`\n\t} `json:\"comments\"`\n}\n\nfunc main() {\n\tjsonFile, err := os.Open(\"file.json\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer jsonFile.Close()\n\n\tjsonData, err := ioutil.ReadAll(jsonFile)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\n\tvar post Post\n\tjson.Unmarshal(jsonData, &post)\n\tfmt.Println(post) // {1 Hello {0 author1} [{1 comment1 author2} {2 comment2 author3}]}\n}\n```\n\n### デコーダを使う\nhttp.Request の Body のように `io.Reader` のストリームからデータが入ってくる場合に使う。\n\n- 構造体を定義\n- デコーダを作成する\n- JSON を順次処理してデコードする\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\ntype Post struct {\n\tId      int    `json:\"id\"`\n\tContent string `json:\"content\"`\n\tAuthor  struct {\n\t\tId   int    `json:\"id\"`\n\t\tName string `json:\"name\"`\n\t} `json:\"author\"`\n\tComments []struct {\n\t\tId      int    `json:\"id\"`\n\t\tContent string `json:\"content\"`\n\t\tAuthor  string `json:\"author\"`\n\t} `json:\"comments\"`\n}\n\nfunc main() {\n\tjsonFile, err := os.Open(\"file.json\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer jsonFile.Close()\n\n\tdecoder := json.NewDecoder(jsonFile)\n\tfor {\n\t\tvar post Post\n\t\terr := decoder.Decode(&post)\n\t\tif err == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif err != nil {\n\t\t\tfmt.Println(err)\n\t\t\treturn\n\t\t}\n\t\tfmt.Println(post) // {1 Hello {1 author1} [{1 comment1 author2} {2 comment2 author3}]}\n\t}\n}\n```\n\n## JSON データを作成する\n- 構造体を定義\n- 構造体を JSON データに組み換え\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n)\n\ntype Post struct {\n\tId       int       `json:\"id\"`\n\tContent  string    `json:\"content\"`\n\tAuthor   Author    `json:\"author\"`\n\tComments []Comment `json:\"comments\"`\n}\ntype Author struct {\n\tId   int    `json:\"id\"`\n\tName string `json:\"name\"`\n}\ntype Comment struct {\n\tId      int    `json:\"id\"`\n\tContent string `json:\"content\"`\n\tAuthor  string `json:\"author\"`\n}\n\nfunc main() {\n\tpost := Post{\n\t\tId:      1,\n\t\tContent: \"Hello\",\n\t\tAuthor: Author{\n\t\t\tId:   1,\n\t\t\tName: \"author1\",\n\t\t},\n\t\tComments: []Comment{\n\t\t\t{\n\t\t\t\tId:      1,\n\t\t\t\tContent: \"comment1\",\n\t\t\t\tAuthor:  \"author2\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tId:      2,\n\t\t\t\tContent: \"comment2\",\n\t\t\t\tAuthor:  \"author3\",\n\t\t\t},\n\t\t},\n\t}\n\toutput, err := json.MarshalIndent(&post, \"\", \"\\t\\t\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\terr = ioutil.WriteFile(\"created.json\", output, 0644)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n}\n```\n\n### エンコーダを使う\n- 構造体を定義\n- エンコーダを作成する\n- エンコーダを使い構造体を JSON ファイルにエンコード\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n)\n\ntype Post struct {\n\tId       int       `json:\"id\"`\n\tContent  string    `json:\"content\"`\n\tAuthor   Author    `json:\"author\"`\n\tComments []Comment `json:\"comments\"`\n}\ntype Author struct {\n\tId   int    `json:\"id\"`\n\tName string `json:\"name\"`\n}\ntype Comment struct {\n\tId      int    `json:\"id\"`\n\tContent string `json:\"content\"`\n\tAuthor  string `json:\"author\"`\n}\n\nfunc main() {\n\tpost := Post{\n\t\tId:      1,\n\t\tContent: \"Hello\",\n\t\tAuthor: Author{\n\t\t\tId:   1,\n\t\t\tName: \"author1\",\n\t\t},\n\t\tComments: []Comment{\n\t\t\t{\n\t\t\t\tId:      1,\n\t\t\t\tContent: \"comment1\",\n\t\t\t\tAuthor:  \"author2\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tId:      2,\n\t\t\t\tContent: \"comment2\",\n\t\t\t\tAuthor:  \"author3\",\n\t\t\t},\n\t\t},\n\t}\n\tjsonFile, err := os.Create(\"created.json\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tencoder := json.NewEncoder(jsonFile)\n\terr = encoder.Encode(&post)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n}\n```\n"}},"__N_SSG":true}