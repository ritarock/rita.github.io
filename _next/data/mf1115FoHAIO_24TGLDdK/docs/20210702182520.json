{"pageProps":{"docBody":{"id":"20210702182520","title":"Go のコマンド","content":"\n使うたびにググっていたので。\n## go build\nソースコードのコンパイルを行う。\n- 通常のパッケージの場合、 `go build` を行ったあとは何もファイルを生成しない\n- main パッケージの場合、 `go build` を行ったあとはカレントディレクトリ直下にバイナリファイルが生成される\n- `go build` は通常、カレントディレクトリにあるすべての go ファイルをコンパイルする。ファイル名を指定することで、単一ファイルのみコンパイルできる\n- `-o` オプションでコンパイル後に生成されるファイル名を指定できる。デフォルトだとパッケージ名になる\n- `go build` は `_` 、 `.` で始まるファイルは無視する\n- `-v` オプションは、コンパイル中のパッケージ名を出力する\n\n## go fmt\nファイルの整形。\n\n## go get\nリモートパッケージを取得する。正確には、パッケージのダウンロードしてから、 `go install` を行う。\n- `-d` オプションは、ダウンロードのみでインストールは行わない\n- `-u` オプションは、パッケージとその依存パッケージを更新する\n- `-f` オプションは、 `-u` を使うときのみ有効で、 import 内の各パッケージが取得されているか検証しない。ローカルにフォークしたパッケージを使いたいときなどに使う\n\n## go install\n`go build` して生成されたバイナリファイルを `$HOME/bin` に移動している。\n\n## go test\nカレントディレクトリ配下のすべての `\\*.test.go` ファイルのテストを行う。\n- `-cover` はテストカバー率を表示する\n\n## go generate\n`go build` 前にコードを自動で生成する場合に使用する。\n\n## go mod\n依存モジュールの検知、バージョン固定、バージョンアップ検知ができる。\n- `go mod init` で初期化する\n- `go build` で依存モジュールを自動インストールする\n- `go get` で依存モジュールの追加やバージョンアップを行う\n- `go mod tidy` で使われていないモジュールを削除する\n"}},"__N_SSG":true}