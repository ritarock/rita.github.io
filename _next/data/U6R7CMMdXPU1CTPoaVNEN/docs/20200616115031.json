{"pageProps":{"docBody":{"id":"20200616115031","title":"JavaScript の call / apply / bind","content":"\n結局公式が一番わかりやすかった。\n\n## apply\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n\n> \\> apply() メソッドは、 this 値を指定して関数を呼び出し、 arguments は配列 (または配列風オブジェクト) として提供します。\n\napply は配列を受け取る。\n\n```js\nconst numbers = [5, 6, 2, 3, 7];\n\nconst max = Math.max.apply(null, numbers); // 7\n\nconsole.log(max);\n\nconst min = Math.min.apply(null, numbers); // 2\n\nconsole.log(min);\n```\n\n## call\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n> \\> このメソッドの構文は apply() とほぼ同じですが、基本的な違いは call() が引数リストを受け取るのに対して、 apply() は引数の単一の配列を受け取る点です。\n\n```js\nfunction Product(name, price) {\n  this.name = name;\n  this.price = price;\n}\n\nfunction Food(name, price) {\n  Product.call(this, name, price);\n  this.category = 'food';\n}\n\nconsole.log(new Food('cheese', 5).name); // \"cheese\"\nconsole.log(JSON.stringify(new Food('cheese', 5))); // \"{\"name\":\"cheese\",\"price\":5,\"category\":\"food\"}\"\n```\n\n## bind\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n\n> \\> bind() メソッドは、呼び出された際に this キーワードに指定された値が設定される新しい関数を生成します。この値は新しい関数が呼び出されたとき、一連の引数の前に置かれます。\n\n関数が返って来るから実行のときは()をつけてあげないといけない。もしくは call で呼び出す。\n\n```js\nconst module = {\n  x: 42,\n  getX: function() {\n    return this.x;\n  }\n};\n\nconst unboundGetX = module.getX;\nconsole.log(unboundGetX()); // undefined\n\nconst boundGetX = unboundGetX.bind(module);\nconsole.log(boundGetX()); // 42\n\n// call で呼び出すとき\nconst callGetX = unboundGetX.call(module);\nconsole.log(boundGetX); // 42\n```\n"}},"__N_SSG":true}