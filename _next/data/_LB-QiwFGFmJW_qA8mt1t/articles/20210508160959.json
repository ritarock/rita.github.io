{"pageProps":{"data":{"id":"20210508160959","fileContents":"{\n  \"title\": \"Golang で 集合の演算\",\n  \"date\": 20210508160959,\n  \"tags\": [\n    \"golang\"\n  ],\n  \"bodyContent\": \"## 何も使わずに実装する\\n### 和集合\\n```go\\npackage main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n\\ta := []int{1, 2, 3}\\n\\tb := []int{2, 3, 4}\\n\\tc := []int{3}\\n\\n\\tresult := func(array ...[]int) []int {\\n\\t\\tm := make(map[int]struct{})\\n\\t\\tfor _, arr := range array {\\n\\t\\t\\tfor _, v := range arr {\\n\\t\\t\\t\\tm[v] = struct{}{}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttmp := []int{}\\n\\t\\tfor k := range m {\\n\\t\\t\\ttmp = append(tmp, k)\\n\\t\\t}\\n\\t\\treturn tmp\\n\\t}(a, b, c)\\n\\n\\tfmt.Println(result)\\n}\\n\\n// [3 4 1 2]\\n```\\n\\n## 積集合\\n```go\\npackage main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n\\ta := []int{1, 2, 3}\\n\\tb := []int{2, 3, 4}\\n\\tc := []int{3}\\n\\n\\tresult := func(array ...[]int) []int {\\n\\t\\tm := make(map[int]struct{})\\n\\t\\ttmp1 := []int{}\\n\\t\\ttmp2 := []int{}\\n\\t\\tfor _, v := range array[0] {\\n\\t\\t\\tm[v] = struct{}{}\\n\\t\\t}\\n\\t\\tfor _, v := range array[1] {\\n\\t\\t\\tif _, ok := m[v]; !ok {\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\t}\\n\\t\\t\\ttmp1 = append(tmp1, v)\\n\\t\\t}\\n\\n\\t\\tfor i := 0; i < len(array)-2; i++ {\\n\\t\\t\\tfunc(arr1, arr2 []int) {\\n\\t\\t\\t\\tm := make(map[int]struct{})\\n\\t\\t\\t\\tfor _, v := range arr1 {\\n\\t\\t\\t\\t\\tm[v] = struct{}{}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfor _, v := range arr2 {\\n\\t\\t\\t\\t\\tif _, ok := m[v]; !ok {\\n\\t\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\ttmp2 = append(tmp2, v)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}(tmp1, array[i+2])\\n\\t\\t}\\n\\t\\treturn tmp2\\n\\t}(a, b, c)\\n\\n\\tuniqueResult := func(arr []int) []int {\\n\\t\\tm := make(map[int]struct{})\\n\\t\\ttmp := make([]int, 0)\\n\\t\\tfor _, v := range arr {\\n\\t\\t\\tif _, ok := m[v]; !ok {\\n\\t\\t\\t\\tm[v] = struct{}{}\\n\\t\\t\\t\\ttmp = append(tmp, v)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn tmp\\n\\t}(result)\\n\\n\\tfmt.Println(uniqueResult)\\n}\\n\\n// [3]\\n```\\n\\n## 差集合を実装してみる\\n```go\\npackage main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n\\ta := []int{1, 2, 3}\\n\\tb := []int{2, 3}\\n\\n\\tresult := func(arr1, arr2 []int) []int {\\n\\t\\tm := make(map[int]struct{})\\n\\t\\tfor _, v := range arr2 {\\n\\t\\t\\tm[v] = struct{}{}\\n\\t\\t}\\n\\n\\t\\ttmp := []int{}\\n\\t\\tfor _, v := range arr1 {\\n\\t\\t\\tif _, ok := m[v]; ok {\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\t}\\n\\t\\t\\ttmp = append(tmp, v)\\n\\t\\t}\\n\\t\\treturn tmp\\n\\t}(a, b)\\n\\n\\tfmt.Println(result)\\n}\\n\\n// [1]\\n```\\n\\n## github.com/golang-collections/collections を使って実装する\\n### 和集合\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\n\\t\\\"github.com/golang-collections/collections/set\\\"\\n)\\n\\nfunc main() {\\n\\ta := []int{1, 2, 3}\\n\\tb := []int{2, 3, 4}\\n\\tc := []int{3}\\n\\taSet := set.New()\\n\\tbSet := set.New()\\n\\tcSet := set.New()\\n\\n\\tfor _, v := range a {\\n\\t\\taSet.Insert(v)\\n\\t}\\n\\tfor _, v := range b {\\n\\t\\tbSet.Insert(v)\\n\\t}\\n\\tfor _, v := range c {\\n\\t\\tcSet.Insert(v)\\n\\t}\\n\\n\\tresult := aSet.Union(bSet).Union(cSet)\\n\\tresultArr := []int{}\\n\\tresult.Do(func(i interface{}) { resultArr = append(resultArr, i.(int)) })\\n\\tfmt.Println(resultArr)\\n}\\n\\n// [1 2 3 4]\\n```\\n\\n## 積集合\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\n\\t\\\"github.com/golang-collections/collections/set\\\"\\n)\\n\\nfunc main() {\\n\\ta := []int{1, 2, 3}\\n\\tb := []int{2, 3, 4}\\n\\tc := []int{3}\\n\\taSet := set.New()\\n\\tbSet := set.New()\\n\\tcSet := set.New()\\n\\n\\tfor _, v := range a {\\n\\t\\taSet.Insert(v)\\n\\t}\\n\\tfor _, v := range b {\\n\\t\\tbSet.Insert(v)\\n\\t}\\n\\tfor _, v := range c {\\n\\t\\tcSet.Insert(v)\\n\\t}\\n\\n\\tresult := aSet.Intersection(bSet).Intersection(cSet)\\n\\tresultArr := []int{}\\n\\tresult.Do(func(i interface{}) { resultArr = append(resultArr, i.(int)) })\\n\\tfmt.Println(resultArr)\\n}\\n\\n// [3]\\n```\\n\\n## 差集合を実装してみる\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\n\\t\\\"github.com/golang-collections/collections/set\\\"\\n)\\n\\nfunc main() {\\n\\ta := []int{1, 2, 3}\\n\\tb := []int{2, 3}\\n\\taSet := set.New()\\n\\tbSet := set.New()\\n\\n\\tfor _, v := range a {\\n\\t\\taSet.Insert(v)\\n\\t}\\n\\tfor _, v := range b {\\n\\t\\tbSet.Insert(v)\\n\\t}\\n\\n\\tresult := aSet.Difference(bSet)\\n\\tresultArr := []int{}\\n\\tresult.Do(func(i interface{}) { resultArr = append(resultArr, i.(int)) })\\n\\n\\tfmt.Println(resultArr)\\n}\\n\\n// [1]\\n```\",\n  \"bodyHtml\": \"<h2>何も使わずに実装する</h2>\\n<h3>和集合</h3>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\ta := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>}\\n\\tb := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">4</span>}\\n\\tc := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">3</span>}\\n\\n\\tresult := <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span><span class=\\\"hljs-params\\\">(array ...[]<span class=\\\"hljs-keyword\\\">int</span>)</span> []<span class=\\\"hljs-title\\\">int</span></span> {\\n\\t\\tm := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">map</span>[<span class=\\\"hljs-keyword\\\">int</span>]<span class=\\\"hljs-keyword\\\">struct</span>{})\\n\\t\\t<span class=\\\"hljs-keyword\\\">for</span> _, arr := <span class=\\\"hljs-keyword\\\">range</span> array {\\n\\t\\t\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> arr {\\n\\t\\t\\t\\tm[v] = <span class=\\\"hljs-keyword\\\">struct</span>{}{}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttmp := []<span class=\\\"hljs-keyword\\\">int</span>{}\\n\\t\\t<span class=\\\"hljs-keyword\\\">for</span> k := <span class=\\\"hljs-keyword\\\">range</span> m {\\n\\t\\t\\ttmp = <span class=\\\"hljs-built_in\\\">append</span>(tmp, k)\\n\\t\\t}\\n\\t\\t<span class=\\\"hljs-keyword\\\">return</span> tmp\\n\\t}(a, b, c)\\n\\n\\tfmt.Println(result)\\n}\\n\\n<span class=\\\"hljs-comment\\\">// [3 4 1 2]</span></code></pre><h2>積集合</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\ta := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>}\\n\\tb := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">4</span>}\\n\\tc := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">3</span>}\\n\\n\\tresult := <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span><span class=\\\"hljs-params\\\">(array ...[]<span class=\\\"hljs-keyword\\\">int</span>)</span> []<span class=\\\"hljs-title\\\">int</span></span> {\\n\\t\\tm := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">map</span>[<span class=\\\"hljs-keyword\\\">int</span>]<span class=\\\"hljs-keyword\\\">struct</span>{})\\n\\t\\ttmp1 := []<span class=\\\"hljs-keyword\\\">int</span>{}\\n\\t\\ttmp2 := []<span class=\\\"hljs-keyword\\\">int</span>{}\\n\\t\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> array[<span class=\\\"hljs-number\\\">0</span>] {\\n\\t\\t\\tm[v] = <span class=\\\"hljs-keyword\\\">struct</span>{}{}\\n\\t\\t}\\n\\t\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> array[<span class=\\\"hljs-number\\\">1</span>] {\\n\\t\\t\\t<span class=\\\"hljs-keyword\\\">if</span> _, ok := m[v]; !ok {\\n\\t\\t\\t\\t<span class=\\\"hljs-keyword\\\">continue</span>\\n\\t\\t\\t}\\n\\t\\t\\ttmp1 = <span class=\\\"hljs-built_in\\\">append</span>(tmp1, v)\\n\\t\\t}\\n\\n\\t\\t<span class=\\\"hljs-keyword\\\">for</span> i := <span class=\\\"hljs-number\\\">0</span>; i &lt; <span class=\\\"hljs-built_in\\\">len</span>(array)<span class=\\\"hljs-number\\\">-2</span>; i++ {\\n\\t\\t\\t<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span><span class=\\\"hljs-params\\\">(arr1, arr2 []<span class=\\\"hljs-keyword\\\">int</span>)</span></span> {\\n\\t\\t\\t\\tm := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">map</span>[<span class=\\\"hljs-keyword\\\">int</span>]<span class=\\\"hljs-keyword\\\">struct</span>{})\\n\\t\\t\\t\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> arr1 {\\n\\t\\t\\t\\t\\tm[v] = <span class=\\\"hljs-keyword\\\">struct</span>{}{}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> arr2 {\\n\\t\\t\\t\\t\\t<span class=\\\"hljs-keyword\\\">if</span> _, ok := m[v]; !ok {\\n\\t\\t\\t\\t\\t\\t<span class=\\\"hljs-keyword\\\">continue</span>\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\ttmp2 = <span class=\\\"hljs-built_in\\\">append</span>(tmp2, v)\\n\\t\\t\\t\\t}\\n\\t\\t\\t}(tmp1, array[i+<span class=\\\"hljs-number\\\">2</span>])\\n\\t\\t}\\n\\t\\t<span class=\\\"hljs-keyword\\\">return</span> tmp2\\n\\t}(a, b, c)\\n\\n\\tuniqueResult := <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span><span class=\\\"hljs-params\\\">(arr []<span class=\\\"hljs-keyword\\\">int</span>)</span> []<span class=\\\"hljs-title\\\">int</span></span> {\\n\\t\\tm := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">map</span>[<span class=\\\"hljs-keyword\\\">int</span>]<span class=\\\"hljs-keyword\\\">struct</span>{})\\n\\t\\ttmp := <span class=\\\"hljs-built_in\\\">make</span>([]<span class=\\\"hljs-keyword\\\">int</span>, <span class=\\\"hljs-number\\\">0</span>)\\n\\t\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> arr {\\n\\t\\t\\t<span class=\\\"hljs-keyword\\\">if</span> _, ok := m[v]; !ok {\\n\\t\\t\\t\\tm[v] = <span class=\\\"hljs-keyword\\\">struct</span>{}{}\\n\\t\\t\\t\\ttmp = <span class=\\\"hljs-built_in\\\">append</span>(tmp, v)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t<span class=\\\"hljs-keyword\\\">return</span> tmp\\n\\t}(result)\\n\\n\\tfmt.Println(uniqueResult)\\n}\\n\\n<span class=\\\"hljs-comment\\\">// [3]</span></code></pre><h2>差集合を実装してみる</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\ta := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>}\\n\\tb := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>}\\n\\n\\tresult := <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span><span class=\\\"hljs-params\\\">(arr1, arr2 []<span class=\\\"hljs-keyword\\\">int</span>)</span> []<span class=\\\"hljs-title\\\">int</span></span> {\\n\\t\\tm := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">map</span>[<span class=\\\"hljs-keyword\\\">int</span>]<span class=\\\"hljs-keyword\\\">struct</span>{})\\n\\t\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> arr2 {\\n\\t\\t\\tm[v] = <span class=\\\"hljs-keyword\\\">struct</span>{}{}\\n\\t\\t}\\n\\n\\t\\ttmp := []<span class=\\\"hljs-keyword\\\">int</span>{}\\n\\t\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> arr1 {\\n\\t\\t\\t<span class=\\\"hljs-keyword\\\">if</span> _, ok := m[v]; ok {\\n\\t\\t\\t\\t<span class=\\\"hljs-keyword\\\">continue</span>\\n\\t\\t\\t}\\n\\t\\t\\ttmp = <span class=\\\"hljs-built_in\\\">append</span>(tmp, v)\\n\\t\\t}\\n\\t\\t<span class=\\\"hljs-keyword\\\">return</span> tmp\\n\\t}(a, b)\\n\\n\\tfmt.Println(result)\\n}\\n\\n<span class=\\\"hljs-comment\\\">// [1]</span></code></pre><h2>github.com/golang-collections/collections を使って実装する</h2>\\n<h3>和集合</h3>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\n\\t<span class=\\\"hljs-string\\\">&quot;github.com/golang-collections/collections/set&quot;</span>\\n)\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\ta := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>}\\n\\tb := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">4</span>}\\n\\tc := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">3</span>}\\n\\taSet := set.New()\\n\\tbSet := set.New()\\n\\tcSet := set.New()\\n\\n\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> a {\\n\\t\\taSet.Insert(v)\\n\\t}\\n\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> b {\\n\\t\\tbSet.Insert(v)\\n\\t}\\n\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> c {\\n\\t\\tcSet.Insert(v)\\n\\t}\\n\\n\\tresult := aSet.Union(bSet).Union(cSet)\\n\\tresultArr := []<span class=\\\"hljs-keyword\\\">int</span>{}\\n\\tresult.Do(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span><span class=\\\"hljs-params\\\">(i <span class=\\\"hljs-keyword\\\">interface</span>{})</span></span> { resultArr = <span class=\\\"hljs-built_in\\\">append</span>(resultArr, i.(<span class=\\\"hljs-keyword\\\">int</span>)) })\\n\\tfmt.Println(resultArr)\\n}\\n\\n<span class=\\\"hljs-comment\\\">// [1 2 3 4]</span></code></pre><h2>積集合</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\n\\t<span class=\\\"hljs-string\\\">&quot;github.com/golang-collections/collections/set&quot;</span>\\n)\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\ta := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>}\\n\\tb := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">4</span>}\\n\\tc := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">3</span>}\\n\\taSet := set.New()\\n\\tbSet := set.New()\\n\\tcSet := set.New()\\n\\n\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> a {\\n\\t\\taSet.Insert(v)\\n\\t}\\n\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> b {\\n\\t\\tbSet.Insert(v)\\n\\t}\\n\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> c {\\n\\t\\tcSet.Insert(v)\\n\\t}\\n\\n\\tresult := aSet.Intersection(bSet).Intersection(cSet)\\n\\tresultArr := []<span class=\\\"hljs-keyword\\\">int</span>{}\\n\\tresult.Do(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span><span class=\\\"hljs-params\\\">(i <span class=\\\"hljs-keyword\\\">interface</span>{})</span></span> { resultArr = <span class=\\\"hljs-built_in\\\">append</span>(resultArr, i.(<span class=\\\"hljs-keyword\\\">int</span>)) })\\n\\tfmt.Println(resultArr)\\n}\\n\\n<span class=\\\"hljs-comment\\\">// [3]</span></code></pre><h2>差集合を実装してみる</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\n\\t<span class=\\\"hljs-string\\\">&quot;github.com/golang-collections/collections/set&quot;</span>\\n)\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\ta := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>}\\n\\tb := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>}\\n\\taSet := set.New()\\n\\tbSet := set.New()\\n\\n\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> a {\\n\\t\\taSet.Insert(v)\\n\\t}\\n\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> b {\\n\\t\\tbSet.Insert(v)\\n\\t}\\n\\n\\tresult := aSet.Difference(bSet)\\n\\tresultArr := []<span class=\\\"hljs-keyword\\\">int</span>{}\\n\\tresult.Do(<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span><span class=\\\"hljs-params\\\">(i <span class=\\\"hljs-keyword\\\">interface</span>{})</span></span> { resultArr = <span class=\\\"hljs-built_in\\\">append</span>(resultArr, i.(<span class=\\\"hljs-keyword\\\">int</span>)) })\\n\\n\\tfmt.Println(resultArr)\\n}\\n\\n<span class=\\\"hljs-comment\\\">// [1]</span></code></pre>\",\n  \"dir\": \"articles\",\n  \"base\": \"20210508160959.json\",\n  \"ext\": \".json\",\n  \"sourceBase\": \"20210508160959.md\",\n  \"sourceExt\": \".md\"\n}"}},"__N_SSG":true}