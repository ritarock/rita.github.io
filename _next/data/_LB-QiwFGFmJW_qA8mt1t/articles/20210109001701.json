{"pageProps":{"data":{"id":"20210109001701","fileContents":"{\n  \"title\": \"コマンドいろいろ\",\n  \"date\": 20210109001701,\n  \"tags\": [\n    \"linux\"\n  ],\n  \"bodyContent\": \"[Developer Roadmaps](https://roadmap.sh/roadmaps) にあった DevOps コマンドをまとめておく。\\n\\n## 文字列操作\\n### awk\\n列を抽出する。\\n```bash\\n$ echo 1 2 3 4|awk '{print $1}'\\n1\\n$ echo 1 2 3 4|awk '{print $2}'\\n2\\n```\\n\\n***$0*** だとすべて。\\n```bash\\n$ echo 1 2 3 4|awk '{print $0}'\\n1 2 3 4\\n```\\n\\n区切り文字の指定もできる。\\n```bash\\n$ echo 1:2:3:4|awk -F'[:]' '{print $1}'\\n1\\n```\\n\\n### sed\\n文字列置換。\\n```bash\\n$ cat test.txt\\n1 2 3 4 5\\n$ sed 's/3/333/g' test.txt\\n1 2 333 4 5\\n```\\n\\n### grep\\n文字列検索。\\n```bash\\n$ cat test.txt\\n1\\n2\\n3\\n4\\n5\\n\\n$ cat test.txt | grep 3\\n3\\n```\\n\\n***-v*** は一致しないものを検索する。\\n\\n### sort\\nソートする。\\n```bash\\n$ cat test.txt\\n1\\n12\\n3\\n23\\n55\\n22\\n\\n$ sort test.txt\\n1\\n12\\n22\\n23\\n3\\n55\\n```\\n\\n***-n*** は数値として並べる。\\n```bash\\n$ sort -n test.txt\\n1\\n3\\n12\\n22\\n23\\n55\\n```\\n\\n***-r*** は逆順として並べる。\\n```bash\\n$ sort -n -r test.txt\\n55\\n23\\n22\\n12\\n3\\n1\\n```\\n\\n### uniq\\n重複した行を削除。\\n```bash\\n$ cat test.txt\\n0123456789\\nabcdefghij\\nabcdefghij\\nABCDEFGHIJ\\n9876543210\\n\\n$ uniq test.txt\\n0123456789\\nabcdefghij\\nABCDEFGHIJ\\n9876543210\\n```\\n\\n***-i*** は大文字小文字を無視する。\\n```bash\\n$ uniq -i test.txt\\n0123456789\\nabcdefghij\\n9876543210\\n```\\n\\n### cat\\nファイル出力。\\n```bash\\n$ cat test.txt\\n0123456789\\nabcdefghij\\nabcdefghij\\nABCDEFGHIJ\\n9876543210\\n```\\n\\n### cut\\nawk で良さそう。\\n```bash\\n$ cat test.txt\\n1:2:3\\n4:5:6\\n7:8:9\\n\\n$ cut -f 2 -d \\\":\\\" test.txt\\n2\\n5\\n8\\n```\\n\\n***awk*** でやる場合。\\n```bash\\n$ cat test.txt |awk -F ':' '{print $2}'\\n2\\n5\\n8\\n```\\n\\n### echo\\n文字列を表示する。\\n```bash\\n$ echo 'aaa'\\naaa\\n```\\n\\n### fmt\\n整形。\\n```bash\\n$ cat test.txt\\n1 2 3\\n4 5 6\\n7 8 9\\n\\n$ fmt test.txt\\n1 2 3 4 5 6 7 8 9\\n```\\n\\n### tr\\n文字の変換、削除する。\\n```bash\\n$ cat test.txt\\n12345\\nabcde\\nABCDE\\n\\n$ cat test.txt | tr abc XYZ\\n12345\\nXYZde\\nABCDE\\n\\n$ cat test.txt | tr -d 123\\n45\\nabcde\\nABCDE\\n```\\n\\n### nl\\n行数表示できる。\\n```bash\\n$ nl test.txt\\n     1 12345\\n     2 abcde\\n     3 ABCDE\\n```\\n\\ncat でやるなら ***-b*** を使う。\\n```bash\\n$ cat -b test.txt\\n     1 12345\\n     2 abcde\\n     3 ABCDE\\n```\\n\\n### egrep\\n***grep -E*** と同じ意味。\\n\\n拡張正規表現ってのが使える。普通の正規表現と何が違うかはよくわからない。\\n```bash\\n$ cat test.txt\\n12345\\nbar\\nfoo\\n\\n$ grep -E '^(bar|foo)' test.txt\\nbar\\nfoo\\n```\\n\\n### fgrep\\n***grep -F*** と同じ意味。\\n\\n正規表現文字をそのまま検索できる。\\n```bash\\n$ cat test.txt\\n12345\\nbar.foo\\n\\n$ grep -F 'bar.foo' test.txt\\nbar.foo\\n```\\n\\n### wc\\n行数、単語数を数える。\\n```bash\\n$ cat test.txt\\nHello World!\\n```\\n\\n***-m*** は文字数を数える。\\n```bash\\n$ wc -m test.txt\\n      13 test.txt\\n```\\n\\n***-w*** は単語数を数える。\\n```bash\\n$ wc -w test.txt\\n       2 test.txt\\n```\\n\\n## プロセス管理\\n### ps\\n全プロセスを表示する。\\n```bash\\n$ ps aux\\n```\\n\\n### top\\nプロセス、CPU、メモリを表示。\\n\\nデフォルトだと CPU 使用率順にソート。\\n\\n***-a*** でメモリ使用順にソート。\\n\\n### htop\\ntop より見やすい。\\n\\nShift + P で CPU 使用率、Shift + M でメモリ使用率順。\\n\\n### atop\\ntop コマンドの代替。\\n\\nhtop のほうが良さそう。\\n\\n### lsof\\n特定のポート番号を待ち受けているか、もしくはファイルを読み込んでいるかを調べるとき。\\n\\n80 番ポートで実行中のプロセスを調べる。\\n```bash\\n$ lsof -i:80 -P\\n```\\n\\n特定のファイルを開いているプロセスを調べる。\\n```bash\\n$ lsof <FILE>\\n```\\n\\nコマンドを指定する。\\n```bash\\n$ lsof -c <COMMAND>\\n```\\n\\n## ネットワーク\\n### nmap\\nサーバの開いているポートを調べる。\\n```bash\\n$ nmap <SERVER>\\n```\\n\\n### tcpdump\\nパケットをキャプチャする。\\n\\nホストを指定してキャプチャする。\\n```bash\\n$ tcpdump host <HOST>\\n```\\n\\nport を指定する。\\n```bash\\n$ tcpdump host <HOST> and port 22\\n$ tcpdump host <HOST> or port 22\\n```\\n\\n### ping\\nパケットを送信して通信を確認。\\n\\n### traceroute\\n経路と応答を調べる。\\n\\n***<TARGET>*** までの経路と応答を調べる。\\n```bash\\n$ traceroute <TARGET>\\n```\\n\\n### mtr\\n経路と応答を調べる。\\ntraceroute とだいたい同じ。\\n\\n### dig\\nドメイン名に対する IP を調べる。\\n```bash\\n$ dig www.google.co.jp\\n```\\n\\n### netstat\\nネットワーク関連の情報を表示。\\n\\n***-r*** でルーティングテーブルを表示する。\\n\\n## システムパフォーマンス\\n### nmon\\nOS のベンチマークをとったりできる。\\n\\n### iostat\\nCPU 使用率と I/O デバイスの使用状況を調べる。\\n\\n### sar\\nメモリ、プロセス、スワップ、ディスク I/O、ネットワーク、ロードアベレージ、CPU 等の統計情報を調べる。\\n\\n### vmstat\\n仮想メモリや CPU、ディスク I/O の統計情報を調べる。\\n\\n## その他\\n### strace\\n実行コマンドをトレースする。\\n```bash\\n$ strace ls\\n```\\n\\n### uname\\nカーネル名を表示。\\n\\n***-a*** で全ての情報を表示する。\\n```bash\\n$ uname -a\\n```\\n\\n### df\\nディスクの空き容量を調べる。\\n\\n***-h*** で読みやすく表示。\\n```bash\\n$ df -h\\n```\\n\\n### history\\nコマンドの履歴を表示。\\n\\n***-d*** で指定した番号の履歴を削除する。\\n```bash\\n$ history -d 10\\n```\",\n  \"bodyHtml\": \"<p><a href=\\\"https://roadmap.sh/roadmaps\\\">Developer Roadmaps</a> にあった DevOps コマンドをまとめておく。</p>\\n<h2>文字列操作</h2>\\n<h3>awk</h3>\\n<p>列を抽出する。</p>\\n<pre><code class=\\\"hljs\\\">$ <span class=\\\"hljs-built_in\\\">echo</span> 1 2 3 4|awk <span class=\\\"hljs-string\\\">&#x27;{print $1}&#x27;</span>\\n1\\n$ <span class=\\\"hljs-built_in\\\">echo</span> 1 2 3 4|awk <span class=\\\"hljs-string\\\">&#x27;{print $2}&#x27;</span>\\n2</code></pre><p><em><strong>$0</strong></em> だとすべて。</p>\\n<pre><code class=\\\"hljs\\\">$ <span class=\\\"hljs-built_in\\\">echo</span> 1 2 3 4|awk <span class=\\\"hljs-string\\\">&#x27;{print $0}&#x27;</span>\\n1 2 3 4</code></pre><p>区切り文字の指定もできる。</p>\\n<pre><code class=\\\"hljs\\\">$ <span class=\\\"hljs-built_in\\\">echo</span> 1:2:3:4|awk -F<span class=\\\"hljs-string\\\">&#x27;[:]&#x27;</span> <span class=\\\"hljs-string\\\">&#x27;{print $1}&#x27;</span>\\n1</code></pre><h3>sed</h3>\\n<p>文字列置換。</p>\\n<pre><code class=\\\"hljs\\\">$ cat test.txt\\n1 2 3 4 5\\n$ sed <span class=\\\"hljs-string\\\">&#x27;s/3/333/g&#x27;</span> test.txt\\n1 2 333 4 5</code></pre><h3>grep</h3>\\n<p>文字列検索。</p>\\n<pre><code class=\\\"hljs\\\">$ cat test.txt\\n1\\n2\\n3\\n4\\n5\\n\\n$ cat test.txt | grep 3\\n3</code></pre><p><em><strong>-v</strong></em> は一致しないものを検索する。</p>\\n<h3>sort</h3>\\n<p>ソートする。</p>\\n<pre><code class=\\\"hljs\\\">$ cat test.txt\\n1\\n12\\n3\\n23\\n55\\n22\\n\\n$ sort test.txt\\n1\\n12\\n22\\n23\\n3\\n55</code></pre><p><em><strong>-n</strong></em> は数値として並べる。</p>\\n<pre><code class=\\\"hljs\\\">$ sort -n test.txt\\n1\\n3\\n12\\n22\\n23\\n55</code></pre><p><em><strong>-r</strong></em> は逆順として並べる。</p>\\n<pre><code class=\\\"hljs\\\">$ sort -n -r test.txt\\n55\\n23\\n22\\n12\\n3\\n1</code></pre><h3>uniq</h3>\\n<p>重複した行を削除。</p>\\n<pre><code class=\\\"hljs\\\">$ cat test.txt\\n0123456789\\nabcdefghij\\nabcdefghij\\nABCDEFGHIJ\\n9876543210\\n\\n$ uniq test.txt\\n0123456789\\nabcdefghij\\nABCDEFGHIJ\\n9876543210</code></pre><p><em><strong>-i</strong></em> は大文字小文字を無視する。</p>\\n<pre><code class=\\\"hljs\\\">$ uniq -i test.txt\\n0123456789\\nabcdefghij\\n9876543210</code></pre><h3>cat</h3>\\n<p>ファイル出力。</p>\\n<pre><code class=\\\"hljs\\\">$ cat test.txt\\n0123456789\\nabcdefghij\\nabcdefghij\\nABCDEFGHIJ\\n9876543210</code></pre><h3>cut</h3>\\n<p>awk で良さそう。</p>\\n<pre><code class=\\\"hljs\\\">$ cat test.txt\\n1:2:3\\n4:5:6\\n7:8:9\\n\\n$ cut -f 2 -d <span class=\\\"hljs-string\\\">&quot;:&quot;</span> test.txt\\n2\\n5\\n8</code></pre><p><em><strong>awk</strong></em> でやる場合。</p>\\n<pre><code class=\\\"hljs\\\">$ cat test.txt |awk -F <span class=\\\"hljs-string\\\">&#x27;:&#x27;</span> <span class=\\\"hljs-string\\\">&#x27;{print $2}&#x27;</span>\\n2\\n5\\n8</code></pre><h3>echo</h3>\\n<p>文字列を表示する。</p>\\n<pre><code class=\\\"hljs\\\">$ <span class=\\\"hljs-built_in\\\">echo</span> <span class=\\\"hljs-string\\\">&#x27;aaa&#x27;</span>\\naaa</code></pre><h3>fmt</h3>\\n<p>整形。</p>\\n<pre><code class=\\\"hljs\\\">$ cat test.txt\\n1 2 3\\n4 5 6\\n7 8 9\\n\\n$ fmt test.txt\\n1 2 3 4 5 6 7 8 9</code></pre><h3>tr</h3>\\n<p>文字の変換、削除する。</p>\\n<pre><code class=\\\"hljs\\\">$ cat test.txt\\n12345\\nabcde\\nABCDE\\n\\n$ cat test.txt | tr abc XYZ\\n12345\\nXYZde\\nABCDE\\n\\n$ cat test.txt | tr -d 123\\n45\\nabcde\\nABCDE</code></pre><h3>nl</h3>\\n<p>行数表示できる。</p>\\n<pre><code class=\\\"hljs\\\">$ nl test.txt\\n     1 12345\\n     2 abcde\\n     3 ABCDE</code></pre><p>cat でやるなら <em><strong>-b</strong></em> を使う。</p>\\n<pre><code class=\\\"hljs\\\">$ cat -b test.txt\\n     1 12345\\n     2 abcde\\n     3 ABCDE</code></pre><h3>egrep</h3>\\n<p><em><strong>grep -E</strong></em> と同じ意味。</p>\\n<p>拡張正規表現ってのが使える。普通の正規表現と何が違うかはよくわからない。</p>\\n<pre><code class=\\\"hljs\\\">$ cat test.txt\\n12345\\nbar\\nfoo\\n\\n$ grep -E <span class=\\\"hljs-string\\\">&#x27;^(bar|foo)&#x27;</span> test.txt\\nbar\\nfoo</code></pre><h3>fgrep</h3>\\n<p><em><strong>grep -F</strong></em> と同じ意味。</p>\\n<p>正規表現文字をそのまま検索できる。</p>\\n<pre><code class=\\\"hljs\\\">$ cat test.txt\\n12345\\nbar.foo\\n\\n$ grep -F <span class=\\\"hljs-string\\\">&#x27;bar.foo&#x27;</span> test.txt\\nbar.foo</code></pre><h3>wc</h3>\\n<p>行数、単語数を数える。</p>\\n<pre><code class=\\\"hljs\\\">$ cat test.txt\\nHello World!</code></pre><p><em><strong>-m</strong></em> は文字数を数える。</p>\\n<pre><code class=\\\"hljs\\\">$ wc -m test.txt\\n      13 test.txt</code></pre><p><em><strong>-w</strong></em> は単語数を数える。</p>\\n<pre><code class=\\\"hljs\\\">$ wc -w test.txt\\n       2 test.txt</code></pre><h2>プロセス管理</h2>\\n<h3>ps</h3>\\n<p>全プロセスを表示する。</p>\\n<pre><code class=\\\"hljs\\\">$ ps aux</code></pre><h3>top</h3>\\n<p>プロセス、CPU、メモリを表示。</p>\\n<p>デフォルトだと CPU 使用率順にソート。</p>\\n<p><em><strong>-a</strong></em> でメモリ使用順にソート。</p>\\n<h3>htop</h3>\\n<p>top より見やすい。</p>\\n<p>Shift + P で CPU 使用率、Shift + M でメモリ使用率順。</p>\\n<h3>atop</h3>\\n<p>top コマンドの代替。</p>\\n<p>htop のほうが良さそう。</p>\\n<h3>lsof</h3>\\n<p>特定のポート番号を待ち受けているか、もしくはファイルを読み込んでいるかを調べるとき。</p>\\n<p>80 番ポートで実行中のプロセスを調べる。</p>\\n<pre><code class=\\\"hljs\\\">$ lsof -i:80 -P</code></pre><p>特定のファイルを開いているプロセスを調べる。</p>\\n<pre><code class=\\\"hljs\\\">$ lsof &lt;FILE&gt;</code></pre><p>コマンドを指定する。</p>\\n<pre><code class=\\\"hljs\\\">$ lsof -c &lt;COMMAND&gt;</code></pre><h2>ネットワーク</h2>\\n<h3>nmap</h3>\\n<p>サーバの開いているポートを調べる。</p>\\n<pre><code class=\\\"hljs\\\">$ nmap &lt;SERVER&gt;</code></pre><h3>tcpdump</h3>\\n<p>パケットをキャプチャする。</p>\\n<p>ホストを指定してキャプチャする。</p>\\n<pre><code class=\\\"hljs\\\">$ tcpdump host &lt;HOST&gt;</code></pre><p>port を指定する。</p>\\n<pre><code class=\\\"hljs\\\">$ tcpdump host &lt;HOST&gt; and port 22\\n$ tcpdump host &lt;HOST&gt; or port 22</code></pre><h3>ping</h3>\\n<p>パケットを送信して通信を確認。</p>\\n<h3>traceroute</h3>\\n<p>経路と応答を調べる。</p>\\n<p><em><strong>&lt;TARGET&gt;</strong></em> までの経路と応答を調べる。</p>\\n<pre><code class=\\\"hljs\\\">$ traceroute &lt;TARGET&gt;</code></pre><h3>mtr</h3>\\n<p>経路と応答を調べる。\\ntraceroute とだいたい同じ。</p>\\n<h3>dig</h3>\\n<p>ドメイン名に対する IP を調べる。</p>\\n<pre><code class=\\\"hljs\\\">$ dig www.google.co.jp</code></pre><h3>netstat</h3>\\n<p>ネットワーク関連の情報を表示。</p>\\n<p><em><strong>-r</strong></em> でルーティングテーブルを表示する。</p>\\n<h2>システムパフォーマンス</h2>\\n<h3>nmon</h3>\\n<p>OS のベンチマークをとったりできる。</p>\\n<h3>iostat</h3>\\n<p>CPU 使用率と I/O デバイスの使用状況を調べる。</p>\\n<h3>sar</h3>\\n<p>メモリ、プロセス、スワップ、ディスク I/O、ネットワーク、ロードアベレージ、CPU 等の統計情報を調べる。</p>\\n<h3>vmstat</h3>\\n<p>仮想メモリや CPU、ディスク I/O の統計情報を調べる。</p>\\n<h2>その他</h2>\\n<h3>strace</h3>\\n<p>実行コマンドをトレースする。</p>\\n<pre><code class=\\\"hljs\\\">$ strace ls</code></pre><h3>uname</h3>\\n<p>カーネル名を表示。</p>\\n<p><em><strong>-a</strong></em> で全ての情報を表示する。</p>\\n<pre><code class=\\\"hljs\\\">$ uname -a</code></pre><h3>df</h3>\\n<p>ディスクの空き容量を調べる。</p>\\n<p><em><strong>-h</strong></em> で読みやすく表示。</p>\\n<pre><code class=\\\"hljs\\\">$ df -h</code></pre><h3>history</h3>\\n<p>コマンドの履歴を表示。</p>\\n<p><em><strong>-d</strong></em> で指定した番号の履歴を削除する。</p>\\n<pre><code class=\\\"hljs\\\">$ <span class=\\\"hljs-built_in\\\">history</span> -d 10</code></pre>\",\n  \"dir\": \"articles\",\n  \"base\": \"20210109001701.json\",\n  \"ext\": \".json\",\n  \"sourceBase\": \"20210109001701.md\",\n  \"sourceExt\": \".md\"\n}"}},"__N_SSG":true}