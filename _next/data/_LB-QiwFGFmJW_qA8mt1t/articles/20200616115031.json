{"pageProps":{"data":{"id":"20200616115031","fileContents":"{\n  \"title\": \"JavaScript の call / apply / bind\",\n  \"date\": 20200616115031,\n  \"tags\": [\n    \"javascript\"\n  ],\n  \"bodyContent\": \"結局公式が一番わかりやすかった。\\n\\n## apply\\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\\n\\n> \\\\> apply() メソッドは与えられた this 参照値と、配列 (もしくは配列風のオブジェクト) の形で与えられた引数を用いて関数を呼び出します。\\n\\napply は配列を受け取る。\\n\\n```js\\n// this 参照値と、配列 (もしくは配列風のオブジェクト) の形で与えられた引数を用いて関数を呼び出します。\\nconst numbers = [5, 6, 2, 3, 7];\\n\\nconst max = Math.max.apply(null, numbers); // 7\\n\\nconsole.log(max);\\n\\nconst min = Math.min.apply(null, numbers); // 2\\n\\nconsole.log(min);\\n```\\n\\n## call\\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/call\\n\\n> \\\\> このメソッドの構文は apply() とほぼ同じですが、基本的な違いは call() が引数リストを受け取るのに対して、 apply() は引数の単一の配列を受け取る点です。\\n\\n```js\\n// this の値と、独立して提供された引数によって関数を呼び出します。\\nfunction Product(name, price) {\\n  this.name = name;\\n  this.price = price;\\n}\\n\\nfunction Food(name, price) {\\n  Product.call(this, name, price);\\n  this.category = 'food';\\n}\\n\\nconsole.log(new Food('cheese', 5).name); // \\\"cheese\\\"\\nconsole.log(JSON.stringify(new Food('cheese', 5))); // \\\"{\\\"name\\\":\\\"cheese\\\",\\\"price\\\":5,\\\"category\\\":\\\"food\\\"}\\\"\\n```\\n\\n## bind\\nhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\\n\\n> \\\\> bind() メソッドは、呼び出された際に this キーワードに指定された値が設定される新しい関数を生成します。この値は新しい関数が呼び出されたとき、一連の引数の前に置かれます。\\n\\n関数が返って来るから実行のときは()をつけてあげないといけない。もしくは call で呼び出す。\\n\\n```js\\nconst module = {\\n  x: 42,\\n  getX: function() {\\n    return this.x;\\n  }\\n};\\n\\nconst unboundGetX = module.getX;\\nconsole.log(unboundGetX()); // undefined\\n\\nconst boundGetX = unboundGetX.bind(module);\\nconsole.log(boundGetX()); // 42\\n\\n// call で呼び出すとき\\nconst callGetX = unboundGetX.call(module);\\nconsole.log(boundGetX); // 42\\n```\",\n  \"bodyHtml\": \"<p>結局公式が一番わかりやすかった。</p>\\n<h2>apply</h2>\\n<p>https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/apply</p>\\n<blockquote>\\n<p>&gt; apply() メソッドは与えられた this 参照値と、配列 (もしくは配列風のオブジェクト) の形で与えられた引数を用いて関数を呼び出します。</p>\\n</blockquote>\\n<p>apply は配列を受け取る。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-comment\\\">// this 参照値と、配列 (もしくは配列風のオブジェクト) の形で与えられた引数を用いて関数を呼び出します。</span>\\n<span class=\\\"hljs-keyword\\\">const</span> numbers = [<span class=\\\"hljs-number\\\">5</span>, <span class=\\\"hljs-number\\\">6</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">7</span>];\\n\\n<span class=\\\"hljs-keyword\\\">const</span> max = <span class=\\\"hljs-built_in\\\">Math</span>.max.apply(<span class=\\\"hljs-literal\\\">null</span>, numbers); <span class=\\\"hljs-comment\\\">// 7</span>\\n\\n<span class=\\\"hljs-built_in\\\">console</span>.log(max);\\n\\n<span class=\\\"hljs-keyword\\\">const</span> min = <span class=\\\"hljs-built_in\\\">Math</span>.min.apply(<span class=\\\"hljs-literal\\\">null</span>, numbers); <span class=\\\"hljs-comment\\\">// 2</span>\\n\\n<span class=\\\"hljs-built_in\\\">console</span>.log(min);</code></pre><h2>call</h2>\\n<p>https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/call</p>\\n<blockquote>\\n<p>&gt; このメソッドの構文は apply() とほぼ同じですが、基本的な違いは call() が引数リストを受け取るのに対して、 apply() は引数の単一の配列を受け取る点です。</p>\\n</blockquote>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-comment\\\">// this の値と、独立して提供された引数によって関数を呼び出します。</span>\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title\\\">Product</span>(<span class=\\\"hljs-params\\\">name, price</span>) </span>{\\n  <span class=\\\"hljs-built_in\\\">this</span>.name = name;\\n  <span class=\\\"hljs-built_in\\\">this</span>.price = price;\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title\\\">Food</span>(<span class=\\\"hljs-params\\\">name, price</span>) </span>{\\n  Product.call(<span class=\\\"hljs-built_in\\\">this</span>, name, price);\\n  <span class=\\\"hljs-built_in\\\">this</span>.category = <span class=\\\"hljs-string\\\">&#x27;food&#x27;</span>;\\n}\\n\\n<span class=\\\"hljs-built_in\\\">console</span>.log(<span class=\\\"hljs-keyword\\\">new</span> Food(<span class=\\\"hljs-string\\\">&#x27;cheese&#x27;</span>, <span class=\\\"hljs-number\\\">5</span>).name); <span class=\\\"hljs-comment\\\">// &quot;cheese&quot;</span>\\n<span class=\\\"hljs-built_in\\\">console</span>.log(<span class=\\\"hljs-built_in\\\">JSON</span>.stringify(<span class=\\\"hljs-keyword\\\">new</span> Food(<span class=\\\"hljs-string\\\">&#x27;cheese&#x27;</span>, <span class=\\\"hljs-number\\\">5</span>))); <span class=\\\"hljs-comment\\\">// &quot;{&quot;name&quot;:&quot;cheese&quot;,&quot;price&quot;:5,&quot;category&quot;:&quot;food&quot;}&quot;</span></code></pre><h2>bind</h2>\\n<p>https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind</p>\\n<blockquote>\\n<p>&gt; bind() メソッドは、呼び出された際に this キーワードに指定された値が設定される新しい関数を生成します。この値は新しい関数が呼び出されたとき、一連の引数の前に置かれます。</p>\\n</blockquote>\\n<p>関数が返って来るから実行のときは()をつけてあげないといけない。もしくは call で呼び出す。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">const</span> <span class=\\\"hljs-built_in\\\">module</span> = {\\n  <span class=\\\"hljs-attr\\\">x</span>: <span class=\\\"hljs-number\\\">42</span>,\\n  <span class=\\\"hljs-attr\\\">getX</span>: <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\"></span>) </span>{\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-built_in\\\">this</span>.x;\\n  }\\n};\\n\\n<span class=\\\"hljs-keyword\\\">const</span> unboundGetX = <span class=\\\"hljs-built_in\\\">module</span>.getX;\\n<span class=\\\"hljs-built_in\\\">console</span>.log(unboundGetX()); <span class=\\\"hljs-comment\\\">// undefined</span>\\n\\n<span class=\\\"hljs-keyword\\\">const</span> boundGetX = unboundGetX.bind(<span class=\\\"hljs-built_in\\\">module</span>);\\n<span class=\\\"hljs-built_in\\\">console</span>.log(boundGetX()); <span class=\\\"hljs-comment\\\">// 42</span>\\n\\n<span class=\\\"hljs-comment\\\">// call で呼び出すとき</span>\\n<span class=\\\"hljs-keyword\\\">const</span> callGetX = unboundGetX.call(<span class=\\\"hljs-built_in\\\">module</span>);\\n<span class=\\\"hljs-built_in\\\">console</span>.log(boundGetX); <span class=\\\"hljs-comment\\\">// 42</span></code></pre>\",\n  \"dir\": \"articles\",\n  \"base\": \"20200616115031.json\",\n  \"ext\": \".json\",\n  \"sourceBase\": \"20200616115031.md\",\n  \"sourceExt\": \".md\"\n}"}},"__N_SSG":true}