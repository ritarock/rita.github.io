{"pageProps":{"data":{"id":"20210702182520","fileContents":"{\n  \"title\": \"Go のコマンド\",\n  \"date\": 20210702182520,\n  \"tags\": [\n    \"golang\"\n  ],\n  \"bodyContent\": \"使うたびにググっていたので.\\n## go build\\nソースコードのコンパイルを行う.\\n- 通常のパッケージの場合, `go build` を行ったあとは何もファイルを生成しない\\n- main パッケージの場合, `go build` を行ったあとはカレントディレクトリ直下にバイナリファイルが生成される\\n- `go build` は通常,カレントディレクトリにあるすべての go ファイルをコンパイルする.ファイル名を指定することで,単一ファイルのみコンパイルできる\\n- `-o` オプションでコンパイル後に生成されるファイル名を指定できる.デフォルトだとパッケージ名になる\\n- `go build` は `_` , `.` で始まるファイルは無視する\\n- `-v** オプションは,コンパイル中のパッケージ名を出力する\\n\\n## go fmt\\nファイルの整形.\\n\\n## go get\\nリモートパッケージを取得する.正確には,パッケージのダウンロードしてから, `go install` を行う.\\n- `-d` オプションは,ダウンロードのみでインストールは行わない\\n- `-u` オプションは,パッケージとその依存パッケージを更新する\\n- `-f` オプションは, `-u` を使うときのみ有効で, import 内の各パッケージが取得されているか検証しない.ローカルにフォークしたパッケージを使いたいときなどに使う\\n\\n## go install\\n`go build` して生成されたバイナリファイルを `$HOME/bin` に移動している.\\n\\n## go test\\nカレントディレクトリ配下のすべての `\\\\*.test.go` ファイルのテストを行う.\\n- `-cover` はテストカバー率を表示する\\n\\n## go generate\\n`go build` 前にコードを自動で生成する場合に使用する.\\n\\n## go mod\\n依存モジュールの検知,バージョン固定,バージョンアップ検知ができる.\\n- `go mod init` で初期化する\\n- `go build` で依存モジュールを自動インストールする\\n- `go get` で依存モジュールの追加やバージョンアップを行う\\n- `go mod tidy` で使われていないモジュールを削除する\",\n  \"bodyHtml\": \"<p>使うたびにググっていたので.</p>\\n<h2>go build</h2>\\n<p>ソースコードのコンパイルを行う.</p>\\n<ul>\\n<li>通常のパッケージの場合, <code>go build</code> を行ったあとは何もファイルを生成しない</li>\\n<li>main パッケージの場合, <code>go build</code> を行ったあとはカレントディレクトリ直下にバイナリファイルが生成される</li>\\n<li><code>go build</code> は通常,カレントディレクトリにあるすべての go ファイルをコンパイルする.ファイル名を指定することで,単一ファイルのみコンパイルできる</li>\\n<li><code>-o</code> オプションでコンパイル後に生成されるファイル名を指定できる.デフォルトだとパッケージ名になる</li>\\n<li><code>go build</code> は <code>_</code> , <code>.</code> で始まるファイルは無視する</li>\\n<li>`-v** オプションは,コンパイル中のパッケージ名を出力する</li>\\n</ul>\\n<h2>go fmt</h2>\\n<p>ファイルの整形.</p>\\n<h2>go get</h2>\\n<p>リモートパッケージを取得する.正確には,パッケージのダウンロードしてから, <code>go install</code> を行う.</p>\\n<ul>\\n<li><code>-d</code> オプションは,ダウンロードのみでインストールは行わない</li>\\n<li><code>-u</code> オプションは,パッケージとその依存パッケージを更新する</li>\\n<li><code>-f</code> オプションは, <code>-u</code> を使うときのみ有効で, import 内の各パッケージが取得されているか検証しない.ローカルにフォークしたパッケージを使いたいときなどに使う</li>\\n</ul>\\n<h2>go install</h2>\\n<p><code>go build</code> して生成されたバイナリファイルを <code>$HOME/bin</code> に移動している.</p>\\n<h2>go test</h2>\\n<p>カレントディレクトリ配下のすべての <code>\\\\*.test.go</code> ファイルのテストを行う.</p>\\n<ul>\\n<li><code>-cover</code> はテストカバー率を表示する</li>\\n</ul>\\n<h2>go generate</h2>\\n<p><code>go build</code> 前にコードを自動で生成する場合に使用する.</p>\\n<h2>go mod</h2>\\n<p>依存モジュールの検知,バージョン固定,バージョンアップ検知ができる.</p>\\n<ul>\\n<li><code>go mod init</code> で初期化する</li>\\n<li><code>go build</code> で依存モジュールを自動インストールする</li>\\n<li><code>go get</code> で依存モジュールの追加やバージョンアップを行う</li>\\n<li><code>go mod tidy</code> で使われていないモジュールを削除する</li>\\n</ul>\\n\",\n  \"dir\": \"articles\",\n  \"base\": \"20210702182520.json\",\n  \"ext\": \".json\",\n  \"sourceBase\": \"20210702182520.md\",\n  \"sourceExt\": \".md\"\n}"}},"__N_SSG":true}