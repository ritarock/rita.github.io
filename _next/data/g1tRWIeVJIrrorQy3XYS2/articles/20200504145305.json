{"pageProps":{"data":{"id":"20200504145305","fileContents":"{\n  \"title\": \"Golang で atcorder の入出力とか繰り返しとか\",\n  \"date\": 20200504145305,\n  \"tags\": [\n    \"golang\"\n  ],\n  \"bodyContent\": \"## 入出力\\n### 単一数値,文字\\n```go\\nvar N int\\nfmt.Scan(&N)\\nfmt.Println(N)\\n\\nvar s string\\nfmt.Scan(&s)\\nfmt.Println(s)\\n```\\n\\n### 文字列,数列群をスライスで返す\\n```go\\nfunc scanStrings(len int) []string {\\n  var str string\\n  var strs []string\\n  for i := 0; i < len; i++ {\\n    fmt.Scanf(\\\"%s\\\", &str)\\n    strs = append(strs, str)\\n  }\\n  return strings\\n}\\n\\nfunc scanNums(len int) []int {\\n  var num int\\n  var nums []int\\n  for i := 0; i < len; i ++ {\\n    fmt.Scan(&num)\\n    nums = append(nums, num)\\n  }\\n  return nums\\n}\\n```\\n\\n### 与えられた列をスライスで返す\\n```go\\nn := 3\\narr := make([]int, n)\\n\\nfor i:= 0; i < n; i ++ {\\n  fmt.Scan(&arr[i])\\n}\\n```\\n\\n## n 回繰り返す\\n```go\\nn := 3\\n\\nfor range(make([]int, n)) {\\n  // 処理\\n}\\n```\",\n  \"bodyHtml\": \"<h2>入出力</h2>\\n<h3>単一数値,文字</h3>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">var</span> N <span class=\\\"hljs-keyword\\\">int</span>\\nfmt.Scan(&amp;N)\\nfmt.Println(N)\\n\\n<span class=\\\"hljs-keyword\\\">var</span> s <span class=\\\"hljs-keyword\\\">string</span>\\nfmt.Scan(&amp;s)\\nfmt.Println(s)</code></pre><h3>文字列,数列群をスライスで返す</h3>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">scanStrings</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-built_in\\\">len</span> <span class=\\\"hljs-keyword\\\">int</span>)</span> []<span class=\\\"hljs-title\\\">string</span></span> {\\n  <span class=\\\"hljs-keyword\\\">var</span> str <span class=\\\"hljs-keyword\\\">string</span>\\n  <span class=\\\"hljs-keyword\\\">var</span> strs []<span class=\\\"hljs-keyword\\\">string</span>\\n  <span class=\\\"hljs-keyword\\\">for</span> i := <span class=\\\"hljs-number\\\">0</span>; i &lt; <span class=\\\"hljs-built_in\\\">len</span>; i++ {\\n    fmt.Scanf(<span class=\\\"hljs-string\\\">&quot;%s&quot;</span>, &amp;str)\\n    strs = <span class=\\\"hljs-built_in\\\">append</span>(strs, str)\\n  }\\n  <span class=\\\"hljs-keyword\\\">return</span> strings\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">scanNums</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-built_in\\\">len</span> <span class=\\\"hljs-keyword\\\">int</span>)</span> []<span class=\\\"hljs-title\\\">int</span></span> {\\n  <span class=\\\"hljs-keyword\\\">var</span> num <span class=\\\"hljs-keyword\\\">int</span>\\n  <span class=\\\"hljs-keyword\\\">var</span> nums []<span class=\\\"hljs-keyword\\\">int</span>\\n  <span class=\\\"hljs-keyword\\\">for</span> i := <span class=\\\"hljs-number\\\">0</span>; i &lt; <span class=\\\"hljs-built_in\\\">len</span>; i ++ {\\n    fmt.Scan(&amp;num)\\n    nums = <span class=\\\"hljs-built_in\\\">append</span>(nums, num)\\n  }\\n  <span class=\\\"hljs-keyword\\\">return</span> nums\\n}</code></pre><h3>与えられた列をスライスで返す</h3>\\n<pre><code class=\\\"hljs\\\">n := <span class=\\\"hljs-number\\\">3</span>\\narr := <span class=\\\"hljs-built_in\\\">make</span>([]<span class=\\\"hljs-keyword\\\">int</span>, n)\\n\\n<span class=\\\"hljs-keyword\\\">for</span> i:= <span class=\\\"hljs-number\\\">0</span>; i &lt; n; i ++ {\\n  fmt.Scan(&amp;arr[i])\\n}</code></pre><h2>n 回繰り返す</h2>\\n<pre><code class=\\\"hljs\\\">n := <span class=\\\"hljs-number\\\">3</span>\\n\\n<span class=\\\"hljs-keyword\\\">for</span> <span class=\\\"hljs-keyword\\\">range</span>(<span class=\\\"hljs-built_in\\\">make</span>([]<span class=\\\"hljs-keyword\\\">int</span>, n)) {\\n  <span class=\\\"hljs-comment\\\">// 処理</span>\\n}</code></pre>\",\n  \"dir\": \"articles\",\n  \"base\": \"20200504145305.json\",\n  \"ext\": \".json\",\n  \"sourceBase\": \"20200504145305.md\",\n  \"sourceExt\": \".md\"\n}"}},"__N_SSG":true}