{"pageProps":{"data":{"id":"20210718124235","fileContents":"{\n  \"title\": \"Golang で json を操作する\",\n  \"date\": 20210718124235,\n  \"tags\": [\n    \"golang\"\n  ],\n  \"bodyContent\": \"## JSON の解析\\n今回使う JSON ファイル。\\n```json\\n{\\n  \\\"id\\\": 1,\\n  \\\"content\\\": \\\"Hello\\\",\\n  \\\"author\\\": {\\n    \\\"id\\\": 1,\\n    \\\"name\\\": \\\"author1\\\"\\n  },\\n  \\\"comments\\\": [\\n    {\\n      \\\"id\\\": 1,\\n      \\\"content\\\": \\\"comment1\\\",\\n      \\\"author\\\": \\\"author2\\\"\\n    },\\n    {\\n      \\\"id\\\": 2,\\n      \\\"content\\\": \\\"comment2\\\",\\n      \\\"author\\\": \\\"author3\\\"\\n    }\\n  ]\\n}\\n\\n```\\n\\n### Unmarshal を使う\\n文字列データの場合は Unmarshal を使う。\\n\\n- 構造体を定義\\n- JSON を構造体に格納\\n\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"encoding/json\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"io/ioutil\\\"\\n\\t\\\"os\\\"\\n)\\n\\ntype Post struct {\\n\\tId      int    `json:\\\"id\\\"`\\n\\tContent string `json:\\\"content\\\"`\\n\\tAuthor  struct {\\n\\t\\tId   int    `json:\\\"id\\\"`\\n\\t\\tName string `json:\\\"name\\\"`\\n\\t} `json:\\\"author\\\"`\\n\\tComments []struct {\\n\\t\\tId      int    `json:\\\"id\\\"`\\n\\t\\tContent string `json:\\\"content\\\"`\\n\\t\\tAuthor  string `json:\\\"author\\\"`\\n\\t} `json:\\\"comments\\\"`\\n}\\n\\nfunc main() {\\n\\tjsonFile, err := os.Open(\\\"file.json\\\")\\n\\tif err != nil {\\n\\t\\tfmt.Println(err)\\n\\t\\treturn\\n\\t}\\n\\tdefer jsonFile.Close()\\n\\n\\tjsonData, err := ioutil.ReadAll(jsonFile)\\n\\tif err != nil {\\n\\t\\tfmt.Println(err)\\n\\t\\treturn\\n\\t}\\n\\n\\tvar post Post\\n\\tjson.Unmarshal(jsonData, &post)\\n\\tfmt.Println(post) // {1 Hello {0 author1} [{1 comment1 author2} {2 comment2 author3}]}\\n}\\n```\\n\\n### デコーダを使う\\nhttp.Request の Body のように ***io.Reader*** のストリームからデータが入ってくる場合に使う。\\n\\n- 構造体を定義\\n- デコーダを作成する\\n- JSON を順次処理してデコードする\\n\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"encoding/json\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"io\\\"\\n\\t\\\"os\\\"\\n)\\n\\ntype Post struct {\\n\\tId      int    `json:\\\"id\\\"`\\n\\tContent string `json:\\\"content\\\"`\\n\\tAuthor  struct {\\n\\t\\tId   int    `json:\\\"id\\\"`\\n\\t\\tName string `json:\\\"name\\\"`\\n\\t} `json:\\\"author\\\"`\\n\\tComments []struct {\\n\\t\\tId      int    `json:\\\"id\\\"`\\n\\t\\tContent string `json:\\\"content\\\"`\\n\\t\\tAuthor  string `json:\\\"author\\\"`\\n\\t} `json:\\\"comments\\\"`\\n}\\n\\nfunc main() {\\n\\tjsonFile, err := os.Open(\\\"file.json\\\")\\n\\tif err != nil {\\n\\t\\tfmt.Println(err)\\n\\t\\treturn\\n\\t}\\n\\tdefer jsonFile.Close()\\n\\n\\tdecoder := json.NewDecoder(jsonFile)\\n\\tfor {\\n\\t\\tvar post Post\\n\\t\\terr := decoder.Decode(&post)\\n\\t\\tif err == io.EOF {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t\\tif err != nil {\\n\\t\\t\\tfmt.Println(err)\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t\\tfmt.Println(post) // {1 Hello {1 author1} [{1 comment1 author2} {2 comment2 author3}]}\\n\\t}\\n}\\n```\\n\\n## JSON データを作成する\\n- 構造体を定義\\n- 構造体を JSON データに組み換え\\n\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"encoding/json\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"io/ioutil\\\"\\n)\\n\\ntype Post struct {\\n\\tId       int       `json:\\\"id\\\"`\\n\\tContent  string    `json:\\\"content\\\"`\\n\\tAuthor   Author    `json:\\\"author\\\"`\\n\\tComments []Comment `json:\\\"comments\\\"`\\n}\\ntype Author struct {\\n\\tId   int    `json:\\\"id\\\"`\\n\\tName string `json:\\\"name\\\"`\\n}\\ntype Comment struct {\\n\\tId      int    `json:\\\"id\\\"`\\n\\tContent string `json:\\\"content\\\"`\\n\\tAuthor  string `json:\\\"author\\\"`\\n}\\n\\nfunc main() {\\n\\tpost := Post{\\n\\t\\tId:      1,\\n\\t\\tContent: \\\"Hello\\\",\\n\\t\\tAuthor: Author{\\n\\t\\t\\tId:   1,\\n\\t\\t\\tName: \\\"author1\\\",\\n\\t\\t},\\n\\t\\tComments: []Comment{\\n\\t\\t\\t{\\n\\t\\t\\t\\tId:      1,\\n\\t\\t\\t\\tContent: \\\"comment1\\\",\\n\\t\\t\\t\\tAuthor:  \\\"author2\\\",\\n\\t\\t\\t},\\n\\t\\t\\t{\\n\\t\\t\\t\\tId:      2,\\n\\t\\t\\t\\tContent: \\\"comment2\\\",\\n\\t\\t\\t\\tAuthor:  \\\"author3\\\",\\n\\t\\t\\t},\\n\\t\\t},\\n\\t}\\n\\toutput, err := json.MarshalIndent(&post, \\\"\\\", \\\"\\\\t\\\\t\\\")\\n\\tif err != nil {\\n\\t\\tfmt.Println(err)\\n\\t\\treturn\\n\\t}\\n\\terr = ioutil.WriteFile(\\\"created.json\\\", output, 0644)\\n\\tif err != nil {\\n\\t\\tfmt.Println(err)\\n\\t\\treturn\\n\\t}\\n}\\n```\\n\\n### エンコーダを使う\\n- 構造体を定義\\n- エンコーダを作成する\\n- エンコーダを使い構造体を JSON ファイルにエンコード\\n\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"encoding/json\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"os\\\"\\n)\\n\\ntype Post struct {\\n\\tId       int       `json:\\\"id\\\"`\\n\\tContent  string    `json:\\\"content\\\"`\\n\\tAuthor   Author    `json:\\\"author\\\"`\\n\\tComments []Comment `json:\\\"comments\\\"`\\n}\\ntype Author struct {\\n\\tId   int    `json:\\\"id\\\"`\\n\\tName string `json:\\\"name\\\"`\\n}\\ntype Comment struct {\\n\\tId      int    `json:\\\"id\\\"`\\n\\tContent string `json:\\\"content\\\"`\\n\\tAuthor  string `json:\\\"author\\\"`\\n}\\n\\nfunc main() {\\n\\tpost := Post{\\n\\t\\tId:      1,\\n\\t\\tContent: \\\"Hello\\\",\\n\\t\\tAuthor: Author{\\n\\t\\t\\tId:   1,\\n\\t\\t\\tName: \\\"author1\\\",\\n\\t\\t},\\n\\t\\tComments: []Comment{\\n\\t\\t\\t{\\n\\t\\t\\t\\tId:      1,\\n\\t\\t\\t\\tContent: \\\"comment1\\\",\\n\\t\\t\\t\\tAuthor:  \\\"author2\\\",\\n\\t\\t\\t},\\n\\t\\t\\t{\\n\\t\\t\\t\\tId:      2,\\n\\t\\t\\t\\tContent: \\\"comment2\\\",\\n\\t\\t\\t\\tAuthor:  \\\"author3\\\",\\n\\t\\t\\t},\\n\\t\\t},\\n\\t}\\n\\tjsonFile, err := os.Create(\\\"created.json\\\")\\n\\tif err != nil {\\n\\t\\tfmt.Println(err)\\n\\t\\treturn\\n\\t}\\n\\tencoder := json.NewEncoder(jsonFile)\\n\\terr = encoder.Encode(&post)\\n\\tif err != nil {\\n\\t\\tfmt.Println(err)\\n\\t\\treturn\\n\\t}\\n}\\n```\",\n  \"bodyHtml\": \"<h2>JSON の解析</h2>\\n<p>今回使う JSON ファイル。</p>\\n<pre><code class=\\\"hljs\\\">{\\n  <span class=\\\"hljs-attr\\\">&quot;id&quot;</span>: <span class=\\\"hljs-number\\\">1</span>,\\n  <span class=\\\"hljs-attr\\\">&quot;content&quot;</span>: <span class=\\\"hljs-string\\\">&quot;Hello&quot;</span>,\\n  <span class=\\\"hljs-attr\\\">&quot;author&quot;</span>: {\\n    <span class=\\\"hljs-attr\\\">&quot;id&quot;</span>: <span class=\\\"hljs-number\\\">1</span>,\\n    <span class=\\\"hljs-attr\\\">&quot;name&quot;</span>: <span class=\\\"hljs-string\\\">&quot;author1&quot;</span>\\n  },\\n  <span class=\\\"hljs-attr\\\">&quot;comments&quot;</span>: [\\n    {\\n      <span class=\\\"hljs-attr\\\">&quot;id&quot;</span>: <span class=\\\"hljs-number\\\">1</span>,\\n      <span class=\\\"hljs-attr\\\">&quot;content&quot;</span>: <span class=\\\"hljs-string\\\">&quot;comment1&quot;</span>,\\n      <span class=\\\"hljs-attr\\\">&quot;author&quot;</span>: <span class=\\\"hljs-string\\\">&quot;author2&quot;</span>\\n    },\\n    {\\n      <span class=\\\"hljs-attr\\\">&quot;id&quot;</span>: <span class=\\\"hljs-number\\\">2</span>,\\n      <span class=\\\"hljs-attr\\\">&quot;content&quot;</span>: <span class=\\\"hljs-string\\\">&quot;comment2&quot;</span>,\\n      <span class=\\\"hljs-attr\\\">&quot;author&quot;</span>: <span class=\\\"hljs-string\\\">&quot;author3&quot;</span>\\n    }\\n  ]\\n}</code></pre><h3>Unmarshal を使う</h3>\\n<p>文字列データの場合は Unmarshal を使う。</p>\\n<ul>\\n<li>構造体を定義</li>\\n<li>JSON を構造体に格納</li>\\n</ul>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;encoding/json&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;io/ioutil&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;os&quot;</span>\\n)\\n\\n<span class=\\\"hljs-keyword\\\">type</span> Post <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\tId      <span class=\\\"hljs-keyword\\\">int</span>    <span class=\\\"hljs-string\\\">`json:&quot;id&quot;`</span>\\n\\tContent <span class=\\\"hljs-keyword\\\">string</span> <span class=\\\"hljs-string\\\">`json:&quot;content&quot;`</span>\\n\\tAuthor  <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\t\\tId   <span class=\\\"hljs-keyword\\\">int</span>    <span class=\\\"hljs-string\\\">`json:&quot;id&quot;`</span>\\n\\t\\tName <span class=\\\"hljs-keyword\\\">string</span> <span class=\\\"hljs-string\\\">`json:&quot;name&quot;`</span>\\n\\t} <span class=\\\"hljs-string\\\">`json:&quot;author&quot;`</span>\\n\\tComments []<span class=\\\"hljs-keyword\\\">struct</span> {\\n\\t\\tId      <span class=\\\"hljs-keyword\\\">int</span>    <span class=\\\"hljs-string\\\">`json:&quot;id&quot;`</span>\\n\\t\\tContent <span class=\\\"hljs-keyword\\\">string</span> <span class=\\\"hljs-string\\\">`json:&quot;content&quot;`</span>\\n\\t\\tAuthor  <span class=\\\"hljs-keyword\\\">string</span> <span class=\\\"hljs-string\\\">`json:&quot;author&quot;`</span>\\n\\t} <span class=\\\"hljs-string\\\">`json:&quot;comments&quot;`</span>\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\tjsonFile, err := os.Open(<span class=\\\"hljs-string\\\">&quot;file.json&quot;</span>)\\n\\t<span class=\\\"hljs-keyword\\\">if</span> err != <span class=\\\"hljs-literal\\\">nil</span> {\\n\\t\\tfmt.Println(err)\\n\\t\\t<span class=\\\"hljs-keyword\\\">return</span>\\n\\t}\\n\\t<span class=\\\"hljs-keyword\\\">defer</span> jsonFile.Close()\\n\\n\\tjsonData, err := ioutil.ReadAll(jsonFile)\\n\\t<span class=\\\"hljs-keyword\\\">if</span> err != <span class=\\\"hljs-literal\\\">nil</span> {\\n\\t\\tfmt.Println(err)\\n\\t\\t<span class=\\\"hljs-keyword\\\">return</span>\\n\\t}\\n\\n\\t<span class=\\\"hljs-keyword\\\">var</span> post Post\\n\\tjson.Unmarshal(jsonData, &amp;post)\\n\\tfmt.Println(post) <span class=\\\"hljs-comment\\\">// {1 Hello {0 author1} [{1 comment1 author2} {2 comment2 author3}]}</span>\\n}</code></pre><h3>デコーダを使う</h3>\\n<p>http.Request の Body のように <em><strong>io.Reader</strong></em> のストリームからデータが入ってくる場合に使う。</p>\\n<ul>\\n<li>構造体を定義</li>\\n<li>デコーダを作成する</li>\\n<li>JSON を順次処理してデコードする</li>\\n</ul>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;encoding/json&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;io&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;os&quot;</span>\\n)\\n\\n<span class=\\\"hljs-keyword\\\">type</span> Post <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\tId      <span class=\\\"hljs-keyword\\\">int</span>    <span class=\\\"hljs-string\\\">`json:&quot;id&quot;`</span>\\n\\tContent <span class=\\\"hljs-keyword\\\">string</span> <span class=\\\"hljs-string\\\">`json:&quot;content&quot;`</span>\\n\\tAuthor  <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\t\\tId   <span class=\\\"hljs-keyword\\\">int</span>    <span class=\\\"hljs-string\\\">`json:&quot;id&quot;`</span>\\n\\t\\tName <span class=\\\"hljs-keyword\\\">string</span> <span class=\\\"hljs-string\\\">`json:&quot;name&quot;`</span>\\n\\t} <span class=\\\"hljs-string\\\">`json:&quot;author&quot;`</span>\\n\\tComments []<span class=\\\"hljs-keyword\\\">struct</span> {\\n\\t\\tId      <span class=\\\"hljs-keyword\\\">int</span>    <span class=\\\"hljs-string\\\">`json:&quot;id&quot;`</span>\\n\\t\\tContent <span class=\\\"hljs-keyword\\\">string</span> <span class=\\\"hljs-string\\\">`json:&quot;content&quot;`</span>\\n\\t\\tAuthor  <span class=\\\"hljs-keyword\\\">string</span> <span class=\\\"hljs-string\\\">`json:&quot;author&quot;`</span>\\n\\t} <span class=\\\"hljs-string\\\">`json:&quot;comments&quot;`</span>\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\tjsonFile, err := os.Open(<span class=\\\"hljs-string\\\">&quot;file.json&quot;</span>)\\n\\t<span class=\\\"hljs-keyword\\\">if</span> err != <span class=\\\"hljs-literal\\\">nil</span> {\\n\\t\\tfmt.Println(err)\\n\\t\\t<span class=\\\"hljs-keyword\\\">return</span>\\n\\t}\\n\\t<span class=\\\"hljs-keyword\\\">defer</span> jsonFile.Close()\\n\\n\\tdecoder := json.NewDecoder(jsonFile)\\n\\t<span class=\\\"hljs-keyword\\\">for</span> {\\n\\t\\t<span class=\\\"hljs-keyword\\\">var</span> post Post\\n\\t\\terr := decoder.Decode(&amp;post)\\n\\t\\t<span class=\\\"hljs-keyword\\\">if</span> err == io.EOF {\\n\\t\\t\\t<span class=\\\"hljs-keyword\\\">break</span>\\n\\t\\t}\\n\\t\\t<span class=\\\"hljs-keyword\\\">if</span> err != <span class=\\\"hljs-literal\\\">nil</span> {\\n\\t\\t\\tfmt.Println(err)\\n\\t\\t\\t<span class=\\\"hljs-keyword\\\">return</span>\\n\\t\\t}\\n\\t\\tfmt.Println(post) <span class=\\\"hljs-comment\\\">// {1 Hello {1 author1} [{1 comment1 author2} {2 comment2 author3}]}</span>\\n\\t}\\n}</code></pre><h2>JSON データを作成する</h2>\\n<ul>\\n<li>構造体を定義</li>\\n<li>構造体を JSON データに組み換え</li>\\n</ul>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;encoding/json&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;io/ioutil&quot;</span>\\n)\\n\\n<span class=\\\"hljs-keyword\\\">type</span> Post <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\tId       <span class=\\\"hljs-keyword\\\">int</span>       <span class=\\\"hljs-string\\\">`json:&quot;id&quot;`</span>\\n\\tContent  <span class=\\\"hljs-keyword\\\">string</span>    <span class=\\\"hljs-string\\\">`json:&quot;content&quot;`</span>\\n\\tAuthor   Author    <span class=\\\"hljs-string\\\">`json:&quot;author&quot;`</span>\\n\\tComments []Comment <span class=\\\"hljs-string\\\">`json:&quot;comments&quot;`</span>\\n}\\n<span class=\\\"hljs-keyword\\\">type</span> Author <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\tId   <span class=\\\"hljs-keyword\\\">int</span>    <span class=\\\"hljs-string\\\">`json:&quot;id&quot;`</span>\\n\\tName <span class=\\\"hljs-keyword\\\">string</span> <span class=\\\"hljs-string\\\">`json:&quot;name&quot;`</span>\\n}\\n<span class=\\\"hljs-keyword\\\">type</span> Comment <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\tId      <span class=\\\"hljs-keyword\\\">int</span>    <span class=\\\"hljs-string\\\">`json:&quot;id&quot;`</span>\\n\\tContent <span class=\\\"hljs-keyword\\\">string</span> <span class=\\\"hljs-string\\\">`json:&quot;content&quot;`</span>\\n\\tAuthor  <span class=\\\"hljs-keyword\\\">string</span> <span class=\\\"hljs-string\\\">`json:&quot;author&quot;`</span>\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\tpost := Post{\\n\\t\\tId:      <span class=\\\"hljs-number\\\">1</span>,\\n\\t\\tContent: <span class=\\\"hljs-string\\\">&quot;Hello&quot;</span>,\\n\\t\\tAuthor: Author{\\n\\t\\t\\tId:   <span class=\\\"hljs-number\\\">1</span>,\\n\\t\\t\\tName: <span class=\\\"hljs-string\\\">&quot;author1&quot;</span>,\\n\\t\\t},\\n\\t\\tComments: []Comment{\\n\\t\\t\\t{\\n\\t\\t\\t\\tId:      <span class=\\\"hljs-number\\\">1</span>,\\n\\t\\t\\t\\tContent: <span class=\\\"hljs-string\\\">&quot;comment1&quot;</span>,\\n\\t\\t\\t\\tAuthor:  <span class=\\\"hljs-string\\\">&quot;author2&quot;</span>,\\n\\t\\t\\t},\\n\\t\\t\\t{\\n\\t\\t\\t\\tId:      <span class=\\\"hljs-number\\\">2</span>,\\n\\t\\t\\t\\tContent: <span class=\\\"hljs-string\\\">&quot;comment2&quot;</span>,\\n\\t\\t\\t\\tAuthor:  <span class=\\\"hljs-string\\\">&quot;author3&quot;</span>,\\n\\t\\t\\t},\\n\\t\\t},\\n\\t}\\n\\toutput, err := json.MarshalIndent(&amp;post, <span class=\\\"hljs-string\\\">&quot;&quot;</span>, <span class=\\\"hljs-string\\\">&quot;\\\\t\\\\t&quot;</span>)\\n\\t<span class=\\\"hljs-keyword\\\">if</span> err != <span class=\\\"hljs-literal\\\">nil</span> {\\n\\t\\tfmt.Println(err)\\n\\t\\t<span class=\\\"hljs-keyword\\\">return</span>\\n\\t}\\n\\terr = ioutil.WriteFile(<span class=\\\"hljs-string\\\">&quot;created.json&quot;</span>, output, <span class=\\\"hljs-number\\\">0644</span>)\\n\\t<span class=\\\"hljs-keyword\\\">if</span> err != <span class=\\\"hljs-literal\\\">nil</span> {\\n\\t\\tfmt.Println(err)\\n\\t\\t<span class=\\\"hljs-keyword\\\">return</span>\\n\\t}\\n}</code></pre><h3>エンコーダを使う</h3>\\n<ul>\\n<li>構造体を定義</li>\\n<li>エンコーダを作成する</li>\\n<li>エンコーダを使い構造体を JSON ファイルにエンコード</li>\\n</ul>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;encoding/json&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;os&quot;</span>\\n)\\n\\n<span class=\\\"hljs-keyword\\\">type</span> Post <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\tId       <span class=\\\"hljs-keyword\\\">int</span>       <span class=\\\"hljs-string\\\">`json:&quot;id&quot;`</span>\\n\\tContent  <span class=\\\"hljs-keyword\\\">string</span>    <span class=\\\"hljs-string\\\">`json:&quot;content&quot;`</span>\\n\\tAuthor   Author    <span class=\\\"hljs-string\\\">`json:&quot;author&quot;`</span>\\n\\tComments []Comment <span class=\\\"hljs-string\\\">`json:&quot;comments&quot;`</span>\\n}\\n<span class=\\\"hljs-keyword\\\">type</span> Author <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\tId   <span class=\\\"hljs-keyword\\\">int</span>    <span class=\\\"hljs-string\\\">`json:&quot;id&quot;`</span>\\n\\tName <span class=\\\"hljs-keyword\\\">string</span> <span class=\\\"hljs-string\\\">`json:&quot;name&quot;`</span>\\n}\\n<span class=\\\"hljs-keyword\\\">type</span> Comment <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\tId      <span class=\\\"hljs-keyword\\\">int</span>    <span class=\\\"hljs-string\\\">`json:&quot;id&quot;`</span>\\n\\tContent <span class=\\\"hljs-keyword\\\">string</span> <span class=\\\"hljs-string\\\">`json:&quot;content&quot;`</span>\\n\\tAuthor  <span class=\\\"hljs-keyword\\\">string</span> <span class=\\\"hljs-string\\\">`json:&quot;author&quot;`</span>\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\tpost := Post{\\n\\t\\tId:      <span class=\\\"hljs-number\\\">1</span>,\\n\\t\\tContent: <span class=\\\"hljs-string\\\">&quot;Hello&quot;</span>,\\n\\t\\tAuthor: Author{\\n\\t\\t\\tId:   <span class=\\\"hljs-number\\\">1</span>,\\n\\t\\t\\tName: <span class=\\\"hljs-string\\\">&quot;author1&quot;</span>,\\n\\t\\t},\\n\\t\\tComments: []Comment{\\n\\t\\t\\t{\\n\\t\\t\\t\\tId:      <span class=\\\"hljs-number\\\">1</span>,\\n\\t\\t\\t\\tContent: <span class=\\\"hljs-string\\\">&quot;comment1&quot;</span>,\\n\\t\\t\\t\\tAuthor:  <span class=\\\"hljs-string\\\">&quot;author2&quot;</span>,\\n\\t\\t\\t},\\n\\t\\t\\t{\\n\\t\\t\\t\\tId:      <span class=\\\"hljs-number\\\">2</span>,\\n\\t\\t\\t\\tContent: <span class=\\\"hljs-string\\\">&quot;comment2&quot;</span>,\\n\\t\\t\\t\\tAuthor:  <span class=\\\"hljs-string\\\">&quot;author3&quot;</span>,\\n\\t\\t\\t},\\n\\t\\t},\\n\\t}\\n\\tjsonFile, err := os.Create(<span class=\\\"hljs-string\\\">&quot;created.json&quot;</span>)\\n\\t<span class=\\\"hljs-keyword\\\">if</span> err != <span class=\\\"hljs-literal\\\">nil</span> {\\n\\t\\tfmt.Println(err)\\n\\t\\t<span class=\\\"hljs-keyword\\\">return</span>\\n\\t}\\n\\tencoder := json.NewEncoder(jsonFile)\\n\\terr = encoder.Encode(&amp;post)\\n\\t<span class=\\\"hljs-keyword\\\">if</span> err != <span class=\\\"hljs-literal\\\">nil</span> {\\n\\t\\tfmt.Println(err)\\n\\t\\t<span class=\\\"hljs-keyword\\\">return</span>\\n\\t}\\n}</code></pre>\",\n  \"dir\": \"articles\",\n  \"base\": \"20210718124235.json\",\n  \"ext\": \".json\",\n  \"sourceBase\": \"20210718124235.md\",\n  \"sourceExt\": \".md\"\n}"}},"__N_SSG":true}