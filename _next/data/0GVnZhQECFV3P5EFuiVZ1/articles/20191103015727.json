{"pageProps":{"data":{"id":"20191103015727","fileContents":"{\n  \"title\": \"データベース操作\",\n  \"date\": 20191103015727,\n  \"tags\": [\n    \"mysql\"\n  ],\n  \"bodyContent\": \"## データベースの作成\\n```sql\\nCREATE DATABASE database_name;\\n```\\n\\n## データベースの削除\\n```sql\\nDROP DATABASE database_name;\\n```\\n\\n## テーブルの作成\\n```sql\\nCREATE TABLE table_name (col_name type, ...);\\n```\\n\\n### 主キー\\n```sql\\nCREATE TABLE table_name (col_name type, ..., PRIMARY KEY (col_name));\\n```\\n- PRIMARY KEY の重複と NULL は NG\\n- 複数の列を指定できる (複合主キー)\\n  - PRIMARY KEY(列名1, 列名2)\\n\\n### 外部キー\\n```sql\\nCREATE TABLE table_name (\\n  col_name type, ...,\\n  FOREIGN KEY (col_name) REFERENCES parent_table_name(col_name)\\n);\\n```\\n- 子テーブルの外部キーの値は親テーブルに存在しないといけない\\n- 参照される値 (親テーブル) の UPDATE / DELETE は NG\\n\\n#### 親テーブルの UPDATE / DELETE 時の設定\\n```sql\\nCREATE TABLE table_name (\\n  col_name type, ...,\\n  FOREIGN KEY (col_name) REFERENCES parent_table_name(col_name)\\n  ON DELETE [ アクション ]\\n  ON UPDATE [ アクション ]\\n);\\n\\n```\\n設定できるアクション。\\n|アクション|詳細|\\n|-|-|\\nRESTRICT|親テーブルに対して UPDATE / DELETE を行うとエラーになる (デフォルト)\\nCASCADE|親テーブルに対して UPDATE / DELETE を行うと、子テーブルの一致する行に自動的に UPDATE / DELETE を行う\\nSET NULL|親テーブルに対して UPDATE / DELETE を行うと、子テーブルの外部キーを NULL に設定する\\n\\n\\n## データの検索\\n```sql\\nSELECT col_name1, col_name2, ... FROM table_name [ 条件 ];\\n```\\n\\n### 条件\\n- 比較演算子\\n\\n|演算子|意味|\\n|-|-|\\n\\\"=\\\"|等しい\\n\\\"<\\\"|小さい\\n\\\">\\\"|大きい\\n\\\"<=\\\"|以下\\n\\\">=\\\"|以上\\n\\\"<>\\\"|等しくない\\n\\n- BETWEEN\\n```sql\\nSELECT * FROM table_name WHERE BETWEEN value1 AND value2;\\n```\\n指定した範囲に値があるものを取得。\\n\\n- IN\\n```sql\\nSELECT * FROM table_name WHERE col_name IN ('value1', 'value2');\\n```\\n指定した値のリストの中にあるものを取得。\\n\\n- LIKE\\n```sql\\nSELECT * FROM table_name WHERE col_name LIKE '_100%';\\n```\\n***%*** は任意の文字数の任意の文字、 ***_*** は 1 文字の任意の文字。\\n\\n- サブクエリ\\n```sql\\nSELECT * FROM table_name\\nWHERE col_name1 = (\\n  SELECT * FROM table_name WHERE col_name2 = value\\n);\\n```\\n副問合せ。\\n\\n### DISTINCT\\n```sql\\nSELECT DISTINCT col_name1, col_name2, ... FROM table_name;\\n```\\nSELECT の結果から重複業を除外できる。\\n\\n***GROUP BY*** でも重複削除できる。\\n```sql\\nSELECT col_name1, col_name2, ... FROM table_name GROUP BY col_name1;\\n```\\n\\n### ORDER BY\\n```sql\\nSELECT * FROM table_name ORDER BY col_name1 ASC, col_name2 DESC;\\n```\\nASC は昇順。 DESC は降順。 ASC は省略可能。\\n\\n### LIMIT\\n```sql\\nSELECT * FROM table_name ORDER BY col_name LIMIT 5;\\n```\\n\\n### 集約関数\\n```sql\\nSELECT col_name, MAX(col_name) FROM table_name;\\n```\\n基本的に NULL は無視される。\\n集約関数の種類。\\n|関数|意味|\\n|-|-|\\nMAX|最大値\\nMIN|最小値\\nSUM|合計\\nAVG|平均\\nCOUNT|カウント\\n\\nSUM / AVG / COUNT は DISTINCT をサポートしている。\\n```sql\\nSELECT col_name, COUNT( DISTINCT col_name ) FROM table_name;\\n```\\n\\n### GROUP BY\\n```sql\\nSELECT col_name, COUNT(col_name) FROM table_name GROUP BY col_name;\\n```\\nテーブルを集約キーでグループ分けしてから集計する。\\n\\n### HAVING\\n```sql\\nSELECT COUNT(col_name1) FROM table_name GROUP BY col_name1 HAVING COUNT(col_name1) >= value;\\n```\\n***GROUP BY*** されたグループに対して条件を指定できる。\\n\\nこの場合、列名 1 で集計した値をカウントしてから HAVING で指定した条件のもののみを取得する。\\n\\n## 結合 ( JOIN )\\n結合の種類は3つ。\\n- クロス結合 ( CROSS JOIN )\\n- 内部結合 ( INNER JOIN )\\n- 外部結合 ( OUTER JOIN )\\n\\n### クロス結合 ( CROSS JOIN )\\n```sql\\nSELECT *\\nFROM table_name1 CROSS JOIN table_name2;\\n```\\nすべてのテーブルの組み合わせを作る。\\n\\n### 内部結合 ( INNER JOIN )\\n```sql\\nSELECT table_name1.*, table_name2.col_name, ...\\nFROM table_name1 INNER JOIN table_name2\\nON table_name1.col_name1 = table_name2.col_name1;\\n```\\nクロス結合の部分集合。条件一致したものだけを取得する。\\n\\n***USING*** でも書ける。\\n```sql\\nSELECT table_name1.*, table_name2.col_name, ...\\nFROM table_name1 INNER JOIN table_name2 USING(col_name);\\n```\\n\\n### 外部結合\\n```sql\\nSELECT table_name1.*, table_name2.col_name, ...\\nFROM table_name1 ( LEFT | RIGHT ) OUTER JOIN table_name2\\nON table_name1.col_name1 = table_name2.col_name1;\\n```\\n内部結合と同様に条件一致したものを取得し、さらに、 マッチしなかった ( LEFT | RIGHT ) のテーブルの行は残す。\\n\\n|書式|内容|\\n|-|-|\\nLEFT OUTER JOIN|FROM のあとに書かれたテーブルのデータだけを取得\\nRIGHT OUTER JOIN|JOIN の後に書かれたテーブルのデータだけを取得\\n\\n## テーブルの削除\\n```sql\\nDROP TABLE table_name;\\n```\\n\\n## データの挿入\\n```sql\\nINSERT INTO database_name.table_name(col_name1, col_name2, ...) VALUES (value1, value2, ...);\\n```\\n\\n全てのカラムに値を追加する場合は以下のように書ける。\\n```sql\\nINSERT INTO table_name VALUES(value1, value2, ...);\\n```\\n\\n## ビュー\\nデータを持たず実行分だけが入っている。\\n```sql\\nCREATE VIEW view_name (col_name1, col_name2, ...) AS select_statement;\\n```\\n\\n## 数値として取り出す\\n```sql\\nSELECT col_name FROM as unsigned FROM table_name;\\n```\\n\\n## index の付け方\\n```sql\\nALTER TABLE table_name AND INDEX index_name (col_name);\\n```\\n\\n## トランザクション\\n***BEGIN*** で開始して、 ***COMMIT*** で反映、 ***ROLLBACK*** で取り消しができる。\\n```sql\\nBEGIN;\\n  SQL1;\\n  SQL2;\\nCOMMIT;\\n```\",\n  \"bodyHtml\": \"<h2>データベースの作成</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">CREATE</span> DATABASE database_name;</code></pre><h2>データベースの削除</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">DROP</span> DATABASE database_name;</code></pre><h2>テーブルの作成</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">CREATE</span> <span class=\\\"hljs-keyword\\\">TABLE</span> table_name (col_name type, ...);</code></pre><h3>主キー</h3>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">CREATE</span> <span class=\\\"hljs-keyword\\\">TABLE</span> table_name (col_name type, ..., <span class=\\\"hljs-keyword\\\">PRIMARY</span> KEY (col_name));</code></pre><ul>\\n<li>PRIMARY KEY の重複と NULL は NG</li>\\n<li>複数の列を指定できる (複合主キー)\\n<ul>\\n<li>PRIMARY KEY(列名1, 列名2)</li>\\n</ul>\\n</li>\\n</ul>\\n<h3>外部キー</h3>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">CREATE</span> <span class=\\\"hljs-keyword\\\">TABLE</span> table_name (\\n  col_name type, ...,\\n  <span class=\\\"hljs-keyword\\\">FOREIGN</span> KEY (col_name) <span class=\\\"hljs-keyword\\\">REFERENCES</span> parent_table_name(col_name)\\n);</code></pre><ul>\\n<li>子テーブルの外部キーの値は親テーブルに存在しないといけない</li>\\n<li>参照される値 (親テーブル) の UPDATE / DELETE は NG</li>\\n</ul>\\n<h4>親テーブルの UPDATE / DELETE 時の設定</h4>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">CREATE</span> <span class=\\\"hljs-keyword\\\">TABLE</span> table_name (\\n  col_name type, ...,\\n  <span class=\\\"hljs-keyword\\\">FOREIGN</span> KEY (col_name) <span class=\\\"hljs-keyword\\\">REFERENCES</span> parent_table_name(col_name)\\n  <span class=\\\"hljs-keyword\\\">ON</span> <span class=\\\"hljs-keyword\\\">DELETE</span> [ アクション ]\\n  <span class=\\\"hljs-keyword\\\">ON</span> UPDATE [ アクション ]\\n);</code></pre><p>設定できるアクション。</p>\\n<table>\\n<thead>\\n<tr>\\n<th>アクション</th>\\n<th>詳細</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>RESTRICT</td>\\n<td>親テーブルに対して UPDATE / DELETE を行うとエラーになる (デフォルト)</td>\\n</tr>\\n<tr>\\n<td>CASCADE</td>\\n<td>親テーブルに対して UPDATE / DELETE を行うと、子テーブルの一致する行に自動的に UPDATE / DELETE を行う</td>\\n</tr>\\n<tr>\\n<td>SET NULL</td>\\n<td>親テーブルに対して UPDATE / DELETE を行うと、子テーブルの外部キーを NULL に設定する</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>データの検索</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> col_name1, col_name2, ... <span class=\\\"hljs-keyword\\\">FROM</span> table_name [ 条件 ];</code></pre><h3>条件</h3>\\n<ul>\\n<li>比較演算子</li>\\n</ul>\\n<table>\\n<thead>\\n<tr>\\n<th>演算子</th>\\n<th>意味</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>&quot;=&quot;</td>\\n<td>等しい</td>\\n</tr>\\n<tr>\\n<td>&quot;&lt;&quot;</td>\\n<td>小さい</td>\\n</tr>\\n<tr>\\n<td>&quot;&gt;&quot;</td>\\n<td>大きい</td>\\n</tr>\\n<tr>\\n<td>&quot;&lt;=&quot;</td>\\n<td>以下</td>\\n</tr>\\n<tr>\\n<td>&quot;&gt;=&quot;</td>\\n<td>以上</td>\\n</tr>\\n<tr>\\n<td>&quot;&lt;&gt;&quot;</td>\\n<td>等しくない</td>\\n</tr>\\n</tbody>\\n</table>\\n<ul>\\n<li>BETWEEN</li>\\n</ul>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">FROM</span> table_name <span class=\\\"hljs-keyword\\\">WHERE</span> <span class=\\\"hljs-keyword\\\">BETWEEN</span> value1 <span class=\\\"hljs-keyword\\\">AND</span> value2;</code></pre><p>指定した範囲に値があるものを取得。</p>\\n<ul>\\n<li>IN</li>\\n</ul>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">FROM</span> table_name <span class=\\\"hljs-keyword\\\">WHERE</span> col_name <span class=\\\"hljs-keyword\\\">IN</span> (<span class=\\\"hljs-string\\\">&#x27;value1&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;value2&#x27;</span>);</code></pre><p>指定した値のリストの中にあるものを取得。</p>\\n<ul>\\n<li>LIKE</li>\\n</ul>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">FROM</span> table_name <span class=\\\"hljs-keyword\\\">WHERE</span> col_name <span class=\\\"hljs-keyword\\\">LIKE</span> <span class=\\\"hljs-string\\\">&#x27;_100%&#x27;</span>;</code></pre><p><em><strong>%</strong></em> は任意の文字数の任意の文字、 <em><strong>_</strong></em> は 1 文字の任意の文字。</p>\\n<ul>\\n<li>サブクエリ</li>\\n</ul>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">FROM</span> table_name\\n<span class=\\\"hljs-keyword\\\">WHERE</span> col_name1 <span class=\\\"hljs-operator\\\">=</span> (\\n  <span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">FROM</span> table_name <span class=\\\"hljs-keyword\\\">WHERE</span> col_name2 <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">value</span>\\n);</code></pre><p>副問合せ。</p>\\n<h3>DISTINCT</h3>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-keyword\\\">DISTINCT</span> col_name1, col_name2, ... <span class=\\\"hljs-keyword\\\">FROM</span> table_name;</code></pre><p>SELECT の結果から重複業を除外できる。</p>\\n<p><em><strong>GROUP BY</strong></em> でも重複削除できる。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> col_name1, col_name2, ... <span class=\\\"hljs-keyword\\\">FROM</span> table_name <span class=\\\"hljs-keyword\\\">GROUP</span> <span class=\\\"hljs-keyword\\\">BY</span> col_name1;</code></pre><h3>ORDER BY</h3>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">FROM</span> table_name <span class=\\\"hljs-keyword\\\">ORDER</span> <span class=\\\"hljs-keyword\\\">BY</span> col_name1 <span class=\\\"hljs-keyword\\\">ASC</span>, col_name2 <span class=\\\"hljs-keyword\\\">DESC</span>;</code></pre><p>ASC は昇順。 DESC は降順。 ASC は省略可能。</p>\\n<h3>LIMIT</h3>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">FROM</span> table_name <span class=\\\"hljs-keyword\\\">ORDER</span> <span class=\\\"hljs-keyword\\\">BY</span> col_name LIMIT <span class=\\\"hljs-number\\\">5</span>;</code></pre><h3>集約関数</h3>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> col_name, <span class=\\\"hljs-built_in\\\">MAX</span>(col_name) <span class=\\\"hljs-keyword\\\">FROM</span> table_name;</code></pre><p>基本的に NULL は無視される。\\n集約関数の種類。</p>\\n<table>\\n<thead>\\n<tr>\\n<th>関数</th>\\n<th>意味</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>MAX</td>\\n<td>最大値</td>\\n</tr>\\n<tr>\\n<td>MIN</td>\\n<td>最小値</td>\\n</tr>\\n<tr>\\n<td>SUM</td>\\n<td>合計</td>\\n</tr>\\n<tr>\\n<td>AVG</td>\\n<td>平均</td>\\n</tr>\\n<tr>\\n<td>COUNT</td>\\n<td>カウント</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>SUM / AVG / COUNT は DISTINCT をサポートしている。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> col_name, <span class=\\\"hljs-built_in\\\">COUNT</span>( <span class=\\\"hljs-keyword\\\">DISTINCT</span> col_name ) <span class=\\\"hljs-keyword\\\">FROM</span> table_name;</code></pre><h3>GROUP BY</h3>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> col_name, <span class=\\\"hljs-built_in\\\">COUNT</span>(col_name) <span class=\\\"hljs-keyword\\\">FROM</span> table_name <span class=\\\"hljs-keyword\\\">GROUP</span> <span class=\\\"hljs-keyword\\\">BY</span> col_name;</code></pre><p>テーブルを集約キーでグループ分けしてから集計する。</p>\\n<h3>HAVING</h3>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-built_in\\\">COUNT</span>(col_name1) <span class=\\\"hljs-keyword\\\">FROM</span> table_name <span class=\\\"hljs-keyword\\\">GROUP</span> <span class=\\\"hljs-keyword\\\">BY</span> col_name1 <span class=\\\"hljs-keyword\\\">HAVING</span> <span class=\\\"hljs-built_in\\\">COUNT</span>(col_name1) <span class=\\\"hljs-operator\\\">&gt;=</span> <span class=\\\"hljs-keyword\\\">value</span>;</code></pre><p><em><strong>GROUP BY</strong></em> されたグループに対して条件を指定できる。</p>\\n<p>この場合、列名 1 で集計した値をカウントしてから HAVING で指定した条件のもののみを取得する。</p>\\n<h2>結合 ( JOIN )</h2>\\n<p>結合の種類は3つ。</p>\\n<ul>\\n<li>クロス結合 ( CROSS JOIN )</li>\\n<li>内部結合 ( INNER JOIN )</li>\\n<li>外部結合 ( OUTER JOIN )</li>\\n</ul>\\n<h3>クロス結合 ( CROSS JOIN )</h3>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> <span class=\\\"hljs-operator\\\">*</span>\\n<span class=\\\"hljs-keyword\\\">FROM</span> table_name1 <span class=\\\"hljs-keyword\\\">CROSS</span> <span class=\\\"hljs-keyword\\\">JOIN</span> table_name2;</code></pre><p>すべてのテーブルの組み合わせを作る。</p>\\n<h3>内部結合 ( INNER JOIN )</h3>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> table_name1.<span class=\\\"hljs-operator\\\">*</span>, table_name2.col_name, ...\\n<span class=\\\"hljs-keyword\\\">FROM</span> table_name1 <span class=\\\"hljs-keyword\\\">INNER</span> <span class=\\\"hljs-keyword\\\">JOIN</span> table_name2\\n<span class=\\\"hljs-keyword\\\">ON</span> table_name1.col_name1 <span class=\\\"hljs-operator\\\">=</span> table_name2.col_name1;</code></pre><p>クロス結合の部分集合。条件一致したものだけを取得する。</p>\\n<p><em><strong>USING</strong></em> でも書ける。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> table_name1.<span class=\\\"hljs-operator\\\">*</span>, table_name2.col_name, ...\\n<span class=\\\"hljs-keyword\\\">FROM</span> table_name1 <span class=\\\"hljs-keyword\\\">INNER</span> <span class=\\\"hljs-keyword\\\">JOIN</span> table_name2 <span class=\\\"hljs-keyword\\\">USING</span>(col_name);</code></pre><h3>外部結合</h3>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> table_name1.<span class=\\\"hljs-operator\\\">*</span>, table_name2.col_name, ...\\n<span class=\\\"hljs-keyword\\\">FROM</span> table_name1 ( <span class=\\\"hljs-keyword\\\">LEFT</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">RIGHT</span> ) <span class=\\\"hljs-keyword\\\">OUTER</span> <span class=\\\"hljs-keyword\\\">JOIN</span> table_name2\\n<span class=\\\"hljs-keyword\\\">ON</span> table_name1.col_name1 <span class=\\\"hljs-operator\\\">=</span> table_name2.col_name1;</code></pre><p>内部結合と同様に条件一致したものを取得し、さらに、 マッチしなかった ( LEFT | RIGHT ) のテーブルの行は残す。</p>\\n<table>\\n<thead>\\n<tr>\\n<th>書式</th>\\n<th>内容</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>LEFT OUTER JOIN</td>\\n<td>FROM のあとに書かれたテーブルのデータだけを取得</td>\\n</tr>\\n<tr>\\n<td>RIGHT OUTER JOIN</td>\\n<td>JOIN の後に書かれたテーブルのデータだけを取得</td>\\n</tr>\\n</tbody>\\n</table>\\n<h2>テーブルの削除</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">DROP</span> <span class=\\\"hljs-keyword\\\">TABLE</span> table_name;</code></pre><h2>データの挿入</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">INSERT</span> <span class=\\\"hljs-keyword\\\">INTO</span> database_name.table_name(col_name1, col_name2, ...) <span class=\\\"hljs-keyword\\\">VALUES</span> (value1, value2, ...);</code></pre><p>全てのカラムに値を追加する場合は以下のように書ける。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">INSERT</span> <span class=\\\"hljs-keyword\\\">INTO</span> table_name <span class=\\\"hljs-keyword\\\">VALUES</span>(value1, value2, ...);</code></pre><h2>ビュー</h2>\\n<p>データを持たず実行分だけが入っている。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">CREATE</span> <span class=\\\"hljs-keyword\\\">VIEW</span> view_name (col_name1, col_name2, ...) <span class=\\\"hljs-keyword\\\">AS</span> select_statement;</code></pre><h2>数値として取り出す</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">SELECT</span> col_name <span class=\\\"hljs-keyword\\\">FROM</span> <span class=\\\"hljs-keyword\\\">as</span> unsigned <span class=\\\"hljs-keyword\\\">FROM</span> table_name;</code></pre><h2>index の付け方</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">ALTER</span> <span class=\\\"hljs-keyword\\\">TABLE</span> table_name <span class=\\\"hljs-keyword\\\">AND</span> INDEX index_name (col_name);</code></pre><h2>トランザクション</h2>\\n<p><em><strong>BEGIN</strong></em> で開始して、 <em><strong>COMMIT</strong></em> で反映、 <em><strong>ROLLBACK</strong></em> で取り消しができる。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">BEGIN</span>;\\n  SQL1;\\n  SQL2;\\n<span class=\\\"hljs-keyword\\\">COMMIT</span>;</code></pre>\",\n  \"dir\": \"articles\",\n  \"base\": \"20191103015727.json\",\n  \"ext\": \".json\",\n  \"sourceBase\": \"20191103015727.md\",\n  \"sourceExt\": \".md\"\n}"}},"__N_SSG":true}