{"pageProps":{"data":{"id":"20210429010135","fileContents":"{\n  \"title\": \"Golang の goroutine / channel とか\",\n  \"date\": 20210429010135,\n  \"tags\": [\n    \"golang\"\n  ],\n  \"bodyContent\": \"## goroutine\\ngoroutine は軽量なスレッド。\\n```go\\ngo f(x, y)\\n```\\nと書くだけ。\\n\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"time\\\"\\n)\\n\\nfunc say(s string) {\\n\\tfor i := 0; i < 5; i++ {\\n\\t\\ttime.Sleep(100 * time.Millisecond)\\n\\t\\tfmt.Println(s)\\n\\t}\\n}\\n\\nfunc main() {\\n\\tgo say(\\\"hello\\\")\\n\\tsay(\\\"world\\\")\\n}\\n\\n// hello\\n// world\\n// world\\n// hello\\n// hello\\n// world\\n// hello\\n// world\\n// world\\n// hello\\n```\\n\\n## channel\\nchannel 型は ***<-*** を用いて値の送受信を行う。\\n```go\\nch <- v // v をチャネル ch に送信する\\nv := <- ch // チャネル ch から変数を v に割り当てる\\n```\\n\\nチャネルは ***make*** で作る。\\n```go\\nch := make(chan int)\\n```\\n通常、片方の準備ができるまで送受信はブロックされる。\\n\\n```go\\npackage main\\n\\nimport \\\"fmt\\\"\\n\\nfunc sum(s []int, c chan int) {\\n\\tsum := 0\\n\\tfor _, v := range s {\\n\\t\\tsum += v\\n\\t}\\n\\tc <- sum\\n}\\n\\nfunc main() {\\n\\ts := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\\n\\tc := make(chan int)\\n\\n\\tgo sum(s[:len(s)/2], c)\\n\\tgo sum(s[len(s)/2:], c)\\n\\tgo sum(s, c)\\n\\n\\tx, y := <-c, <-c\\n\\tz := <-c\\n\\n\\tfmt.Println(x, y, z)\\n}\\n\\n// 55 15 40\\n// 55 40 15\\n// 処理終わった順かな？\\n```\\n\\n### バッファ\\nチャネルはバッファとして使える。 make の 2 つ目の引数にバッファの長さを指定できる。\\n```go\\nch := make(chan int, 10)\\n```\\n\\nバッファ数を超えると deadlock になる。\\n```go\\npackage main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n\\tch := make(chan bool, 2)\\n\\tch <- true\\n\\tch <- true\\n\\tv := <-ch\\n\\tch <- true\\n\\t// ch <- true // この行を入れると deadlock\\n\\n\\tfmt.Println(len(ch))\\n\\tfmt.Println(<-ch)\\n\\tfmt.Println(<-ch)\\n\\tfmt.Println(v)\\n\\tfmt.Println(len(ch))\\n}\\n\\n// 2\\n// true\\n// true\\n// true\\n// 0\\n```\\n\\n### close\\n送信側はチャネルを ***close*** できる。  \\n受信側はチャネルを ***close*** しているか確認できる。  \\n受信する値がない、かつチャネルが閉じているなら ***ok*** は ***false*** になる。\\n```go\\nv, ok := <- ch\\n```\\n\\nループのときはチャネルを使うとチャネルが閉じるまで値を受信し続ける。\\n```go\\npackage main\\n\\nimport \\\"fmt\\\"\\n\\nfunc fibonacci(n int, c chan int) {\\n\\tx, y := 0, 1\\n\\tfor i := 0; i < n; i++ {\\n\\t\\tc <- x\\n\\t\\tx, y = y, x+y\\n\\t}\\n\\tclose(c)\\n}\\n\\nfunc main() {\\n\\tc := make(chan int, 10)\\n\\tgo fibonacci(cap(c), c)\\n\\tfor i := range c {\\n\\t\\tfmt.Println(i)\\n\\t}\\n}\\n\\n// 0\\n// 1\\n// 1\\n// 2\\n// 3\\n// 5\\n// 8\\n// 13\\n// 21\\n// 34\\n```\\n\\n## select\\n***select*** は goroutine を複数の通信操作で待たせる。  \\ncase の準備ができるまでブロックする。複数の case が準備できている場合、 case はランダムに実行される。\\n```go\\npackage main\\n\\nimport \\\"fmt\\\"\\n\\nfunc fibonacci(c, quit chan int) {\\n\\tx, y := 0, 1\\n\\tfor {\\n\\t\\tselect {\\n\\t\\tcase c <- x:\\n\\t\\t\\tx, y = y, x+y\\n\\t\\tcase <-quit:\\n\\t\\t\\tfmt.Println(\\\"quit\\\")\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t}\\n}\\n\\nfunc main() {\\n\\tc := make(chan int)\\n\\tquit := make(chan int)\\n\\n\\tgo func() {\\n\\t\\tfor i := 0; i < 10; i++ {\\n\\t\\t\\tfmt.Println(<-c)\\n\\t\\t}\\n\\t\\tquit <- 0\\n\\t}()\\n\\tfibonacci(c, quit)\\n}\\n\\n// 0\\n// 1\\n// 1\\n// 2\\n// 3\\n// 5\\n// 8\\n// 13\\n// 21\\n// 34\\n// quit\\n```\\n\\n### default\\nブロックせずに送受信したいときには default を使う。\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"time\\\"\\n)\\n\\nfunc main() {\\n\\ttick := time.Tick(100 * time.Millisecond)\\n\\tboom := time.Tick(500 * time.Millisecond)\\n\\n\\tfor {\\n\\t\\tselect {\\n\\t\\tcase <-tick:\\n\\t\\t\\tfmt.Println(\\\"tick\\\")\\n\\t\\tcase <-boom:\\n\\t\\t\\tfmt.Println(\\\"boom\\\")\\n\\t\\t\\treturn\\n\\t\\tdefault:\\n\\t\\t\\tfmt.Println(\\\"   .\\\")\\n\\t\\t\\ttime.Sleep(50 * time.Millisecond)\\n\\t\\t}\\n\\t}\\n}\\n\\n//    .\\n//    .\\n// tick\\n//    .\\n//    .\\n// tick\\n//    .\\n//    .\\n// tick\\n//    .\\n//    .\\n// tick\\n//    .\\n//    .\\n// boom\\n```\\n\\n## sync.Mutex\\nコンフリクトを避け、 1 度に 1 つの goroutine だけが変数にアクセスできる。  \\nGolang の標準パッケージは、排他制御を ***sync.Mutex*** と ***Lock*** 、 ***Unlock*** で提供している。\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"sync\\\"\\n\\t\\\"time\\\"\\n)\\n\\ntype SafeCounter struct {\\n\\tmu sync.Mutex\\n\\tv  map[string]int\\n}\\n\\nfunc (c *SafeCounter) Inc(key string) {\\n\\tc.mu.Lock()\\n\\tc.v[key]++\\n\\tc.mu.Unlock()\\n}\\n\\nfunc (c *SafeCounter) Value(key string) int {\\n\\tc.mu.Lock()\\n\\tdefer c.mu.Unlock()\\n\\treturn c.v[key]\\n}\\n\\nfunc main() {\\n\\tc := SafeCounter{\\n\\t\\tv: make(map[string]int),\\n\\t}\\n\\n\\tfor i := 0; i < 1000; i++ {\\n\\t\\tgo c.Inc(\\\"somekey\\\")\\n\\t}\\n\\ttime.Sleep(time.Second)\\n\\tfmt.Println(c.Value(\\\"somekey\\\"))\\n}\\n\\n// 1000\\n```\",\n  \"bodyHtml\": \"<h2>goroutine</h2>\\n<p>goroutine は軽量なスレッド。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">go</span> f(x, y)</code></pre><p>と書くだけ。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;time&quot;</span>\\n)\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">say</span><span class=\\\"hljs-params\\\">(s <span class=\\\"hljs-keyword\\\">string</span>)</span></span> {\\n\\t<span class=\\\"hljs-keyword\\\">for</span> i := <span class=\\\"hljs-number\\\">0</span>; i &lt; <span class=\\\"hljs-number\\\">5</span>; i++ {\\n\\t\\ttime.Sleep(<span class=\\\"hljs-number\\\">100</span> * time.Millisecond)\\n\\t\\tfmt.Println(s)\\n\\t}\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\t<span class=\\\"hljs-keyword\\\">go</span> say(<span class=\\\"hljs-string\\\">&quot;hello&quot;</span>)\\n\\tsay(<span class=\\\"hljs-string\\\">&quot;world&quot;</span>)\\n}\\n\\n<span class=\\\"hljs-comment\\\">// hello</span>\\n<span class=\\\"hljs-comment\\\">// world</span>\\n<span class=\\\"hljs-comment\\\">// world</span>\\n<span class=\\\"hljs-comment\\\">// hello</span>\\n<span class=\\\"hljs-comment\\\">// hello</span>\\n<span class=\\\"hljs-comment\\\">// world</span>\\n<span class=\\\"hljs-comment\\\">// hello</span>\\n<span class=\\\"hljs-comment\\\">// world</span>\\n<span class=\\\"hljs-comment\\\">// world</span>\\n<span class=\\\"hljs-comment\\\">// hello</span></code></pre><h2>channel</h2>\\n<p>channel 型は <em><strong>&lt;-</strong></em> を用いて値の送受信を行う。</p>\\n<pre><code class=\\\"hljs\\\">ch &lt;- v <span class=\\\"hljs-comment\\\">// v をチャネル ch に送信する</span>\\nv := &lt;- ch <span class=\\\"hljs-comment\\\">// チャネル ch から変数を v に割り当てる</span></code></pre><p>チャネルは <em><strong>make</strong></em> で作る。</p>\\n<pre><code class=\\\"hljs\\\">ch := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">chan</span> <span class=\\\"hljs-keyword\\\">int</span>)</code></pre><p>通常、片方の準備ができるまで送受信はブロックされる。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">sum</span><span class=\\\"hljs-params\\\">(s []<span class=\\\"hljs-keyword\\\">int</span>, c <span class=\\\"hljs-keyword\\\">chan</span> <span class=\\\"hljs-keyword\\\">int</span>)</span></span> {\\n\\tsum := <span class=\\\"hljs-number\\\">0</span>\\n\\t<span class=\\\"hljs-keyword\\\">for</span> _, v := <span class=\\\"hljs-keyword\\\">range</span> s {\\n\\t\\tsum += v\\n\\t}\\n\\tc &lt;- sum\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\ts := []<span class=\\\"hljs-keyword\\\">int</span>{<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">4</span>, <span class=\\\"hljs-number\\\">5</span>, <span class=\\\"hljs-number\\\">6</span>, <span class=\\\"hljs-number\\\">7</span>, <span class=\\\"hljs-number\\\">8</span>, <span class=\\\"hljs-number\\\">9</span>, <span class=\\\"hljs-number\\\">10</span>}\\n\\tc := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">chan</span> <span class=\\\"hljs-keyword\\\">int</span>)\\n\\n\\t<span class=\\\"hljs-keyword\\\">go</span> sum(s[:<span class=\\\"hljs-built_in\\\">len</span>(s)/<span class=\\\"hljs-number\\\">2</span>], c)\\n\\t<span class=\\\"hljs-keyword\\\">go</span> sum(s[<span class=\\\"hljs-built_in\\\">len</span>(s)/<span class=\\\"hljs-number\\\">2</span>:], c)\\n\\t<span class=\\\"hljs-keyword\\\">go</span> sum(s, c)\\n\\n\\tx, y := &lt;-c, &lt;-c\\n\\tz := &lt;-c\\n\\n\\tfmt.Println(x, y, z)\\n}\\n\\n<span class=\\\"hljs-comment\\\">// 55 15 40</span>\\n<span class=\\\"hljs-comment\\\">// 55 40 15</span>\\n<span class=\\\"hljs-comment\\\">// 処理終わった順かな？</span></code></pre><h3>バッファ</h3>\\n<p>チャネルはバッファとして使える。 make の 2 つ目の引数にバッファの長さを指定できる。</p>\\n<pre><code class=\\\"hljs\\\">ch := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">chan</span> <span class=\\\"hljs-keyword\\\">int</span>, <span class=\\\"hljs-number\\\">10</span>)</code></pre><p>バッファ数を超えると deadlock になる。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\tch := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">chan</span> <span class=\\\"hljs-keyword\\\">bool</span>, <span class=\\\"hljs-number\\\">2</span>)\\n\\tch &lt;- <span class=\\\"hljs-literal\\\">true</span>\\n\\tch &lt;- <span class=\\\"hljs-literal\\\">true</span>\\n\\tv := &lt;-ch\\n\\tch &lt;- <span class=\\\"hljs-literal\\\">true</span>\\n\\t<span class=\\\"hljs-comment\\\">// ch &lt;- true // この行を入れると deadlock</span>\\n\\n\\tfmt.Println(<span class=\\\"hljs-built_in\\\">len</span>(ch))\\n\\tfmt.Println(&lt;-ch)\\n\\tfmt.Println(&lt;-ch)\\n\\tfmt.Println(v)\\n\\tfmt.Println(<span class=\\\"hljs-built_in\\\">len</span>(ch))\\n}\\n\\n<span class=\\\"hljs-comment\\\">// 2</span>\\n<span class=\\\"hljs-comment\\\">// true</span>\\n<span class=\\\"hljs-comment\\\">// true</span>\\n<span class=\\\"hljs-comment\\\">// true</span>\\n<span class=\\\"hljs-comment\\\">// 0</span></code></pre><h3>close</h3>\\n<p>送信側はチャネルを <em><strong>close</strong></em> できる。<br>\\n受信側はチャネルを <em><strong>close</strong></em> しているか確認できる。<br>\\n受信する値がない、かつチャネルが閉じているなら <em><strong>ok</strong></em> は <em><strong>false</strong></em> になる。</p>\\n<pre><code class=\\\"hljs\\\">v, ok := &lt;- ch</code></pre><p>ループのときはチャネルを使うとチャネルが閉じるまで値を受信し続ける。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">fibonacci</span><span class=\\\"hljs-params\\\">(n <span class=\\\"hljs-keyword\\\">int</span>, c <span class=\\\"hljs-keyword\\\">chan</span> <span class=\\\"hljs-keyword\\\">int</span>)</span></span> {\\n\\tx, y := <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">1</span>\\n\\t<span class=\\\"hljs-keyword\\\">for</span> i := <span class=\\\"hljs-number\\\">0</span>; i &lt; n; i++ {\\n\\t\\tc &lt;- x\\n\\t\\tx, y = y, x+y\\n\\t}\\n\\t<span class=\\\"hljs-built_in\\\">close</span>(c)\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\tc := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">chan</span> <span class=\\\"hljs-keyword\\\">int</span>, <span class=\\\"hljs-number\\\">10</span>)\\n\\t<span class=\\\"hljs-keyword\\\">go</span> fibonacci(<span class=\\\"hljs-built_in\\\">cap</span>(c), c)\\n\\t<span class=\\\"hljs-keyword\\\">for</span> i := <span class=\\\"hljs-keyword\\\">range</span> c {\\n\\t\\tfmt.Println(i)\\n\\t}\\n}\\n\\n<span class=\\\"hljs-comment\\\">// 0</span>\\n<span class=\\\"hljs-comment\\\">// 1</span>\\n<span class=\\\"hljs-comment\\\">// 1</span>\\n<span class=\\\"hljs-comment\\\">// 2</span>\\n<span class=\\\"hljs-comment\\\">// 3</span>\\n<span class=\\\"hljs-comment\\\">// 5</span>\\n<span class=\\\"hljs-comment\\\">// 8</span>\\n<span class=\\\"hljs-comment\\\">// 13</span>\\n<span class=\\\"hljs-comment\\\">// 21</span>\\n<span class=\\\"hljs-comment\\\">// 34</span></code></pre><h2>select</h2>\\n<p><em><strong>select</strong></em> は goroutine を複数の通信操作で待たせる。<br>\\ncase の準備ができるまでブロックする。複数の case が準備できている場合、 case はランダムに実行される。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">fibonacci</span><span class=\\\"hljs-params\\\">(c, quit <span class=\\\"hljs-keyword\\\">chan</span> <span class=\\\"hljs-keyword\\\">int</span>)</span></span> {\\n\\tx, y := <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">1</span>\\n\\t<span class=\\\"hljs-keyword\\\">for</span> {\\n\\t\\t<span class=\\\"hljs-keyword\\\">select</span> {\\n\\t\\t<span class=\\\"hljs-keyword\\\">case</span> c &lt;- x:\\n\\t\\t\\tx, y = y, x+y\\n\\t\\t<span class=\\\"hljs-keyword\\\">case</span> &lt;-quit:\\n\\t\\t\\tfmt.Println(<span class=\\\"hljs-string\\\">&quot;quit&quot;</span>)\\n\\t\\t\\t<span class=\\\"hljs-keyword\\\">return</span>\\n\\t\\t}\\n\\t}\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\tc := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">chan</span> <span class=\\\"hljs-keyword\\\">int</span>)\\n\\tquit := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">chan</span> <span class=\\\"hljs-keyword\\\">int</span>)\\n\\n\\t<span class=\\\"hljs-keyword\\\">go</span> <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\t\\t<span class=\\\"hljs-keyword\\\">for</span> i := <span class=\\\"hljs-number\\\">0</span>; i &lt; <span class=\\\"hljs-number\\\">10</span>; i++ {\\n\\t\\t\\tfmt.Println(&lt;-c)\\n\\t\\t}\\n\\t\\tquit &lt;- <span class=\\\"hljs-number\\\">0</span>\\n\\t}()\\n\\tfibonacci(c, quit)\\n}\\n\\n<span class=\\\"hljs-comment\\\">// 0</span>\\n<span class=\\\"hljs-comment\\\">// 1</span>\\n<span class=\\\"hljs-comment\\\">// 1</span>\\n<span class=\\\"hljs-comment\\\">// 2</span>\\n<span class=\\\"hljs-comment\\\">// 3</span>\\n<span class=\\\"hljs-comment\\\">// 5</span>\\n<span class=\\\"hljs-comment\\\">// 8</span>\\n<span class=\\\"hljs-comment\\\">// 13</span>\\n<span class=\\\"hljs-comment\\\">// 21</span>\\n<span class=\\\"hljs-comment\\\">// 34</span>\\n<span class=\\\"hljs-comment\\\">// quit</span></code></pre><h3>default</h3>\\n<p>ブロックせずに送受信したいときには default を使う。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;time&quot;</span>\\n)\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\ttick := time.Tick(<span class=\\\"hljs-number\\\">100</span> * time.Millisecond)\\n\\tboom := time.Tick(<span class=\\\"hljs-number\\\">500</span> * time.Millisecond)\\n\\n\\t<span class=\\\"hljs-keyword\\\">for</span> {\\n\\t\\t<span class=\\\"hljs-keyword\\\">select</span> {\\n\\t\\t<span class=\\\"hljs-keyword\\\">case</span> &lt;-tick:\\n\\t\\t\\tfmt.Println(<span class=\\\"hljs-string\\\">&quot;tick&quot;</span>)\\n\\t\\t<span class=\\\"hljs-keyword\\\">case</span> &lt;-boom:\\n\\t\\t\\tfmt.Println(<span class=\\\"hljs-string\\\">&quot;boom&quot;</span>)\\n\\t\\t\\t<span class=\\\"hljs-keyword\\\">return</span>\\n\\t\\t<span class=\\\"hljs-keyword\\\">default</span>:\\n\\t\\t\\tfmt.Println(<span class=\\\"hljs-string\\\">&quot;   .&quot;</span>)\\n\\t\\t\\ttime.Sleep(<span class=\\\"hljs-number\\\">50</span> * time.Millisecond)\\n\\t\\t}\\n\\t}\\n}\\n\\n<span class=\\\"hljs-comment\\\">//    .</span>\\n<span class=\\\"hljs-comment\\\">//    .</span>\\n<span class=\\\"hljs-comment\\\">// tick</span>\\n<span class=\\\"hljs-comment\\\">//    .</span>\\n<span class=\\\"hljs-comment\\\">//    .</span>\\n<span class=\\\"hljs-comment\\\">// tick</span>\\n<span class=\\\"hljs-comment\\\">//    .</span>\\n<span class=\\\"hljs-comment\\\">//    .</span>\\n<span class=\\\"hljs-comment\\\">// tick</span>\\n<span class=\\\"hljs-comment\\\">//    .</span>\\n<span class=\\\"hljs-comment\\\">//    .</span>\\n<span class=\\\"hljs-comment\\\">// tick</span>\\n<span class=\\\"hljs-comment\\\">//    .</span>\\n<span class=\\\"hljs-comment\\\">//    .</span>\\n<span class=\\\"hljs-comment\\\">// boom</span></code></pre><h2>sync.Mutex</h2>\\n<p>コンフリクトを避け、 1 度に 1 つの goroutine だけが変数にアクセスできる。<br>\\nGolang の標準パッケージは、排他制御を <em><strong>sync.Mutex</strong></em> と <em><strong>Lock</strong></em> 、 <em><strong>Unlock</strong></em> で提供している。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;sync&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;time&quot;</span>\\n)\\n\\n<span class=\\\"hljs-keyword\\\">type</span> SafeCounter <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\tmu sync.Mutex\\n\\tv  <span class=\\\"hljs-keyword\\\">map</span>[<span class=\\\"hljs-keyword\\\">string</span>]<span class=\\\"hljs-keyword\\\">int</span>\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-params\\\">(c *SafeCounter)</span> <span class=\\\"hljs-title\\\">Inc</span><span class=\\\"hljs-params\\\">(key <span class=\\\"hljs-keyword\\\">string</span>)</span></span> {\\n\\tc.mu.Lock()\\n\\tc.v[key]++\\n\\tc.mu.Unlock()\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-params\\\">(c *SafeCounter)</span> <span class=\\\"hljs-title\\\">Value</span><span class=\\\"hljs-params\\\">(key <span class=\\\"hljs-keyword\\\">string</span>)</span> <span class=\\\"hljs-title\\\">int</span></span> {\\n\\tc.mu.Lock()\\n\\t<span class=\\\"hljs-keyword\\\">defer</span> c.mu.Unlock()\\n\\t<span class=\\\"hljs-keyword\\\">return</span> c.v[key]\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\tc := SafeCounter{\\n\\t\\tv: <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">map</span>[<span class=\\\"hljs-keyword\\\">string</span>]<span class=\\\"hljs-keyword\\\">int</span>),\\n\\t}\\n\\n\\t<span class=\\\"hljs-keyword\\\">for</span> i := <span class=\\\"hljs-number\\\">0</span>; i &lt; <span class=\\\"hljs-number\\\">1000</span>; i++ {\\n\\t\\t<span class=\\\"hljs-keyword\\\">go</span> c.Inc(<span class=\\\"hljs-string\\\">&quot;somekey&quot;</span>)\\n\\t}\\n\\ttime.Sleep(time.Second)\\n\\tfmt.Println(c.Value(<span class=\\\"hljs-string\\\">&quot;somekey&quot;</span>))\\n}\\n\\n<span class=\\\"hljs-comment\\\">// 1000</span></code></pre>\",\n  \"dir\": \"articles\",\n  \"base\": \"20210429010135.json\",\n  \"ext\": \".json\",\n  \"sourceBase\": \"20210429010135.md\",\n  \"sourceExt\": \".md\"\n}"}},"__N_SSG":true}