{"pageProps":{"articleData":{"id":"20210306225218","contentHtml":"\n## Docker\n\n### build\nDockerfile が存在するディレクトリで実行。\n```bash\n$ docker build .\n```\n\n`-f` オプションを付けることでパスを指定できる。\n```bash\n$ docker build -f /path/to/Dockerfile .\n```\n\n`-t` オプションを付けることでリポジトリとタグを指定できる。\n```bash\n$ docker build -t shukes/myapp .\n```\n\n### FROM\nベースイメージを指定。\n```Dockerfile\nFROM <image>[:<tag>][AS <name>]\n```\n\n### RUN\nシェルとして実行される。\n```Dockerfile\nRUN /bin/bash -c 'source $HOME/.bashrc;' \\\necho $HOME\n```\n\n1 行で書く場合。\n```Dockerfile\nRUN /bin/bash -c 'source $HOME/.bashrc; echo $HOME'\n```\n\n`/bash/sh` 以外の別のシェルを使う場合は exec 形式でシェルに引数を渡す。\n```Dockerfile\nRUN [\"/bin/bash\", \"-c\", \"echo hello\"]\n```\n\nexec 形式で書く場合は json 配列として扱われるので `\"\"` で囲む必要がある。\n\n### CMD\nDockerfile 内で CMD 命令は 1 つのみ。\n複数あっても最後の CMD 命令のみが実行される。\n\n**CMD の主目的はコンテナ実行時のデフォルト処理を指定する**\n```Dockerfile\nFROM ubuntu\nCMD [\"/usr/bin/wc\", \"--help\"]\n```\n\n### ADD / COPY\n`<src>` で指定したファイル、ディレクトリをコンテナ内の `<dest>` にコピーする。\n\nADD はリモートファイルをコピー可能で圧縮ファイルの解凍する。\n```bash\nADD <src> <dest>\nCOPY <src> <dest>\n```\n\n## docker-compose\n\n## build\n構築時のオプションを指定。\n```yml\nversion: \"3.8\"\nservices:\n  webapp:\n  build: ./dir\n```\n\n`context` で `Dockerfile` や `args` を指定できる。\n```yml\nversion: \"3.8\"\nservices:\n  webapp:\n    build:\n      context: ./dir\n      dockerfile: Dockerfile-alternate\n      args:\n        buildno: 1\n```\n\n`image` を指定してイメージ名とタグをアタッチできる。\n\nイメージ名が webapp 、タグが tag の場合。\n```yml\nbuild: ./dir\nimage: webapp:tag\n```\n\n### context\nDockerfile を含むディレクトリかリポジトリ URL を指定する。\n```yml\nbuild:\n  context: ./dir\n```\n\n### dockerfile\n別の Dockerfile を指定する。ビルドパスと同時に指定する必要がある。\n```yml\nbuild:\n  context: .\n  dockerfile: Dockerfile-alternate\n```\n\n### args\nビルド引数を追加する。環境変数となりビルド処理の間のみ使用される。\nDockerfile 内ではじめにビルド引数を指定する。\n```yml\nARG buildno\nARG gitcommithash\n\nRUN echo \"Build number: $buildno\"\nRUN echo \"Based on commit: $gitcommithash\"\n```\n\n`build` キーをもとにその引数を指定する。\n\n個々をマッピングするか、リスト形式で書く。\nブール値の場合はクォートで囲む必要がある。\n```yml\nbuild:\n  context: .\n  args:\n    build: 1\n    gitcommithash: cdc3b19\n```\n\n```yml\nbuild:\n  context: .\n  args:\n    - buildno=1\n    - gitcommithash=cdc3b19\n```\n\n### command\nデフォルトコマンドを上書きする。\n```yml\ncommand: build exec thin -p 3000\n```\n\nDockerfile と同じリスト形式でも書ける。\n```yml\ncommand: [\"build\", \"exec\", \"thin\", \"-p\", \"3000\"]\n```\n\n### depends_on\nサービス間の依存関係を表す。\n`docker-compose up` は依存関係順にサービスを起動する。\n\n以下の場合だと、 db と Redis を起動したあとに web を起動する。\n```yml\nversion: \"3.8\"\nservices:\n  web:\n    build: .\n    depends_on:\n      - db\n      - redis\n  redis:\n    image: redis\n  db:\n    image: postgres\n```\n\n### environment\n環境変数を追加する。\n```yml\nenvironment:\n  RACK_ENV: development\n  SHOW: 'true'\n```\n\n```yml\nenvironment:\n  - RACK_ENV=development\n  - SHOW='true'\n```\n\n### expose\nホストマシンにはポートを公開せずにポートを expose する。\nリンクされたサービスのみアクセス可能になる。内部のポートのみ指定可能。\n```yml\nexpose:\n  - \"3000\"\n  - \"8000\"\n```\n\n### ports\n公開用のポートを指定する。\n\nホスト側とコンテナ側のポートを指定する( `HOST:CONTAINER` )。\nもしくは、コンテナ側のポートを指定する。\n```yml\nports:\n  - \"3000\"\n  - \"3000-3005\"\n  - \"8000:8000\"\n  - \"9090-9091:8080-8081\"\n  - \"49100:22\"\n  - \"127.0.0.1:8001:8001\"\n  - \"127.0.0.1:5000-5010:5000-5010\"\n  - \"6060:6060/udp\"\n  - \"12400-12500:1240\"\n```\n\n追加項目がある場合。\n```yml\nports:\n  - target: 80\n    published: 8080\n    protocol: tcp\n    mode: host\n```\n\n### links\n他のサービスのコンテナをリンクさせる。\nリンクされたコンテナは、ホスト名より到達可能になる。\n```yml\nweb:\n  links:\n    - \"db\"\n    - \"db:database\"\n    - \"redis\"\n```\n\n### volumes\n```yml\nversion: \"3.8\"\nservices:\n  web:\n    image: nginx:alpine\n    volumes:\n      - type: volume\n        source: mydata\n        target: /data\n        volume:\n          nocopy: true\n      - type: bind\n        source: ./static\n        target: /opt/app/static\n  db:\n    image: postgres:latest\n    volumes:\n      - \"/var/run/postgres.sock:/var/run/postgres/postgres.sock\"\n      - \"dbdata:/var/lib/postgresql/data\"\nvolumes:\n  mydata:\n  database:\n```\n\n短い書き方では `[SOURCE:]TARGET[:MODE]` と書ける。\n\nro は readonly 。\n```yml\n- ./cache:/tmp/cache:ro\n```\n\n### 変数の置換\nシェル環境に `POSTGRES_VERSION=9.3` が定義されていると postgres のバージョンは 9.3 になる。\n```yml\ndb:\n  image: \"postgres:${POSTGRES_VERSION}\"\n```\n\n環境変数が何も設定されていない場合は空文字になる。\n環境変数のデフォルト値は `.env` ファイルに設定しておくことができる。\n- ${VARIABLE:-default} は VARIABLE がセットされていないか空文字のときに `default` として評価される\n- ${VARIABLE-default} は VARIABLE がセットされていないときのみ `default` として評価される\n","title":"Docker と docker-compose のまとめ","date":20200904095600,"tags":["Docker"]}},"__N_SSG":true}