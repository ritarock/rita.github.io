{"pageProps":{"docBody":{"id":"20211120165745","title":"sql-migrate を試す","content":"\nhttps://github.com/rubenv/sql-migrate を試してみた。\n\n## docker で試す\n通常のアプリを起動する `docker-compose.yml` とは別に `docker-compose.migration.yml` を用意した。\n```yml\nversion: '3'\nservices:\n  db:\n    build:\n      context: ./docker/database\n    restart: always\n    environment:\n      MYSQL_DATABASE: app\n      MYSQL_USER: user\n      MYSQL_PASSWORD: pass\n      MYSQL_ROOT_PASSWORD: pass\n    ports:\n      - 3306:3306\n    volumes:\n      - ./docker/database/mysql:/var/lib/mysql\n  migration:\n    build:\n      context: ./docker/migration\n    volumes:\n      - ./migrations:/work\n    depends_on:\n      - db\n```\n\nmigration 用の Dockerfile はこんな感じ。\n```Dockerfile\nFROM golang:1.17.3\n\nWORKDIR /work\nRUN go get -v github.com/rubenv/sql-migrate/...\n```\n\nmigration コンテナにマウントしてる `./migrations` にはマイグレーション用の SQL と `dbconfig.yml` を置いている。\n\n`dbconfig.yml` では接続する DB の設定を書いておく。\n```yml\ndevelopment:\n    dialect: mysql\n    datasource: user:pass@tcp(db:3306)/app?parseTime=true\n    dir: .\n```\n\nまた sql ファイルには `-- +migrate Up` と `-- +migrate Down` の記述が必要。\n```sql\n-- +migrate Up\nCREATE TABLE topics (\n  id varchar(255),\n  title varchar(255),\n  detail varchar(255)\n);\n\n-- +migrate Down\nDROP TABLE IF EXISTS topics;\n```\n\n## 実行\n```bash\n$ docker-compose -f docker-compose.migration.yml run migration bash\n$ sql-migrate up\n```\n"}},"__N_SSG":true}