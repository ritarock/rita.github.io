{"pageProps":{"docBody":{"id":"20210717123805","title":"Golang の ORM 試した","content":"\n試したリポジトリはここ。\n\nhttps://github.com/ritarock/sandbox/tree/master/golang/sample_gorm\n\n\n## DB に接続\n`gorm.Open(dialect string, args ...interface{})` の第一引数は接続するデータベース、第二引数には接続情報。\n\n今回は Docker で実行したのでコンテナが起動しても mysql は起動していない場合があったので 30 秒待つ処理を入れた。\n```go\nfunc gormConnect() *gorm.DB {\n\tDBMS := \"mysql\"\n\tPROTOCOL := \"tcp(db:3306)\"\n\tUSER := \"user\"\n\tPASS := \"password\"\n\tDBNAME := \"app\"\n\tCONNECT := USER + \":\" + PASS + \"@\" + PROTOCOL + \"/\" + DBNAME + \"?parseTime=true\"\n\n\tvar err error\n\tdb, err := gorm.Open(DBMS, CONNECT)\n\tif err != nil {\n\t\tfmt.Println(\"Not ready\")\n\t\ttime.Sleep(time.Second)\n\t\tcount++\n\t\tif count > 30 {\n\t\t\tpanic(err.Error())\n\t\t}\n\t\treturn gormConnect()\n\t}\n\tfmt.Println(\"Success connect\")\n\treturn db\n}\n```\n\n## モデル\n構造体を定義する。 \n\nフィールドの `ID` は gorm では主キーとなる。 `CreatedAt` と `UpdatedAt` はレコードの作成時と更新時に自動的で設定される。\n```go\ntype Post struct {\n\tID        int\n\tContent   string\n\tAuthor    string `sql:\"not null\"`\n\tComments  []Comment\n\tCreatedAt time.Time\n}\n\ntype Comment struct {\n\tID        int\n\tContent   string\n\tAuthor    string `sql:\"not null\"`\n\tPostId    int\n\tCreatedAt time.Time\n}\n```\n\ngorm ではフィールドタグ ``gorm:\"\"`` を設定すること制約などの設定を行える。\n\n設定できるものは [ここ](https://gorm.io/ja_JP/docs/models.html#Fields-Tags) を参照。\n\n\n## belongs to\nUser は Company に所属している。\n```go\ntype User struct {\n  gorm.Model\n  Name      string\n  CompanyID int\n  Company   Company\n}\n\ntype Company struct {\n  ID   int\n  Name string\n}\n```\n\n## has one\n別のモデルと 1 対 1 の関係。\n```go\ntype User struct {\n  gorm.Model\n  CreditCard CreditCard\n}\n\ntype CreditCard struct {\n  gorm.Model\n  Number string\n  UserID uint\n}\n```\n\n## has many\nUser は CreditCard を複数持っている。\n```go\ntype User struct {\n  gorm.Model\n  CreditCards []CreditCard\n}\n\ntype CreditCard struct {\n  gorm.Model\n  Number string\n  UserID uint\n}\n```\n\n## many to many\nBook は複数の Author を持ち、 Author は複数の本を持っている。\n```go\ntype Book struct {\n  gorm.Model\n  Authors []Author `gorm:\"many2many:author_books\"`\n}\ntype Author struct {\n  gorm.Model\n  Books []Book `gorm:\"many2many:author_books\"`\n}\n```\n\n## マイグレーション\n足りないカラムの追加、変更、インデックスの作成は行うが、不要になったカラムの削除等は行われない。\n```go\ndb.AutoMigrate(&Post{}, &Comment{})\n```\n"}},"__N_SSG":true}