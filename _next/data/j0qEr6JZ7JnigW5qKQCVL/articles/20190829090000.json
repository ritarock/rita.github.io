{"pageProps":{"data":{"id":"20190829090000","fileContents":"{\n  \"title\": \"docker-compose で Rails と Mysql を使う\",\n  \"date\": 20190829090000,\n  \"tags\": [\n    \"docker\",\n    \"rails\",\n    \"setup\"\n  ],\n  \"bodyContent\": \"## ディレクトリ構成\\n```bash\\n./\\n├── Dockerfile\\n├── docker-compose.yml\\n├── db_volume/\\n├── mysql-confd/\\n│   └── default_authentication.cnf\\n└── src/\\n    ├── Gemfile\\n    └── Gemfile.lock\\n```\\n\\n## ファイルの説明\\n### Dockerfile\\nRails のアプリ用の Dockerfile を定義する。\\nMySQL と連携するために mysql-client をインストールしている。\\n```Dockerfile\\nFROM ruby:latest\\n\\nRUN apt-get update -qq && \\\\\\n    apt-get install -y build-essential && \\\\\\n    apt-get install -y libpq-dev && \\\\\\n    apt-get install -y mysql-client && \\\\\\n    apt-get install -y nodejs\\n\\nRUN mkdir /myapp\\nENV APP_ROOT /myapp\\nWORKDIR $APP_ROOT\\nADD ./src/Gemfile $APP_ROOT/Gemfile\\nADD ./src/Gemfile.lock $APP_ROOT/Gemfile.lock\\n\\nRUN bundle install\\nADD ./src/ $APP_ROOT\\n```\\n\\n### docker-compose\\nMySQL のバージョンが 8 以上だと認証でエラーになるので設定ファイルをにマウントする。\\nまた ***./db_volume:/var/lib/mysql*** で DB を永続化している。\\n\\n[参考](https://qiita.com/yensaki/items/9e453b7320ca2d0461c7)  \\n```yaml\\nversion: '3'\\nservices:\\n  db:\\n    image: mysql:latest\\n    volumes:\\n      - ./mysql-confd:/etc/mysql/conf.d\\n      - ./db_volume:/var/lib/mysql\\n    environment:\\n      MYSQL_ROOT_PASSWORD: root\\n      MYSQL_DATABASE: root\\n    ports:\\n      - \\\"3306:3306\\\"\\n\\n  web:\\n    build: .\\n    command: bundle exec rails s -p 3000 -b '0.0.0.0'\\n    volumes:\\n      - ./src:/myapp\\n    ports:\\n      - \\\"3000:3000\\\"\\n    links:\\n      - db\\n```\\n\\n### default_authentication.cnf\\n認証用の設定ファイル。\\n```default_authentication.cnf\\n[mysqld]\\ndefault_authentication_plugin= mysql_native_password\\n```\\n\\n### Gemfile\\n```Gemfile\\nsource 'https://rubygems.org'\\ngem 'rails', '5.1.6'\\n```\\n\\nGemfile.lock も作成しておく ( 中身は空 ) 。\\n```bash\\n$ touch ./src/Gemfile.lock\\n```\\n\\n## プロジェクトの構築\\n```bash\\n$ docker-compose run web rails new . --force --database=mysql --skip-bundle\\n```\\n\\n***--skip-bundle*** で gem のインストールを回避。\\n実行後 ***./src*** 配下に新しいアプリケーションが作成されている。\\n\\n## データベースに接続\\n***./src/config/database.yml*** の password と host を docker-compose で定義した内容に変更。\\n```yaml\\ndefault: &default\\n  adapter: mysql2\\n  encoding: utf8\\n  pool: <%= ENV.fetch(\\\"RAILS_MAX_THREADS\\\") { 5 } %>\\n  username: root\\n  password: root\\n  host: db\\n```\\n\\n## dockerの起動\\nビルド。\\n```bash\\n$ docker-compose build\\n```\\n\\n起動。\\n```bash\\n$ docker-compose up\\n```\\n\\n## DBの作成\\n```bash\\n$ docker-compose run web rails db:create\\n```\\n\\n## 確認\\nブラウザで localhost:3000 にアクセス。\\n\\nRails のコンテナにアクセスして DB との接続確認。\\n```bash\\n$ docker exec -it コンテナID /bin/bash\\n```\\n\\n接続したコンテナから DB に接続。\\n```bash\\n$ rails dbconsole\\n```\",\n  \"bodyHtml\": \"<h2>ディレクトリ構成</h2>\\n<pre><code class=\\\"hljs\\\">./\\n├── Dockerfile\\n├── docker-compose.yml\\n├── db_volume/\\n├── mysql-confd/\\n│   └── default_authentication.cnf\\n└── src/\\n    ├── Gemfile\\n    └── Gemfile.lock</code></pre><h2>ファイルの説明</h2>\\n<h3>Dockerfile</h3>\\n<p>Rails のアプリ用の Dockerfile を定義する。\\nMySQL と連携するために mysql-client をインストールしている。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">FROM</span> ruby:latest\\n\\n<span class=\\\"hljs-keyword\\\">RUN</span><span class=\\\"bash\\\"> apt-get update -qq &amp;&amp; \\\\\\n    apt-get install -y build-essential &amp;&amp; \\\\\\n    apt-get install -y libpq-dev &amp;&amp; \\\\\\n    apt-get install -y mysql-client &amp;&amp; \\\\\\n    apt-get install -y nodejs</span>\\n\\n<span class=\\\"hljs-keyword\\\">RUN</span><span class=\\\"bash\\\"> mkdir /myapp</span>\\n<span class=\\\"hljs-keyword\\\">ENV</span> APP_ROOT /myapp\\n<span class=\\\"hljs-keyword\\\">WORKDIR</span><span class=\\\"bash\\\"> <span class=\\\"hljs-variable\\\">$APP_ROOT</span></span>\\n<span class=\\\"hljs-keyword\\\">ADD</span><span class=\\\"bash\\\"> ./src/Gemfile <span class=\\\"hljs-variable\\\">$APP_ROOT</span>/Gemfile</span>\\n<span class=\\\"hljs-keyword\\\">ADD</span><span class=\\\"bash\\\"> ./src/Gemfile.lock <span class=\\\"hljs-variable\\\">$APP_ROOT</span>/Gemfile.lock</span>\\n\\n<span class=\\\"hljs-keyword\\\">RUN</span><span class=\\\"bash\\\"> bundle install</span>\\n<span class=\\\"hljs-keyword\\\">ADD</span><span class=\\\"bash\\\"> ./src/ <span class=\\\"hljs-variable\\\">$APP_ROOT</span></span></code></pre><h3>docker-compose</h3>\\n<p>MySQL のバージョンが 8 以上だと認証でエラーになるので設定ファイルをにマウントする。\\nまた <em><strong>./db_volume:/var/lib/mysql</strong></em> で DB を永続化している。</p>\\n<p><a href=\\\"https://qiita.com/yensaki/items/9e453b7320ca2d0461c7\\\">参考</a></p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">version:</span> <span class=\\\"hljs-string\\\">&#x27;3&#x27;</span>\\n<span class=\\\"hljs-attr\\\">services:</span>\\n  <span class=\\\"hljs-attr\\\">db:</span>\\n    <span class=\\\"hljs-attr\\\">image:</span> <span class=\\\"hljs-string\\\">mysql:latest</span>\\n    <span class=\\\"hljs-attr\\\">volumes:</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">./mysql-confd:/etc/mysql/conf.d</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">./db_volume:/var/lib/mysql</span>\\n    <span class=\\\"hljs-attr\\\">environment:</span>\\n      <span class=\\\"hljs-attr\\\">MYSQL_ROOT_PASSWORD:</span> <span class=\\\"hljs-string\\\">root</span>\\n      <span class=\\\"hljs-attr\\\">MYSQL_DATABASE:</span> <span class=\\\"hljs-string\\\">root</span>\\n    <span class=\\\"hljs-attr\\\">ports:</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;3306:3306&quot;</span>\\n\\n  <span class=\\\"hljs-attr\\\">web:</span>\\n    <span class=\\\"hljs-attr\\\">build:</span> <span class=\\\"hljs-string\\\">.</span>\\n    <span class=\\\"hljs-attr\\\">command:</span> <span class=\\\"hljs-string\\\">bundle</span> <span class=\\\"hljs-string\\\">exec</span> <span class=\\\"hljs-string\\\">rails</span> <span class=\\\"hljs-string\\\">s</span> <span class=\\\"hljs-string\\\">-p</span> <span class=\\\"hljs-number\\\">3000</span> <span class=\\\"hljs-string\\\">-b</span> <span class=\\\"hljs-string\\\">&#x27;0.0.0.0&#x27;</span>\\n    <span class=\\\"hljs-attr\\\">volumes:</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">./src:/myapp</span>\\n    <span class=\\\"hljs-attr\\\">ports:</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;3000:3000&quot;</span>\\n    <span class=\\\"hljs-attr\\\">links:</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">db</span></code></pre><h3>default_authentication.cnf</h3>\\n<p>認証用の設定ファイル。</p>\\n<pre><code class=\\\"hljs\\\">[mysqld]\\ndefault_authentication_plugin= mysql_native_password</code></pre><h3>Gemfile</h3>\\n<pre><code class=\\\"hljs\\\">source &#x27;https://rubygems.org&#x27;\\ngem &#x27;rails&#x27;, &#x27;5.1.6&#x27;</code></pre><p>Gemfile.lock も作成しておく ( 中身は空 ) 。</p>\\n<pre><code class=\\\"hljs\\\">$ touch ./src/Gemfile.lock</code></pre><h2>プロジェクトの構築</h2>\\n<pre><code class=\\\"hljs\\\">$ docker-compose run web rails new . --force --database=mysql --skip-bundle</code></pre><p><em><strong>--skip-bundle</strong></em> で gem のインストールを回避。\\n実行後 <em><strong>./src</strong></em> 配下に新しいアプリケーションが作成されている。</p>\\n<h2>データベースに接続</h2>\\n<p><em><strong>./src/config/database.yml</strong></em> の password と host を docker-compose で定義した内容に変更。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-attr\\\">default:</span> <span class=\\\"hljs-meta\\\">&amp;default</span>\\n  <span class=\\\"hljs-attr\\\">adapter:</span> <span class=\\\"hljs-string\\\">mysql2</span>\\n  <span class=\\\"hljs-attr\\\">encoding:</span> <span class=\\\"hljs-string\\\">utf8</span>\\n  <span class=\\\"hljs-attr\\\">pool:</span> &lt;%=<span class=\\\"ruby\\\"> ENV.fetch(<span class=\\\"hljs-string\\\">&quot;RAILS_MAX_THREADS&quot;</span>) { <span class=\\\"hljs-number\\\">5</span> } </span>%&gt;\\n  <span class=\\\"hljs-attr\\\">username:</span> <span class=\\\"hljs-string\\\">root</span>\\n  <span class=\\\"hljs-attr\\\">password:</span> <span class=\\\"hljs-string\\\">root</span>\\n  <span class=\\\"hljs-attr\\\">host:</span> <span class=\\\"hljs-string\\\">db</span></code></pre><h2>dockerの起動</h2>\\n<p>ビルド。</p>\\n<pre><code class=\\\"hljs\\\">$ docker-compose build</code></pre><p>起動。</p>\\n<pre><code class=\\\"hljs\\\">$ docker-compose up</code></pre><h2>DBの作成</h2>\\n<pre><code class=\\\"hljs\\\">$ docker-compose run web rails db:create</code></pre><h2>確認</h2>\\n<p>ブラウザで localhost:3000 にアクセス。</p>\\n<p>Rails のコンテナにアクセスして DB との接続確認。</p>\\n<pre><code class=\\\"hljs\\\">$ docker <span class=\\\"hljs-built_in\\\">exec</span> -it コンテナID /bin/bash</code></pre><p>接続したコンテナから DB に接続。</p>\\n<pre><code class=\\\"hljs\\\">$ rails dbconsole</code></pre>\",\n  \"dir\": \"articles\",\n  \"base\": \"20190829090000.json\",\n  \"ext\": \".json\",\n  \"sourceBase\": \"20190829090000.md\",\n  \"sourceExt\": \".md\"\n}"}},"__N_SSG":true}