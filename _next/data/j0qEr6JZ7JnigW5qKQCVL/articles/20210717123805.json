{"pageProps":{"data":{"id":"20210717123805","fileContents":"{\n  \"title\": \"Golang の ORM 試した\",\n  \"date\": 20210717123805,\n  \"tags\": [\n    \"golang\"\n  ],\n  \"bodyContent\": \"試したリポジトリはここ。\\n\\nhttps://github.com/ritarock/sandbox/tree/master/golang/sample_gorm\\n\\n\\n## DB に接続\\n***gorm.Open(dialect string, args ...interface{})*** の第一引数には接続するデータベース、第二引数には接続情報。\\n\\n今回は Docker で実行したのでコンテナが起動しても mysql は起動していない場合があったので 30 秒待つ処理を入れた。\\n```go\\nfunc gormConnect() *gorm.DB {\\n\\tDBMS := \\\"mysql\\\"\\n\\tPROTOCOL := \\\"tcp(db:3306)\\\"\\n\\tUSER := \\\"user\\\"\\n\\tPASS := \\\"password\\\"\\n\\tDBNAME := \\\"app\\\"\\n\\tCONNECT := USER + \\\":\\\" + PASS + \\\"@\\\" + PROTOCOL + \\\"/\\\" + DBNAME + \\\"?parseTime=true\\\"\\n\\n\\tvar err error\\n\\tdb, err := gorm.Open(DBMS, CONNECT)\\n\\tif err != nil {\\n\\t\\tfmt.Println(\\\"Not ready\\\")\\n\\t\\ttime.Sleep(time.Second)\\n\\t\\tcount++\\n\\t\\tif count > 30 {\\n\\t\\t\\tpanic(err.Error())\\n\\t\\t}\\n\\t\\treturn gormConnect()\\n\\t}\\n\\tfmt.Println(\\\"Success connect\\\")\\n\\treturn db\\n}\\n```\\n\\n## モデル\\n構造体を定義する。 \\n\\nフィールドの ***ID*** は gorm では主キーとなる。 ***CreatedAt*** と ***UpdatedAt*** はレコードの作成時と更新時に自動的で設定される。\\n```go\\ntype Post struct {\\n\\tID        int\\n\\tContent   string\\n\\tAuthor    string `sql:\\\"not null\\\"`\\n\\tComments  []Comment\\n\\tCreatedAt time.Time\\n}\\n\\ntype Comment struct {\\n\\tID        int\\n\\tContent   string\\n\\tAuthor    string `sql:\\\"not null\\\"`\\n\\tPostId    int\\n\\tCreatedAt time.Time\\n}\\n```\\n\\ngorm ではフィールドタグ　***`gorm:\\\"\\\"`*** を設定すること制約などの設定を行える。\\n\\n設定できるものは [ここ](https://gorm.io/ja_JP/docs/models.html#Fields-Tags) を参照。\\n\\n\\n## belongs to\\nUser は Company に所属している。\\n```go\\ntype User struct {\\n  gorm.Model\\n  Name      string\\n  CompanyID int\\n  Company   Company\\n}\\n\\ntype Company struct {\\n  ID   int\\n  Name string\\n}\\n```\\n\\n## has one\\n別のモデルと 1 対 1 の関係。\\n```go\\ntype User struct {\\n  gorm.Model\\n  CreditCard CreditCard\\n}\\n\\ntype CreditCard struct {\\n  gorm.Model\\n  Number string\\n  UserID uint\\n}\\n```\\n\\n## has many\\nUser は CreditCard を複数持っている。\\n```go\\ntype User struct {\\n  gorm.Model\\n  CreditCards []CreditCard\\n}\\n\\ntype CreditCard struct {\\n  gorm.Model\\n  Number string\\n  UserID uint\\n}\\n```\\n\\n## many to many\\nBook は複数の Author を持ち、 Author は複数の本を持っている。\\n```go\\ntype Book struct {\\n  gorm.Model\\n  Authors []Author `gorm:\\\"many2many:author_books\\\"`\\n}\\ntype Author struct {\\n  gorm.Model\\n  Books []Book `gorm:\\\"many2many:author_books\\\"`\\n}\\n```\\n\\n## マイグレーション\\n足りないカラムの追加、変更、インデックスの作成は行うが、不要になったカラムの削除等は行われない。\\n```go\\ndb.AutoMigrate(&Post{}, &Comment{})\\n```\",\n  \"bodyHtml\": \"<p>試したリポジトリはここ。</p>\\n<p>https://github.com/ritarock/sandbox/tree/master/golang/sample_gorm</p>\\n<h2>DB に接続</h2>\\n<p><em><strong>gorm.Open(dialect string, args ...interface{})</strong></em> の第一引数には接続するデータベース、第二引数には接続情報。</p>\\n<p>今回は Docker で実行したのでコンテナが起動しても mysql は起動していない場合があったので 30 秒待つ処理を入れた。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">gormConnect</span><span class=\\\"hljs-params\\\">()</span> *<span class=\\\"hljs-title\\\">gorm</span>.<span class=\\\"hljs-title\\\">DB</span></span> {\\n\\tDBMS := <span class=\\\"hljs-string\\\">&quot;mysql&quot;</span>\\n\\tPROTOCOL := <span class=\\\"hljs-string\\\">&quot;tcp(db:3306)&quot;</span>\\n\\tUSER := <span class=\\\"hljs-string\\\">&quot;user&quot;</span>\\n\\tPASS := <span class=\\\"hljs-string\\\">&quot;password&quot;</span>\\n\\tDBNAME := <span class=\\\"hljs-string\\\">&quot;app&quot;</span>\\n\\tCONNECT := USER + <span class=\\\"hljs-string\\\">&quot;:&quot;</span> + PASS + <span class=\\\"hljs-string\\\">&quot;@&quot;</span> + PROTOCOL + <span class=\\\"hljs-string\\\">&quot;/&quot;</span> + DBNAME + <span class=\\\"hljs-string\\\">&quot;?parseTime=true&quot;</span>\\n\\n\\t<span class=\\\"hljs-keyword\\\">var</span> err error\\n\\tdb, err := gorm.Open(DBMS, CONNECT)\\n\\t<span class=\\\"hljs-keyword\\\">if</span> err != <span class=\\\"hljs-literal\\\">nil</span> {\\n\\t\\tfmt.Println(<span class=\\\"hljs-string\\\">&quot;Not ready&quot;</span>)\\n\\t\\ttime.Sleep(time.Second)\\n\\t\\tcount++\\n\\t\\t<span class=\\\"hljs-keyword\\\">if</span> count &gt; <span class=\\\"hljs-number\\\">30</span> {\\n\\t\\t\\t<span class=\\\"hljs-built_in\\\">panic</span>(err.Error())\\n\\t\\t}\\n\\t\\t<span class=\\\"hljs-keyword\\\">return</span> gormConnect()\\n\\t}\\n\\tfmt.Println(<span class=\\\"hljs-string\\\">&quot;Success connect&quot;</span>)\\n\\t<span class=\\\"hljs-keyword\\\">return</span> db\\n}</code></pre><h2>モデル</h2>\\n<p>構造体を定義する。</p>\\n<p>フィールドの <em><strong>ID</strong></em> は gorm では主キーとなる。 <em><strong>CreatedAt</strong></em> と <em><strong>UpdatedAt</strong></em> はレコードの作成時と更新時に自動的で設定される。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">type</span> Post <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\tID        <span class=\\\"hljs-keyword\\\">int</span>\\n\\tContent   <span class=\\\"hljs-keyword\\\">string</span>\\n\\tAuthor    <span class=\\\"hljs-keyword\\\">string</span> <span class=\\\"hljs-string\\\">`sql:&quot;not null&quot;`</span>\\n\\tComments  []Comment\\n\\tCreatedAt time.Time\\n}\\n\\n<span class=\\\"hljs-keyword\\\">type</span> Comment <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\tID        <span class=\\\"hljs-keyword\\\">int</span>\\n\\tContent   <span class=\\\"hljs-keyword\\\">string</span>\\n\\tAuthor    <span class=\\\"hljs-keyword\\\">string</span> <span class=\\\"hljs-string\\\">`sql:&quot;not null&quot;`</span>\\n\\tPostId    <span class=\\\"hljs-keyword\\\">int</span>\\n\\tCreatedAt time.Time\\n}</code></pre><p>gorm ではフィールドタグ　<em><strong><code>gorm:&quot;&quot;</code></strong></em> を設定すること制約などの設定を行える。</p>\\n<p>設定できるものは <a href=\\\"https://gorm.io/ja_JP/docs/models.html#Fields-Tags\\\">ここ</a> を参照。</p>\\n<h2>belongs to</h2>\\n<p>User は Company に所属している。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">type</span> User <span class=\\\"hljs-keyword\\\">struct</span> {\\n  gorm.Model\\n  Name      <span class=\\\"hljs-keyword\\\">string</span>\\n  CompanyID <span class=\\\"hljs-keyword\\\">int</span>\\n  Company   Company\\n}\\n\\n<span class=\\\"hljs-keyword\\\">type</span> Company <span class=\\\"hljs-keyword\\\">struct</span> {\\n  ID   <span class=\\\"hljs-keyword\\\">int</span>\\n  Name <span class=\\\"hljs-keyword\\\">string</span>\\n}</code></pre><h2>has one</h2>\\n<p>別のモデルと 1 対 1 の関係。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">type</span> User <span class=\\\"hljs-keyword\\\">struct</span> {\\n  gorm.Model\\n  CreditCard CreditCard\\n}\\n\\n<span class=\\\"hljs-keyword\\\">type</span> CreditCard <span class=\\\"hljs-keyword\\\">struct</span> {\\n  gorm.Model\\n  Number <span class=\\\"hljs-keyword\\\">string</span>\\n  UserID <span class=\\\"hljs-keyword\\\">uint</span>\\n}</code></pre><h2>has many</h2>\\n<p>User は CreditCard を複数持っている。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">type</span> User <span class=\\\"hljs-keyword\\\">struct</span> {\\n  gorm.Model\\n  CreditCards []CreditCard\\n}\\n\\n<span class=\\\"hljs-keyword\\\">type</span> CreditCard <span class=\\\"hljs-keyword\\\">struct</span> {\\n  gorm.Model\\n  Number <span class=\\\"hljs-keyword\\\">string</span>\\n  UserID <span class=\\\"hljs-keyword\\\">uint</span>\\n}</code></pre><h2>many to many</h2>\\n<p>Book は複数の Author を持ち、 Author は複数の本を持っている。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">type</span> Book <span class=\\\"hljs-keyword\\\">struct</span> {\\n  gorm.Model\\n  Authors []Author <span class=\\\"hljs-string\\\">`gorm:&quot;many2many:author_books&quot;`</span>\\n}\\n<span class=\\\"hljs-keyword\\\">type</span> Author <span class=\\\"hljs-keyword\\\">struct</span> {\\n  gorm.Model\\n  Books []Book <span class=\\\"hljs-string\\\">`gorm:&quot;many2many:author_books&quot;`</span>\\n}</code></pre><h2>マイグレーション</h2>\\n<p>足りないカラムの追加、変更、インデックスの作成は行うが、不要になったカラムの削除等は行われない。</p>\\n<pre><code class=\\\"hljs\\\">db.AutoMigrate(&amp;Post{}, &amp;Comment{})</code></pre>\",\n  \"dir\": \"articles\",\n  \"base\": \"20210717123805.json\",\n  \"ext\": \".json\",\n  \"sourceBase\": \"20210717123805.md\",\n  \"sourceExt\": \".md\"\n}"}},"__N_SSG":true}