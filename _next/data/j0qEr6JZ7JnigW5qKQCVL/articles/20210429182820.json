{"pageProps":{"data":{"id":"20210429182820","fileContents":"{\n  \"title\": \"Golang の 並列 / 並行 処理でいろいろ\",\n  \"date\": 20210429182820,\n  \"tags\": [\n    \"golang\"\n  ],\n  \"bodyContent\": \"## 並列 / 並行 処理\\n- 並列処理\\n  - Parallelism\\n    - 同時に同じ処理が複数走る\\n- 並行処理\\n  - Concurrency\\n    - 同時に色々な処理が走る\\n\\n## channel を使う\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"time\\\"\\n)\\n\\nfunc process(num int, str string) {\\n\\tfor i := 0; i < num; i++ {\\n\\t\\ttime.Sleep(1 * time.Second)\\n\\t\\tfmt.Println(i, str)\\n\\t}\\n}\\n\\nfunc main() {\\n\\tfmt.Println(\\\"Start\\\")\\n\\tprocess(2, \\\"A\\\")\\n\\tprocess(2, \\\"B\\\")\\n\\tprocess(2, \\\"C\\\")\\n\\tfmt.Println(\\\"Finish\\\")\\n}\\n\\n// Start\\n// 0 A\\n// 1 A\\n// 0 B\\n// 1 B\\n// 0 C\\n// 1 C\\n// Finish\\n// \\n// ________________________________________________________\\n// Executed in    6.30 secs      fish           external\\n//    usr time  192.00 millis  172.00 micros  191.83 millis\\n//    sys time  201.91 millis  759.00 micros  201.15 millis\\n```\\n\\nprocess の処理を並列化する。\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"time\\\"\\n)\\n\\nfunc process(num int, str string) {\\n\\tfor i := 0; i < num; i++ {\\n\\t\\ttime.Sleep(1 * time.Second)\\n\\t\\tfmt.Println(i, str)\\n\\t}\\n}\\n\\n\\nfunc main() {\\n\\tchA := make(chan bool)\\n\\tchB := make(chan bool)\\n\\tchC := make(chan bool)\\n\\tfmt.Println(\\\"Start\\\")\\n\\n\\tgo func() {\\n\\t\\tprocess(2, \\\"A\\\")\\n\\t\\tchA <- true\\n\\t}()\\n\\n\\tgo func() {\\n\\t\\tprocess(2, \\\"B\\\")\\n\\t\\tchB <- true\\n\\t}()\\n\\n\\tgo func() {\\n\\t\\tprocess(2, \\\"C\\\")\\n\\t\\tchC <- true\\n\\t}()\\n\\n\\t<-chA\\n\\t<-chB\\n\\t<-chC\\n\\n\\tfmt.Println(\\\"Finish\\\")\\n}\\n\\n// Start\\n// 0 B\\n// 0 A\\n// 0 C\\n// 1 C\\n// 1 A\\n// 1 B\\n// Finish\\n// \\n// ________________________________________________________\\n// Executed in    2.29 secs      fish           external\\n//    usr time  194.02 millis  178.00 micros  193.84 millis\\n//    sys time  207.43 millis  862.00 micros  206.57 millis\\n```\\n\\n## sync.WaitGroup を使う\\n```go\\npackage main\\n\\nimport \\\"fmt\\\"\\n\\ntype Item struct {\\n\\tId   int\\n\\tName string\\n}\\n\\nfunc execLoop(list []Item) {\\n\\tfor _, item := range list {\\n\\t\\tdoSomething(item)\\n\\t}\\n}\\n\\nfunc doSomething(item Item) {\\n\\titem.Id += 10\\n\\tfmt.Println(item)\\n}\\n\\nfunc main() {\\n\\tlist := []Item{\\n\\t\\t{Id: 1, Name: \\\"item1\\\"},\\n\\t\\t{Id: 2, Name: \\\"item2\\\"},\\n\\t\\t{Id: 3, Name: \\\"item3\\\"},\\n\\t\\t{Id: 4, Name: \\\"item4\\\"},\\n\\t\\t{Id: 5, Name: \\\"item5\\\"},\\n\\t}\\n\\n\\texecLoop(list)\\n}\\n\\n// {11 item1}\\n// {12 item2}\\n// {13 item3}\\n// {14 item4}\\n// {15 item5}\\n```\\n\\nループ内の処理を並列化する。\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"sync\\\"\\n)\\n\\ntype Item struct {\\n\\tId   int\\n\\tName string\\n}\\n\\nfunc execLoop(list []Item) {\\n\\tvar wg sync.WaitGroup\\n\\tfor _, item := range list {\\n\\t\\twg.Add(1)\\n\\t\\tgo func(item2 Item) {\\n\\t\\t\\tdefer wg.Done()\\n\\t\\t\\tdoSomething(item2)\\n\\t\\t}(item)\\n\\t}\\n\\twg.Wait()\\n}\\n\\nfunc doSomething(item Item) {\\n\\titem.Id += 10\\n\\tfmt.Println(item)\\n}\\n\\nfunc main() {\\n\\tlist := []Item{\\n\\t\\t{Id: 1, Name: \\\"item1\\\"},\\n\\t\\t{Id: 2, Name: \\\"item2\\\"},\\n\\t\\t{Id: 3, Name: \\\"item3\\\"},\\n\\t\\t{Id: 4, Name: \\\"item4\\\"},\\n\\t\\t{Id: 5, Name: \\\"item5\\\"},\\n\\t}\\n\\n\\texecLoop(list)\\n}\\n\\n// {15 item5}\\n// {11 item1}\\n// {14 item4}\\n// {13 item3}\\n// {12 item2}\\n```\\n\\n## sync.Mutex を使う\\n```go\\npackage main\\n\\nimport \\\"fmt\\\"\\n\\ntype myClass struct {\\n\\tAttributeName string\\n}\\n\\nfunc main() {\\n\\tsourceSlice := make([]myClass, 100)\\n\\tdestSlice := make([]myClass, 0)\\n\\n\\tfor _, myObj := range sourceSlice {\\n\\t\\tvar tmpObj myClass\\n\\t\\ttmpObj.AttributeName = myObj.AttributeName\\n\\t\\tdestSlice = append(destSlice, tmpObj)\\n\\t}\\n\\tfmt.Println(len(destSlice))\\n}\\n\\n// 100\\n```\\n\\nsync.WaitGroup を使う。(ダメな例)\\nappend はスレッドセーフではないので件数が減る。\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"sync\\\"\\n)\\n\\ntype myClass struct {\\n\\tAttributeName string\\n}\\n\\nfunc main() {\\n\\tsourceSlice := make([]myClass, 100)\\n\\tdestSlice := make([]myClass, 0)\\n\\n\\tvar wg sync.WaitGroup\\n\\tfor _, myObj := range sourceSlice {\\n\\t\\twg.Add(1)\\n\\t\\tgo func(myObj2 myClass) {\\n\\t\\t\\tdefer wg.Done()\\n\\t\\t\\tvar tmpObj myClass\\n\\t\\t\\ttmpObj.AttributeName = myObj2.AttributeName\\n\\t\\t\\tdestSlice = append(destSlice, tmpObj)\\n\\t\\t}(myObj)\\n\\t}\\n\\twg.Wait()\\n\\tfmt.Println(len(destSlice))\\n}\\n\\n// 75\\n```\\n\\n***-race*** を付けることで競合のチェックができる。\\n```bash\\n$ go run -race main.go\\n\\n~~ 省略 ~~\\n==================\\n97\\n```\\n\\nsync.Mutex を使う。\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"sync\\\"\\n)\\n\\ntype myClass struct {\\n\\tAttributeName string\\n}\\n\\nfunc main() {\\n\\tsourceSlice := make([]myClass, 100)\\n\\tdestSlice := make([]myClass, 0)\\n\\n\\tvar wg sync.WaitGroup\\n\\tmu := &sync.Mutex{}\\n\\tfor _, myObj := range sourceSlice {\\n\\t\\twg.Add(1)\\n\\t\\tgo func(myObj2 myClass) {\\n\\t\\t\\tdefer wg.Done()\\n\\t\\t\\tvar tmpObj myClass\\n\\t\\t\\ttmpObj.AttributeName = myObj2.AttributeName\\n\\t\\t\\tmu.Lock()\\n\\t\\t\\tdestSlice = append(destSlice, tmpObj)\\n\\t\\t\\tmu.Unlock()\\n\\t\\t}(myObj)\\n\\t}\\n\\twg.Wait()\\n\\tfmt.Println(len(destSlice))\\n}\\n\\n// 100\\n```\\n\\n## ポーリング\\n***len(q)*** は溜まったバッファ数を返す。  \\n***make*** で作るときはバッファ数を 2 以上で作らないと ***len(q)*** は常に 0 を返す。\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"time\\\"\\n)\\n\\nfunc main() {\\n\\tq := make(chan struct{}, 2)\\n\\n\\tgo func() {\\n\\t\\t// 重たい処理\\n\\t\\ttime.Sleep(3 * time.Second)\\n\\t\\tq <- struct{}{}\\n\\t}()\\n\\n\\tfor {\\n\\t\\tif len(q) > 0 {\\n\\t\\t\\tfmt.Println(\\\"完了\\\")\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t\\ttime.Sleep(1 * time.Second)\\n\\t\\tfmt.Println(\\\"実行中\\\")\\n\\t}\\n}\\n\\n// 実行中\\n// 実行中\\n// 実行中\\n// 完了\\n```\\n\\n## ワーカー\\n***close(q)*** されたら ***str, ok := <- q*** の ***ok*** が ***false*** になる。\\n```go\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"sync\\\"\\n\\t\\\"time\\\"\\n)\\n\\nfunc printString(wg *sync.WaitGroup, q chan string) {\\n\\tdefer wg.Done()\\n\\n\\tfor {\\n\\t\\tstr, ok := <-q\\n\\t\\tif !ok {\\n\\t\\t\\treturn\\n\\t\\t}\\n\\n\\t\\tfmt.Println(str)\\n\\t\\ttime.Sleep(3 * time.Second)\\n\\t}\\n}\\n\\nfunc main() {\\n\\tconst workerNum = 3\\n\\tvar wg sync.WaitGroup\\n\\tq := make(chan string, 5)\\n\\n\\tfor i := 0; i < workerNum; i++ {\\n\\t\\twg.Add(1)\\n\\t\\tgo printString(&wg, q)\\n\\t}\\n\\n\\tq <- \\\"test1\\\"\\n\\tq <- \\\"test2\\\"\\n\\tq <- \\\"test3\\\"\\n\\tq <- \\\"test4\\\"\\n\\tq <- \\\"test5\\\"\\n\\tclose(q)\\n\\twg.Wait()\\n}\\n\\n// test2\\n// test1\\n// test3\\n// test5\\n// test4\\n```\",\n  \"bodyHtml\": \"<h2>並列 / 並行 処理</h2>\\n<ul>\\n<li>並列処理\\n<ul>\\n<li>Parallelism\\n<ul>\\n<li>同時に同じ処理が複数走る</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>並行処理\\n<ul>\\n<li>Concurrency\\n<ul>\\n<li>同時に色々な処理が走る</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>channel を使う</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;time&quot;</span>\\n)\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">process</span><span class=\\\"hljs-params\\\">(num <span class=\\\"hljs-keyword\\\">int</span>, str <span class=\\\"hljs-keyword\\\">string</span>)</span></span> {\\n\\t<span class=\\\"hljs-keyword\\\">for</span> i := <span class=\\\"hljs-number\\\">0</span>; i &lt; num; i++ {\\n\\t\\ttime.Sleep(<span class=\\\"hljs-number\\\">1</span> * time.Second)\\n\\t\\tfmt.Println(i, str)\\n\\t}\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\tfmt.Println(<span class=\\\"hljs-string\\\">&quot;Start&quot;</span>)\\n\\tprocess(<span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-string\\\">&quot;A&quot;</span>)\\n\\tprocess(<span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-string\\\">&quot;B&quot;</span>)\\n\\tprocess(<span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-string\\\">&quot;C&quot;</span>)\\n\\tfmt.Println(<span class=\\\"hljs-string\\\">&quot;Finish&quot;</span>)\\n}\\n\\n<span class=\\\"hljs-comment\\\">// Start</span>\\n<span class=\\\"hljs-comment\\\">// 0 A</span>\\n<span class=\\\"hljs-comment\\\">// 1 A</span>\\n<span class=\\\"hljs-comment\\\">// 0 B</span>\\n<span class=\\\"hljs-comment\\\">// 1 B</span>\\n<span class=\\\"hljs-comment\\\">// 0 C</span>\\n<span class=\\\"hljs-comment\\\">// 1 C</span>\\n<span class=\\\"hljs-comment\\\">// Finish</span>\\n<span class=\\\"hljs-comment\\\">// </span>\\n<span class=\\\"hljs-comment\\\">// ________________________________________________________</span>\\n<span class=\\\"hljs-comment\\\">// Executed in    6.30 secs      fish           external</span>\\n<span class=\\\"hljs-comment\\\">//    usr time  192.00 millis  172.00 micros  191.83 millis</span>\\n<span class=\\\"hljs-comment\\\">//    sys time  201.91 millis  759.00 micros  201.15 millis</span></code></pre><p>process の処理を並列化する。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;time&quot;</span>\\n)\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">process</span><span class=\\\"hljs-params\\\">(num <span class=\\\"hljs-keyword\\\">int</span>, str <span class=\\\"hljs-keyword\\\">string</span>)</span></span> {\\n\\t<span class=\\\"hljs-keyword\\\">for</span> i := <span class=\\\"hljs-number\\\">0</span>; i &lt; num; i++ {\\n\\t\\ttime.Sleep(<span class=\\\"hljs-number\\\">1</span> * time.Second)\\n\\t\\tfmt.Println(i, str)\\n\\t}\\n}\\n\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\tchA := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">chan</span> <span class=\\\"hljs-keyword\\\">bool</span>)\\n\\tchB := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">chan</span> <span class=\\\"hljs-keyword\\\">bool</span>)\\n\\tchC := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">chan</span> <span class=\\\"hljs-keyword\\\">bool</span>)\\n\\tfmt.Println(<span class=\\\"hljs-string\\\">&quot;Start&quot;</span>)\\n\\n\\t<span class=\\\"hljs-keyword\\\">go</span> <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\t\\tprocess(<span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-string\\\">&quot;A&quot;</span>)\\n\\t\\tchA &lt;- <span class=\\\"hljs-literal\\\">true</span>\\n\\t}()\\n\\n\\t<span class=\\\"hljs-keyword\\\">go</span> <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\t\\tprocess(<span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-string\\\">&quot;B&quot;</span>)\\n\\t\\tchB &lt;- <span class=\\\"hljs-literal\\\">true</span>\\n\\t}()\\n\\n\\t<span class=\\\"hljs-keyword\\\">go</span> <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\t\\tprocess(<span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-string\\\">&quot;C&quot;</span>)\\n\\t\\tchC &lt;- <span class=\\\"hljs-literal\\\">true</span>\\n\\t}()\\n\\n\\t&lt;-chA\\n\\t&lt;-chB\\n\\t&lt;-chC\\n\\n\\tfmt.Println(<span class=\\\"hljs-string\\\">&quot;Finish&quot;</span>)\\n}\\n\\n<span class=\\\"hljs-comment\\\">// Start</span>\\n<span class=\\\"hljs-comment\\\">// 0 B</span>\\n<span class=\\\"hljs-comment\\\">// 0 A</span>\\n<span class=\\\"hljs-comment\\\">// 0 C</span>\\n<span class=\\\"hljs-comment\\\">// 1 C</span>\\n<span class=\\\"hljs-comment\\\">// 1 A</span>\\n<span class=\\\"hljs-comment\\\">// 1 B</span>\\n<span class=\\\"hljs-comment\\\">// Finish</span>\\n<span class=\\\"hljs-comment\\\">// </span>\\n<span class=\\\"hljs-comment\\\">// ________________________________________________________</span>\\n<span class=\\\"hljs-comment\\\">// Executed in    2.29 secs      fish           external</span>\\n<span class=\\\"hljs-comment\\\">//    usr time  194.02 millis  178.00 micros  193.84 millis</span>\\n<span class=\\\"hljs-comment\\\">//    sys time  207.43 millis  862.00 micros  206.57 millis</span></code></pre><h2>sync.WaitGroup を使う</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\n<span class=\\\"hljs-keyword\\\">type</span> Item <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\tId   <span class=\\\"hljs-keyword\\\">int</span>\\n\\tName <span class=\\\"hljs-keyword\\\">string</span>\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">execLoop</span><span class=\\\"hljs-params\\\">(list []Item)</span></span> {\\n\\t<span class=\\\"hljs-keyword\\\">for</span> _, item := <span class=\\\"hljs-keyword\\\">range</span> list {\\n\\t\\tdoSomething(item)\\n\\t}\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">doSomething</span><span class=\\\"hljs-params\\\">(item Item)</span></span> {\\n\\titem.Id += <span class=\\\"hljs-number\\\">10</span>\\n\\tfmt.Println(item)\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\tlist := []Item{\\n\\t\\t{Id: <span class=\\\"hljs-number\\\">1</span>, Name: <span class=\\\"hljs-string\\\">&quot;item1&quot;</span>},\\n\\t\\t{Id: <span class=\\\"hljs-number\\\">2</span>, Name: <span class=\\\"hljs-string\\\">&quot;item2&quot;</span>},\\n\\t\\t{Id: <span class=\\\"hljs-number\\\">3</span>, Name: <span class=\\\"hljs-string\\\">&quot;item3&quot;</span>},\\n\\t\\t{Id: <span class=\\\"hljs-number\\\">4</span>, Name: <span class=\\\"hljs-string\\\">&quot;item4&quot;</span>},\\n\\t\\t{Id: <span class=\\\"hljs-number\\\">5</span>, Name: <span class=\\\"hljs-string\\\">&quot;item5&quot;</span>},\\n\\t}\\n\\n\\texecLoop(list)\\n}\\n\\n<span class=\\\"hljs-comment\\\">// {11 item1}</span>\\n<span class=\\\"hljs-comment\\\">// {12 item2}</span>\\n<span class=\\\"hljs-comment\\\">// {13 item3}</span>\\n<span class=\\\"hljs-comment\\\">// {14 item4}</span>\\n<span class=\\\"hljs-comment\\\">// {15 item5}</span></code></pre><p>ループ内の処理を並列化する。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;sync&quot;</span>\\n)\\n\\n<span class=\\\"hljs-keyword\\\">type</span> Item <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\tId   <span class=\\\"hljs-keyword\\\">int</span>\\n\\tName <span class=\\\"hljs-keyword\\\">string</span>\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">execLoop</span><span class=\\\"hljs-params\\\">(list []Item)</span></span> {\\n\\t<span class=\\\"hljs-keyword\\\">var</span> wg sync.WaitGroup\\n\\t<span class=\\\"hljs-keyword\\\">for</span> _, item := <span class=\\\"hljs-keyword\\\">range</span> list {\\n\\t\\twg.Add(<span class=\\\"hljs-number\\\">1</span>)\\n\\t\\t<span class=\\\"hljs-keyword\\\">go</span> <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span><span class=\\\"hljs-params\\\">(item2 Item)</span></span> {\\n\\t\\t\\t<span class=\\\"hljs-keyword\\\">defer</span> wg.Done()\\n\\t\\t\\tdoSomething(item2)\\n\\t\\t}(item)\\n\\t}\\n\\twg.Wait()\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">doSomething</span><span class=\\\"hljs-params\\\">(item Item)</span></span> {\\n\\titem.Id += <span class=\\\"hljs-number\\\">10</span>\\n\\tfmt.Println(item)\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\tlist := []Item{\\n\\t\\t{Id: <span class=\\\"hljs-number\\\">1</span>, Name: <span class=\\\"hljs-string\\\">&quot;item1&quot;</span>},\\n\\t\\t{Id: <span class=\\\"hljs-number\\\">2</span>, Name: <span class=\\\"hljs-string\\\">&quot;item2&quot;</span>},\\n\\t\\t{Id: <span class=\\\"hljs-number\\\">3</span>, Name: <span class=\\\"hljs-string\\\">&quot;item3&quot;</span>},\\n\\t\\t{Id: <span class=\\\"hljs-number\\\">4</span>, Name: <span class=\\\"hljs-string\\\">&quot;item4&quot;</span>},\\n\\t\\t{Id: <span class=\\\"hljs-number\\\">5</span>, Name: <span class=\\\"hljs-string\\\">&quot;item5&quot;</span>},\\n\\t}\\n\\n\\texecLoop(list)\\n}\\n\\n<span class=\\\"hljs-comment\\\">// {15 item5}</span>\\n<span class=\\\"hljs-comment\\\">// {11 item1}</span>\\n<span class=\\\"hljs-comment\\\">// {14 item4}</span>\\n<span class=\\\"hljs-comment\\\">// {13 item3}</span>\\n<span class=\\\"hljs-comment\\\">// {12 item2}</span></code></pre><h2>sync.Mutex を使う</h2>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> <span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\n<span class=\\\"hljs-keyword\\\">type</span> myClass <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\tAttributeName <span class=\\\"hljs-keyword\\\">string</span>\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\tsourceSlice := <span class=\\\"hljs-built_in\\\">make</span>([]myClass, <span class=\\\"hljs-number\\\">100</span>)\\n\\tdestSlice := <span class=\\\"hljs-built_in\\\">make</span>([]myClass, <span class=\\\"hljs-number\\\">0</span>)\\n\\n\\t<span class=\\\"hljs-keyword\\\">for</span> _, myObj := <span class=\\\"hljs-keyword\\\">range</span> sourceSlice {\\n\\t\\t<span class=\\\"hljs-keyword\\\">var</span> tmpObj myClass\\n\\t\\ttmpObj.AttributeName = myObj.AttributeName\\n\\t\\tdestSlice = <span class=\\\"hljs-built_in\\\">append</span>(destSlice, tmpObj)\\n\\t}\\n\\tfmt.Println(<span class=\\\"hljs-built_in\\\">len</span>(destSlice))\\n}\\n\\n<span class=\\\"hljs-comment\\\">// 100</span></code></pre><p>sync.WaitGroup を使う。(ダメな例)\\nappend はスレッドセーフではないので件数が減る。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;sync&quot;</span>\\n)\\n\\n<span class=\\\"hljs-keyword\\\">type</span> myClass <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\tAttributeName <span class=\\\"hljs-keyword\\\">string</span>\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\tsourceSlice := <span class=\\\"hljs-built_in\\\">make</span>([]myClass, <span class=\\\"hljs-number\\\">100</span>)\\n\\tdestSlice := <span class=\\\"hljs-built_in\\\">make</span>([]myClass, <span class=\\\"hljs-number\\\">0</span>)\\n\\n\\t<span class=\\\"hljs-keyword\\\">var</span> wg sync.WaitGroup\\n\\t<span class=\\\"hljs-keyword\\\">for</span> _, myObj := <span class=\\\"hljs-keyword\\\">range</span> sourceSlice {\\n\\t\\twg.Add(<span class=\\\"hljs-number\\\">1</span>)\\n\\t\\t<span class=\\\"hljs-keyword\\\">go</span> <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span><span class=\\\"hljs-params\\\">(myObj2 myClass)</span></span> {\\n\\t\\t\\t<span class=\\\"hljs-keyword\\\">defer</span> wg.Done()\\n\\t\\t\\t<span class=\\\"hljs-keyword\\\">var</span> tmpObj myClass\\n\\t\\t\\ttmpObj.AttributeName = myObj2.AttributeName\\n\\t\\t\\tdestSlice = <span class=\\\"hljs-built_in\\\">append</span>(destSlice, tmpObj)\\n\\t\\t}(myObj)\\n\\t}\\n\\twg.Wait()\\n\\tfmt.Println(<span class=\\\"hljs-built_in\\\">len</span>(destSlice))\\n}\\n\\n<span class=\\\"hljs-comment\\\">// 75</span></code></pre><p><em><strong>-race</strong></em> を付けることで競合のチェックができる。</p>\\n<pre><code class=\\\"hljs\\\">$ go run -race main.go\\n\\n~~ 省略 ~~\\n==================\\n97</code></pre><p>sync.Mutex を使う。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;sync&quot;</span>\\n)\\n\\n<span class=\\\"hljs-keyword\\\">type</span> myClass <span class=\\\"hljs-keyword\\\">struct</span> {\\n\\tAttributeName <span class=\\\"hljs-keyword\\\">string</span>\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\tsourceSlice := <span class=\\\"hljs-built_in\\\">make</span>([]myClass, <span class=\\\"hljs-number\\\">100</span>)\\n\\tdestSlice := <span class=\\\"hljs-built_in\\\">make</span>([]myClass, <span class=\\\"hljs-number\\\">0</span>)\\n\\n\\t<span class=\\\"hljs-keyword\\\">var</span> wg sync.WaitGroup\\n\\tmu := &amp;sync.Mutex{}\\n\\t<span class=\\\"hljs-keyword\\\">for</span> _, myObj := <span class=\\\"hljs-keyword\\\">range</span> sourceSlice {\\n\\t\\twg.Add(<span class=\\\"hljs-number\\\">1</span>)\\n\\t\\t<span class=\\\"hljs-keyword\\\">go</span> <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span><span class=\\\"hljs-params\\\">(myObj2 myClass)</span></span> {\\n\\t\\t\\t<span class=\\\"hljs-keyword\\\">defer</span> wg.Done()\\n\\t\\t\\t<span class=\\\"hljs-keyword\\\">var</span> tmpObj myClass\\n\\t\\t\\ttmpObj.AttributeName = myObj2.AttributeName\\n\\t\\t\\tmu.Lock()\\n\\t\\t\\tdestSlice = <span class=\\\"hljs-built_in\\\">append</span>(destSlice, tmpObj)\\n\\t\\t\\tmu.Unlock()\\n\\t\\t}(myObj)\\n\\t}\\n\\twg.Wait()\\n\\tfmt.Println(<span class=\\\"hljs-built_in\\\">len</span>(destSlice))\\n}\\n\\n<span class=\\\"hljs-comment\\\">// 100</span></code></pre><h2>ポーリング</h2>\\n<p><em><strong>len(q)</strong></em> は溜まったバッファ数を返す。<br>\\n<em><strong>make</strong></em> で作るときはバッファ数を 2 以上で作らないと <em><strong>len(q)</strong></em> は常に 0 を返す。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;time&quot;</span>\\n)\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\tq := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">chan</span> <span class=\\\"hljs-keyword\\\">struct</span>{}, <span class=\\\"hljs-number\\\">2</span>)\\n\\n\\t<span class=\\\"hljs-keyword\\\">go</span> <span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\t\\t<span class=\\\"hljs-comment\\\">// 重たい処理</span>\\n\\t\\ttime.Sleep(<span class=\\\"hljs-number\\\">3</span> * time.Second)\\n\\t\\tq &lt;- <span class=\\\"hljs-keyword\\\">struct</span>{}{}\\n\\t}()\\n\\n\\t<span class=\\\"hljs-keyword\\\">for</span> {\\n\\t\\t<span class=\\\"hljs-keyword\\\">if</span> <span class=\\\"hljs-built_in\\\">len</span>(q) &gt; <span class=\\\"hljs-number\\\">0</span> {\\n\\t\\t\\tfmt.Println(<span class=\\\"hljs-string\\\">&quot;完了&quot;</span>)\\n\\t\\t\\t<span class=\\\"hljs-keyword\\\">break</span>\\n\\t\\t}\\n\\t\\ttime.Sleep(<span class=\\\"hljs-number\\\">1</span> * time.Second)\\n\\t\\tfmt.Println(<span class=\\\"hljs-string\\\">&quot;実行中&quot;</span>)\\n\\t}\\n}\\n\\n<span class=\\\"hljs-comment\\\">// 実行中</span>\\n<span class=\\\"hljs-comment\\\">// 実行中</span>\\n<span class=\\\"hljs-comment\\\">// 実行中</span>\\n<span class=\\\"hljs-comment\\\">// 完了</span></code></pre><h2>ワーカー</h2>\\n<p><em><strong>close(q)</strong></em> されたら <em><strong>str, ok := &lt;- q</strong></em> の <em><strong>ok</strong></em> が <em><strong>false</strong></em> になる。</p>\\n<pre><code class=\\\"hljs\\\"><span class=\\\"hljs-keyword\\\">package</span> main\\n\\n<span class=\\\"hljs-keyword\\\">import</span> (\\n\\t<span class=\\\"hljs-string\\\">&quot;fmt&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;sync&quot;</span>\\n\\t<span class=\\\"hljs-string\\\">&quot;time&quot;</span>\\n)\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">printString</span><span class=\\\"hljs-params\\\">(wg *sync.WaitGroup, q <span class=\\\"hljs-keyword\\\">chan</span> <span class=\\\"hljs-keyword\\\">string</span>)</span></span> {\\n\\t<span class=\\\"hljs-keyword\\\">defer</span> wg.Done()\\n\\n\\t<span class=\\\"hljs-keyword\\\">for</span> {\\n\\t\\tstr, ok := &lt;-q\\n\\t\\t<span class=\\\"hljs-keyword\\\">if</span> !ok {\\n\\t\\t\\t<span class=\\\"hljs-keyword\\\">return</span>\\n\\t\\t}\\n\\n\\t\\tfmt.Println(str)\\n\\t\\ttime.Sleep(<span class=\\\"hljs-number\\\">3</span> * time.Second)\\n\\t}\\n}\\n\\n<span class=\\\"hljs-function\\\"><span class=\\\"hljs-keyword\\\">func</span> <span class=\\\"hljs-title\\\">main</span><span class=\\\"hljs-params\\\">()</span></span> {\\n\\t<span class=\\\"hljs-keyword\\\">const</span> workerNum = <span class=\\\"hljs-number\\\">3</span>\\n\\t<span class=\\\"hljs-keyword\\\">var</span> wg sync.WaitGroup\\n\\tq := <span class=\\\"hljs-built_in\\\">make</span>(<span class=\\\"hljs-keyword\\\">chan</span> <span class=\\\"hljs-keyword\\\">string</span>, <span class=\\\"hljs-number\\\">5</span>)\\n\\n\\t<span class=\\\"hljs-keyword\\\">for</span> i := <span class=\\\"hljs-number\\\">0</span>; i &lt; workerNum; i++ {\\n\\t\\twg.Add(<span class=\\\"hljs-number\\\">1</span>)\\n\\t\\t<span class=\\\"hljs-keyword\\\">go</span> printString(&amp;wg, q)\\n\\t}\\n\\n\\tq &lt;- <span class=\\\"hljs-string\\\">&quot;test1&quot;</span>\\n\\tq &lt;- <span class=\\\"hljs-string\\\">&quot;test2&quot;</span>\\n\\tq &lt;- <span class=\\\"hljs-string\\\">&quot;test3&quot;</span>\\n\\tq &lt;- <span class=\\\"hljs-string\\\">&quot;test4&quot;</span>\\n\\tq &lt;- <span class=\\\"hljs-string\\\">&quot;test5&quot;</span>\\n\\t<span class=\\\"hljs-built_in\\\">close</span>(q)\\n\\twg.Wait()\\n}\\n\\n<span class=\\\"hljs-comment\\\">// test2</span>\\n<span class=\\\"hljs-comment\\\">// test1</span>\\n<span class=\\\"hljs-comment\\\">// test3</span>\\n<span class=\\\"hljs-comment\\\">// test5</span>\\n<span class=\\\"hljs-comment\\\">// test4</span></code></pre>\",\n  \"dir\": \"articles\",\n  \"base\": \"20210429182820.json\",\n  \"ext\": \".json\",\n  \"sourceBase\": \"20210429182820.md\",\n  \"sourceExt\": \".md\"\n}"}},"__N_SSG":true}